
103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003010  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000290c  0800311c  0800311c  0001311c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a28  08005a28  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08005a28  08005a28  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a28  08005a28  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a28  08005a28  00015a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a2c  08005a2c  00015a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08005a30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000030  08005a60  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08005a60  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c502  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dec  00000000  00000000  0002c55b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  0002e348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000026a8  00000000  00000000  0002f038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000d83e  00000000  00000000  000316e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008a9eb  00000000  00000000  0003ef1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000c9909  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000c00  00000000  00000000  000c9960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000035cc  00000000  00000000  000ca560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	08003104 	.word	0x08003104

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	08003104 	.word	0x08003104

0800014c <lcd>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void lcd (void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af04      	add	r7, sp, #16
	 ST7735_SetRotation(r);
 8000152:	4b75      	ldr	r3, [pc, #468]	; (8000328 <lcd+0x1dc>)
 8000154:	781b      	ldrb	r3, [r3, #0]
 8000156:	4618      	mov	r0, r3
 8000158:	f000 fde0 	bl	8000d1c <ST7735_SetRotation>

	 // Check fonts
	 ST7735_FillScreen(ST7735_BLACK);
 800015c:	2000      	movs	r0, #0
 800015e:	f000 fdb5 	bl	8000ccc <ST7735_FillScreen>
	 ST7735_DrawString(0, 0, "Stariy", Font_7x10, ST7735_RED, ST7735_BLACK);
 8000162:	4b72      	ldr	r3, [pc, #456]	; (800032c <lcd+0x1e0>)
 8000164:	2200      	movs	r2, #0
 8000166:	9202      	str	r2, [sp, #8]
 8000168:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800016c:	9201      	str	r2, [sp, #4]
 800016e:	685a      	ldr	r2, [r3, #4]
 8000170:	9200      	str	r2, [sp, #0]
 8000172:	681b      	ldr	r3, [r3, #0]
 8000174:	4a6e      	ldr	r2, [pc, #440]	; (8000330 <lcd+0x1e4>)
 8000176:	2100      	movs	r1, #0
 8000178:	2000      	movs	r0, #0
 800017a:	f000 fcbd 	bl	8000af8 <ST7735_DrawString>
	 ST7735_DrawString(0, 3*10, "and Maks", Font_11x18, ST7735_GREEN, ST7735_BLACK);
 800017e:	4b6d      	ldr	r3, [pc, #436]	; (8000334 <lcd+0x1e8>)
 8000180:	2200      	movs	r2, #0
 8000182:	9202      	str	r2, [sp, #8]
 8000184:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000188:	9201      	str	r2, [sp, #4]
 800018a:	685a      	ldr	r2, [r3, #4]
 800018c:	9200      	str	r2, [sp, #0]
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a69      	ldr	r2, [pc, #420]	; (8000338 <lcd+0x1ec>)
 8000192:	211e      	movs	r1, #30
 8000194:	2000      	movs	r0, #0
 8000196:	f000 fcaf 	bl	8000af8 <ST7735_DrawString>
	 ST7735_DrawString(0, 3*10+3*18, "Pidors", Font_16x26, ST7735_BLUE, ST7735_BLACK);
 800019a:	4b68      	ldr	r3, [pc, #416]	; (800033c <lcd+0x1f0>)
 800019c:	2200      	movs	r2, #0
 800019e:	9202      	str	r2, [sp, #8]
 80001a0:	221f      	movs	r2, #31
 80001a2:	9201      	str	r2, [sp, #4]
 80001a4:	685a      	ldr	r2, [r3, #4]
 80001a6:	9200      	str	r2, [sp, #0]
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	4a65      	ldr	r2, [pc, #404]	; (8000340 <lcd+0x1f4>)
 80001ac:	2154      	movs	r1, #84	; 0x54
 80001ae:	2000      	movs	r0, #0
 80001b0:	f000 fca2 	bl	8000af8 <ST7735_DrawString>
	 HAL_Delay(2000);
 80001b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80001b8:	f000 fffc 	bl	80011b4 <HAL_Delay>

	 // Check colors
	 ST7735_FillScreen(ST7735_BLACK);
 80001bc:	2000      	movs	r0, #0
 80001be:	f000 fd85 	bl	8000ccc <ST7735_FillScreen>
	 ST7735_DrawString(0, 0, "STARIY", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 80001c2:	4b5c      	ldr	r3, [pc, #368]	; (8000334 <lcd+0x1e8>)
 80001c4:	2200      	movs	r2, #0
 80001c6:	9202      	str	r2, [sp, #8]
 80001c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80001cc:	9201      	str	r2, [sp, #4]
 80001ce:	685a      	ldr	r2, [r3, #4]
 80001d0:	9200      	str	r2, [sp, #0]
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	4a5b      	ldr	r2, [pc, #364]	; (8000344 <lcd+0x1f8>)
 80001d6:	2100      	movs	r1, #0
 80001d8:	2000      	movs	r0, #0
 80001da:	f000 fc8d 	bl	8000af8 <ST7735_DrawString>
	 HAL_Delay(500);
 80001de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001e2:	f000 ffe7 	bl	80011b4 <HAL_Delay>

	 ST7735_FillScreen(ST7735_BLUE);
 80001e6:	201f      	movs	r0, #31
 80001e8:	f000 fd70 	bl	8000ccc <ST7735_FillScreen>
	 ST7735_DrawString(0, 0, "MAKS", Font_11x18, ST7735_BLACK, ST7735_BLUE);
 80001ec:	4b51      	ldr	r3, [pc, #324]	; (8000334 <lcd+0x1e8>)
 80001ee:	221f      	movs	r2, #31
 80001f0:	9202      	str	r2, [sp, #8]
 80001f2:	2200      	movs	r2, #0
 80001f4:	9201      	str	r2, [sp, #4]
 80001f6:	685a      	ldr	r2, [r3, #4]
 80001f8:	9200      	str	r2, [sp, #0]
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a52      	ldr	r2, [pc, #328]	; (8000348 <lcd+0x1fc>)
 80001fe:	2100      	movs	r1, #0
 8000200:	2000      	movs	r0, #0
 8000202:	f000 fc79 	bl	8000af8 <ST7735_DrawString>
	 HAL_Delay(500);
 8000206:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800020a:	f000 ffd3 	bl	80011b4 <HAL_Delay>

	 ST7735_FillScreen(ST7735_RED);
 800020e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000212:	f000 fd5b 	bl	8000ccc <ST7735_FillScreen>
	 ST7735_DrawString(0, 0, "KOLYAN", Font_11x18, ST7735_BLACK, ST7735_RED);
 8000216:	4b47      	ldr	r3, [pc, #284]	; (8000334 <lcd+0x1e8>)
 8000218:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800021c:	9202      	str	r2, [sp, #8]
 800021e:	2200      	movs	r2, #0
 8000220:	9201      	str	r2, [sp, #4]
 8000222:	685a      	ldr	r2, [r3, #4]
 8000224:	9200      	str	r2, [sp, #0]
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a48      	ldr	r2, [pc, #288]	; (800034c <lcd+0x200>)
 800022a:	2100      	movs	r1, #0
 800022c:	2000      	movs	r0, #0
 800022e:	f000 fc63 	bl	8000af8 <ST7735_DrawString>
	 HAL_Delay(500);
 8000232:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000236:	f000 ffbd 	bl	80011b4 <HAL_Delay>

	 ST7735_FillScreen(ST7735_GREEN);
 800023a:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 800023e:	f000 fd45 	bl	8000ccc <ST7735_FillScreen>
	 ST7735_DrawString(0, 0, "PIDORS", Font_11x18, ST7735_BLACK, ST7735_GREEN);
 8000242:	4b3c      	ldr	r3, [pc, #240]	; (8000334 <lcd+0x1e8>)
 8000244:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000248:	9202      	str	r2, [sp, #8]
 800024a:	2200      	movs	r2, #0
 800024c:	9201      	str	r2, [sp, #4]
 800024e:	685a      	ldr	r2, [r3, #4]
 8000250:	9200      	str	r2, [sp, #0]
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a3e      	ldr	r2, [pc, #248]	; (8000350 <lcd+0x204>)
 8000256:	2100      	movs	r1, #0
 8000258:	2000      	movs	r0, #0
 800025a:	f000 fc4d 	bl	8000af8 <ST7735_DrawString>
	 HAL_Delay(500);
 800025e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000262:	f000 ffa7 	bl	80011b4 <HAL_Delay>

	 ST7735_FillScreen(ST7735_CYAN);
 8000266:	f240 70ff 	movw	r0, #2047	; 0x7ff
 800026a:	f000 fd2f 	bl	8000ccc <ST7735_FillScreen>
	 ST7735_DrawString(0, 0, "DANIEL", Font_11x18, ST7735_BLACK, ST7735_CYAN);
 800026e:	4b31      	ldr	r3, [pc, #196]	; (8000334 <lcd+0x1e8>)
 8000270:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000274:	9202      	str	r2, [sp, #8]
 8000276:	2200      	movs	r2, #0
 8000278:	9201      	str	r2, [sp, #4]
 800027a:	685a      	ldr	r2, [r3, #4]
 800027c:	9200      	str	r2, [sp, #0]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a34      	ldr	r2, [pc, #208]	; (8000354 <lcd+0x208>)
 8000282:	2100      	movs	r1, #0
 8000284:	2000      	movs	r0, #0
 8000286:	f000 fc37 	bl	8000af8 <ST7735_DrawString>
	 HAL_Delay(500);
 800028a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800028e:	f000 ff91 	bl	80011b4 <HAL_Delay>

	 ST7735_FillScreen(ST7735_MAGENTA);
 8000292:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8000296:	f000 fd19 	bl	8000ccc <ST7735_FillScreen>
	 ST7735_DrawString(0, 0, "BRYAN", Font_11x18, ST7735_BLACK, ST7735_MAGENTA);
 800029a:	4b26      	ldr	r3, [pc, #152]	; (8000334 <lcd+0x1e8>)
 800029c:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80002a0:	9202      	str	r2, [sp, #8]
 80002a2:	2200      	movs	r2, #0
 80002a4:	9201      	str	r2, [sp, #4]
 80002a6:	685a      	ldr	r2, [r3, #4]
 80002a8:	9200      	str	r2, [sp, #0]
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a2a      	ldr	r2, [pc, #168]	; (8000358 <lcd+0x20c>)
 80002ae:	2100      	movs	r1, #0
 80002b0:	2000      	movs	r0, #0
 80002b2:	f000 fc21 	bl	8000af8 <ST7735_DrawString>
	 HAL_Delay(500);
 80002b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002ba:	f000 ff7b 	bl	80011b4 <HAL_Delay>

	 ST7735_FillScreen(ST7735_YELLOW);
 80002be:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80002c2:	f000 fd03 	bl	8000ccc <ST7735_FillScreen>
	 ST7735_DrawString(0, 0, "PIZDEC", Font_11x18, ST7735_BLACK, ST7735_YELLOW);
 80002c6:	4b1b      	ldr	r3, [pc, #108]	; (8000334 <lcd+0x1e8>)
 80002c8:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80002cc:	9202      	str	r2, [sp, #8]
 80002ce:	2200      	movs	r2, #0
 80002d0:	9201      	str	r2, [sp, #4]
 80002d2:	685a      	ldr	r2, [r3, #4]
 80002d4:	9200      	str	r2, [sp, #0]
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a20      	ldr	r2, [pc, #128]	; (800035c <lcd+0x210>)
 80002da:	2100      	movs	r1, #0
 80002dc:	2000      	movs	r0, #0
 80002de:	f000 fc0b 	bl	8000af8 <ST7735_DrawString>
	 HAL_Delay(500);
 80002e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002e6:	f000 ff65 	bl	80011b4 <HAL_Delay>

	 ST7735_FillScreen(ST7735_WHITE);
 80002ea:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80002ee:	f000 fced 	bl	8000ccc <ST7735_FillScreen>
	 ST7735_DrawString(0, 0, "KARTA", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 80002f2:	4b10      	ldr	r3, [pc, #64]	; (8000334 <lcd+0x1e8>)
 80002f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002f8:	9202      	str	r2, [sp, #8]
 80002fa:	2200      	movs	r2, #0
 80002fc:	9201      	str	r2, [sp, #4]
 80002fe:	685a      	ldr	r2, [r3, #4]
 8000300:	9200      	str	r2, [sp, #0]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a16      	ldr	r2, [pc, #88]	; (8000360 <lcd+0x214>)
 8000306:	2100      	movs	r1, #0
 8000308:	2000      	movs	r0, #0
 800030a:	f000 fbf5 	bl	8000af8 <ST7735_DrawString>
	 HAL_Delay(500);
 800030e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000312:	f000 ff4f 	bl	80011b4 <HAL_Delay>

	 r++;
 8000316:	4b04      	ldr	r3, [pc, #16]	; (8000328 <lcd+0x1dc>)
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	3301      	adds	r3, #1
 800031c:	b2da      	uxtb	r2, r3
 800031e:	4b02      	ldr	r3, [pc, #8]	; (8000328 <lcd+0x1dc>)
 8000320:	701a      	strb	r2, [r3, #0]
}
 8000322:	bf00      	nop
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	20000178 	.word	0x20000178
 800032c:	20000000 	.word	0x20000000
 8000330:	0800311c 	.word	0x0800311c
 8000334:	20000008 	.word	0x20000008
 8000338:	08003124 	.word	0x08003124
 800033c:	20000010 	.word	0x20000010
 8000340:	08003130 	.word	0x08003130
 8000344:	08003138 	.word	0x08003138
 8000348:	08003140 	.word	0x08003140
 800034c:	08003148 	.word	0x08003148
 8000350:	08003150 	.word	0x08003150
 8000354:	08003158 	.word	0x08003158
 8000358:	08003160 	.word	0x08003160
 800035c:	08003168 	.word	0x08003168
 8000360:	08003170 	.word	0x08003170

08000364 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000368:	f000 fec2 	bl	80010f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800036c:	f000 f828 	bl	80003c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000370:	f000 f95e 	bl	8000630 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000374:	f000 f8a0 	bl	80004b8 <MX_TIM1_Init>
  MX_DMA_Init();
 8000378:	f000 f93c 	bl	80005f4 <MX_DMA_Init>
  MX_SPI1_Init();
 800037c:	f000 f866 	bl	800044c <MX_SPI1_Init>
  MX_TIM2_Init();
 8000380:	f000 f8ec 	bl	800055c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim1);
 8000384:	480b      	ldr	r0, [pc, #44]	; (80003b4 <main+0x50>)
 8000386:	f002 fadb 	bl	8002940 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim2);
 800038a:	480b      	ldr	r0, [pc, #44]	; (80003b8 <main+0x54>)
 800038c:	f002 fa8e 	bl	80028ac <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRG_GPIO_Port, TRG_Pin, GPIO_PIN_RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000396:	4809      	ldr	r0, [pc, #36]	; (80003bc <main+0x58>)
 8000398:	f001 fbb0 	bl	8001afc <HAL_GPIO_WritePin>
  ST7735_Init();
 800039c:	f000 fb88 	bl	8000ab0 <ST7735_Init>
  ST7735_Backlight_On();
 80003a0:	f000 fcb0 	bl	8000d04 <ST7735_Backlight_On>
  ST7735_FillScreen(ST7735_WHITE);
 80003a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80003a8:	f000 fc90 	bl	8000ccc <ST7735_FillScreen>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

lcd();
 80003ac:	f7ff fece 	bl	800014c <lcd>
 80003b0:	e7fc      	b.n	80003ac <main+0x48>
 80003b2:	bf00      	nop
 80003b4:	200000e8 	.word	0x200000e8
 80003b8:	20000130 	.word	0x20000130
 80003bc:	40010c00 	.word	0x40010c00

080003c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b090      	sub	sp, #64	; 0x40
 80003c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c6:	f107 0318 	add.w	r3, r7, #24
 80003ca:	2228      	movs	r2, #40	; 0x28
 80003cc:	2100      	movs	r1, #0
 80003ce:	4618      	mov	r0, r3
 80003d0:	f002 fe90 	bl	80030f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
 80003da:	605a      	str	r2, [r3, #4]
 80003dc:	609a      	str	r2, [r3, #8]
 80003de:	60da      	str	r2, [r3, #12]
 80003e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003e2:	2301      	movs	r3, #1
 80003e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003ec:	2300      	movs	r3, #0
 80003ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003f0:	2301      	movs	r3, #1
 80003f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003f4:	2302      	movs	r3, #2
 80003f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003fe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000402:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000404:	f107 0318 	add.w	r3, r7, #24
 8000408:	4618      	mov	r0, r3
 800040a:	f001 fba9 	bl	8001b60 <HAL_RCC_OscConfig>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000414:	f000 f9ba 	bl	800078c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000418:	230f      	movs	r3, #15
 800041a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800041c:	2302      	movs	r3, #2
 800041e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000420:	2300      	movs	r3, #0
 8000422:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000424:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000428:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800042a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800042e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000430:	1d3b      	adds	r3, r7, #4
 8000432:	2102      	movs	r1, #2
 8000434:	4618      	mov	r0, r3
 8000436:	f001 fe15 	bl	8002064 <HAL_RCC_ClockConfig>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000440:	f000 f9a4 	bl	800078c <Error_Handler>
  }
}
 8000444:	bf00      	nop
 8000446:	3740      	adds	r7, #64	; 0x40
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}

0800044c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000450:	4b17      	ldr	r3, [pc, #92]	; (80004b0 <MX_SPI1_Init+0x64>)
 8000452:	4a18      	ldr	r2, [pc, #96]	; (80004b4 <MX_SPI1_Init+0x68>)
 8000454:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000456:	4b16      	ldr	r3, [pc, #88]	; (80004b0 <MX_SPI1_Init+0x64>)
 8000458:	f44f 7282 	mov.w	r2, #260	; 0x104
 800045c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800045e:	4b14      	ldr	r3, [pc, #80]	; (80004b0 <MX_SPI1_Init+0x64>)
 8000460:	2200      	movs	r2, #0
 8000462:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000464:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <MX_SPI1_Init+0x64>)
 8000466:	2200      	movs	r2, #0
 8000468:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800046a:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <MX_SPI1_Init+0x64>)
 800046c:	2200      	movs	r2, #0
 800046e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000470:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <MX_SPI1_Init+0x64>)
 8000472:	2200      	movs	r2, #0
 8000474:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000476:	4b0e      	ldr	r3, [pc, #56]	; (80004b0 <MX_SPI1_Init+0x64>)
 8000478:	f44f 7200 	mov.w	r2, #512	; 0x200
 800047c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800047e:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <MX_SPI1_Init+0x64>)
 8000480:	2200      	movs	r2, #0
 8000482:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000484:	4b0a      	ldr	r3, [pc, #40]	; (80004b0 <MX_SPI1_Init+0x64>)
 8000486:	2200      	movs	r2, #0
 8000488:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800048a:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <MX_SPI1_Init+0x64>)
 800048c:	2200      	movs	r2, #0
 800048e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000490:	4b07      	ldr	r3, [pc, #28]	; (80004b0 <MX_SPI1_Init+0x64>)
 8000492:	2200      	movs	r2, #0
 8000494:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000496:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <MX_SPI1_Init+0x64>)
 8000498:	220a      	movs	r2, #10
 800049a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800049c:	4804      	ldr	r0, [pc, #16]	; (80004b0 <MX_SPI1_Init+0x64>)
 800049e:	f001 ff3d 	bl	800231c <HAL_SPI_Init>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80004a8:	f000 f970 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004ac:	bf00      	nop
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	2000004c 	.word	0x2000004c
 80004b4:	40013000 	.word	0x40013000

080004b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b086      	sub	sp, #24
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004be:	f107 0308 	add.w	r3, r7, #8
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004cc:	463b      	mov	r3, r7
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004d4:	4b1f      	ldr	r3, [pc, #124]	; (8000554 <MX_TIM1_Init+0x9c>)
 80004d6:	4a20      	ldr	r2, [pc, #128]	; (8000558 <MX_TIM1_Init+0xa0>)
 80004d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 719;
 80004da:	4b1e      	ldr	r3, [pc, #120]	; (8000554 <MX_TIM1_Init+0x9c>)
 80004dc:	f240 22cf 	movw	r2, #719	; 0x2cf
 80004e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004e2:	4b1c      	ldr	r3, [pc, #112]	; (8000554 <MX_TIM1_Init+0x9c>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000;
 80004e8:	4b1a      	ldr	r3, [pc, #104]	; (8000554 <MX_TIM1_Init+0x9c>)
 80004ea:	f24c 3250 	movw	r2, #50000	; 0xc350
 80004ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004f0:	4b18      	ldr	r3, [pc, #96]	; (8000554 <MX_TIM1_Init+0x9c>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004f6:	4b17      	ldr	r3, [pc, #92]	; (8000554 <MX_TIM1_Init+0x9c>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004fc:	4b15      	ldr	r3, [pc, #84]	; (8000554 <MX_TIM1_Init+0x9c>)
 80004fe:	2200      	movs	r2, #0
 8000500:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000502:	4814      	ldr	r0, [pc, #80]	; (8000554 <MX_TIM1_Init+0x9c>)
 8000504:	f002 f982 	bl	800280c <HAL_TIM_Base_Init>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800050e:	f000 f93d 	bl	800078c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000512:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000516:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000518:	f107 0308 	add.w	r3, r7, #8
 800051c:	4619      	mov	r1, r3
 800051e:	480d      	ldr	r0, [pc, #52]	; (8000554 <MX_TIM1_Init+0x9c>)
 8000520:	f002 fb68 	bl	8002bf4 <HAL_TIM_ConfigClockSource>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800052a:	f000 f92f 	bl	800078c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800052e:	2300      	movs	r3, #0
 8000530:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000532:	2300      	movs	r3, #0
 8000534:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000536:	463b      	mov	r3, r7
 8000538:	4619      	mov	r1, r3
 800053a:	4806      	ldr	r0, [pc, #24]	; (8000554 <MX_TIM1_Init+0x9c>)
 800053c:	f002 fd46 	bl	8002fcc <HAL_TIMEx_MasterConfigSynchronization>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000546:	f000 f921 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800054a:	bf00      	nop
 800054c:	3718      	adds	r7, #24
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	200000e8 	.word	0x200000e8
 8000558:	40012c00 	.word	0x40012c00

0800055c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b086      	sub	sp, #24
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000562:	f107 0308 	add.w	r3, r7, #8
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
 800056e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000570:	463b      	mov	r3, r7
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000578:	4b1d      	ldr	r3, [pc, #116]	; (80005f0 <MX_TIM2_Init+0x94>)
 800057a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800057e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000580:	4b1b      	ldr	r3, [pc, #108]	; (80005f0 <MX_TIM2_Init+0x94>)
 8000582:	2247      	movs	r2, #71	; 0x47
 8000584:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000586:	4b1a      	ldr	r3, [pc, #104]	; (80005f0 <MX_TIM2_Init+0x94>)
 8000588:	2200      	movs	r2, #0
 800058a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800058c:	4b18      	ldr	r3, [pc, #96]	; (80005f0 <MX_TIM2_Init+0x94>)
 800058e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000592:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000594:	4b16      	ldr	r3, [pc, #88]	; (80005f0 <MX_TIM2_Init+0x94>)
 8000596:	2200      	movs	r2, #0
 8000598:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800059a:	4b15      	ldr	r3, [pc, #84]	; (80005f0 <MX_TIM2_Init+0x94>)
 800059c:	2200      	movs	r2, #0
 800059e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005a0:	4813      	ldr	r0, [pc, #76]	; (80005f0 <MX_TIM2_Init+0x94>)
 80005a2:	f002 f933 	bl	800280c <HAL_TIM_Base_Init>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80005ac:	f000 f8ee 	bl	800078c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005b6:	f107 0308 	add.w	r3, r7, #8
 80005ba:	4619      	mov	r1, r3
 80005bc:	480c      	ldr	r0, [pc, #48]	; (80005f0 <MX_TIM2_Init+0x94>)
 80005be:	f002 fb19 	bl	8002bf4 <HAL_TIM_ConfigClockSource>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80005c8:	f000 f8e0 	bl	800078c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005cc:	2300      	movs	r3, #0
 80005ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005d4:	463b      	mov	r3, r7
 80005d6:	4619      	mov	r1, r3
 80005d8:	4805      	ldr	r0, [pc, #20]	; (80005f0 <MX_TIM2_Init+0x94>)
 80005da:	f002 fcf7 	bl	8002fcc <HAL_TIMEx_MasterConfigSynchronization>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80005e4:	f000 f8d2 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005e8:	bf00      	nop
 80005ea:	3718      	adds	r7, #24
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000130 	.word	0x20000130

080005f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005fa:	4b0c      	ldr	r3, [pc, #48]	; (800062c <MX_DMA_Init+0x38>)
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	4a0b      	ldr	r2, [pc, #44]	; (800062c <MX_DMA_Init+0x38>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6153      	str	r3, [r2, #20]
 8000606:	4b09      	ldr	r3, [pc, #36]	; (800062c <MX_DMA_Init+0x38>)
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000612:	2200      	movs	r2, #0
 8000614:	2100      	movs	r1, #0
 8000616:	200d      	movs	r0, #13
 8000618:	f000 fec7 	bl	80013aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800061c:	200d      	movs	r0, #13
 800061e:	f000 fee0 	bl	80013e2 <HAL_NVIC_EnableIRQ>

}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40021000 	.word	0x40021000

08000630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 0310 	add.w	r3, r7, #16
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000644:	4b4d      	ldr	r3, [pc, #308]	; (800077c <MX_GPIO_Init+0x14c>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	4a4c      	ldr	r2, [pc, #304]	; (800077c <MX_GPIO_Init+0x14c>)
 800064a:	f043 0310 	orr.w	r3, r3, #16
 800064e:	6193      	str	r3, [r2, #24]
 8000650:	4b4a      	ldr	r3, [pc, #296]	; (800077c <MX_GPIO_Init+0x14c>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	f003 0310 	and.w	r3, r3, #16
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800065c:	4b47      	ldr	r3, [pc, #284]	; (800077c <MX_GPIO_Init+0x14c>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	4a46      	ldr	r2, [pc, #280]	; (800077c <MX_GPIO_Init+0x14c>)
 8000662:	f043 0320 	orr.w	r3, r3, #32
 8000666:	6193      	str	r3, [r2, #24]
 8000668:	4b44      	ldr	r3, [pc, #272]	; (800077c <MX_GPIO_Init+0x14c>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f003 0320 	and.w	r3, r3, #32
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000674:	4b41      	ldr	r3, [pc, #260]	; (800077c <MX_GPIO_Init+0x14c>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	4a40      	ldr	r2, [pc, #256]	; (800077c <MX_GPIO_Init+0x14c>)
 800067a:	f043 0304 	orr.w	r3, r3, #4
 800067e:	6193      	str	r3, [r2, #24]
 8000680:	4b3e      	ldr	r3, [pc, #248]	; (800077c <MX_GPIO_Init+0x14c>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f003 0304 	and.w	r3, r3, #4
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068c:	4b3b      	ldr	r3, [pc, #236]	; (800077c <MX_GPIO_Init+0x14c>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a3a      	ldr	r2, [pc, #232]	; (800077c <MX_GPIO_Init+0x14c>)
 8000692:	f043 0308 	orr.w	r3, r3, #8
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b38      	ldr	r3, [pc, #224]	; (800077c <MX_GPIO_Init+0x14c>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f003 0308 	and.w	r3, r3, #8
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006aa:	4835      	ldr	r0, [pc, #212]	; (8000780 <MX_GPIO_Init+0x150>)
 80006ac:	f001 fa26 	bl	8001afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRG_Pin|ST7735_CS_Pin|ST7735_DC_Pin|ST7735_RES_Pin, GPIO_PIN_RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	f248 01e0 	movw	r1, #32992	; 0x80e0
 80006b6:	4833      	ldr	r0, [pc, #204]	; (8000784 <MX_GPIO_Init+0x154>)
 80006b8:	f001 fa20 	bl	8001afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7735_BL_GPIO_Port, ST7735_BL_Pin, GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006c2:	4831      	ldr	r0, [pc, #196]	; (8000788 <MX_GPIO_Init+0x158>)
 80006c4:	f001 fa1a 	bl	8001afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED13_Pin */
  GPIO_InitStruct.Pin = LED13_Pin;
 80006c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ce:	2301      	movs	r3, #1
 80006d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d6:	2302      	movs	r3, #2
 80006d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED13_GPIO_Port, &GPIO_InitStruct);
 80006da:	f107 0310 	add.w	r3, r7, #16
 80006de:	4619      	mov	r1, r3
 80006e0:	4827      	ldr	r0, [pc, #156]	; (8000780 <MX_GPIO_Init+0x150>)
 80006e2:	f001 f887 	bl	80017f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 80006e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 80006f4:	f107 0310 	add.w	r3, r7, #16
 80006f8:	4619      	mov	r1, r3
 80006fa:	4822      	ldr	r0, [pc, #136]	; (8000784 <MX_GPIO_Init+0x154>)
 80006fc:	f001 f87a 	bl	80017f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRG_Pin */
  GPIO_InitStruct.Pin = TRG_Pin;
 8000700:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000704:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000706:	2301      	movs	r3, #1
 8000708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070e:	2302      	movs	r3, #2
 8000710:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TRG_GPIO_Port, &GPIO_InitStruct);
 8000712:	f107 0310 	add.w	r3, r7, #16
 8000716:	4619      	mov	r1, r3
 8000718:	481a      	ldr	r0, [pc, #104]	; (8000784 <MX_GPIO_Init+0x154>)
 800071a:	f001 f86b 	bl	80017f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT_11_Pin */
  GPIO_InitStruct.Pin = DHT_11_Pin;
 800071e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000722:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000728:	2301      	movs	r3, #1
 800072a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DHT_11_GPIO_Port, &GPIO_InitStruct);
 800072c:	f107 0310 	add.w	r3, r7, #16
 8000730:	4619      	mov	r1, r3
 8000732:	4815      	ldr	r0, [pc, #84]	; (8000788 <MX_GPIO_Init+0x158>)
 8000734:	f001 f85e 	bl	80017f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7735_BL_Pin */
  GPIO_InitStruct.Pin = ST7735_BL_Pin;
 8000738:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800073c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073e:	2301      	movs	r3, #1
 8000740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000742:	2301      	movs	r3, #1
 8000744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	2302      	movs	r3, #2
 8000748:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ST7735_BL_GPIO_Port, &GPIO_InitStruct);
 800074a:	f107 0310 	add.w	r3, r7, #16
 800074e:	4619      	mov	r1, r3
 8000750:	480d      	ldr	r0, [pc, #52]	; (8000788 <MX_GPIO_Init+0x158>)
 8000752:	f001 f84f 	bl	80017f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7735_CS_Pin ST7735_DC_Pin ST7735_RES_Pin */
  GPIO_InitStruct.Pin = ST7735_CS_Pin|ST7735_DC_Pin|ST7735_RES_Pin;
 8000756:	23e0      	movs	r3, #224	; 0xe0
 8000758:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075a:	2301      	movs	r3, #1
 800075c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800075e:	2301      	movs	r3, #1
 8000760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	2302      	movs	r3, #2
 8000764:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000766:	f107 0310 	add.w	r3, r7, #16
 800076a:	4619      	mov	r1, r3
 800076c:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_GPIO_Init+0x154>)
 800076e:	f001 f841 	bl	80017f4 <HAL_GPIO_Init>

}
 8000772:	bf00      	nop
 8000774:	3720      	adds	r7, #32
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40021000 	.word	0x40021000
 8000780:	40011000 	.word	0x40011000
 8000784:	40010c00 	.word	0x40010c00
 8000788:	40010800 	.word	0x40010800

0800078c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000790:	b672      	cpsid	i
}
 8000792:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000794:	e7fe      	b.n	8000794 <Error_Handler+0x8>
	...

08000798 <ST7735_GPIO_Init>:
static void ST7735_ExecuteCommandList(const uint8_t *addr);
static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1);
static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor);

static void ST7735_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 0308 	add.w	r3, r7, #8
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <ST7735_GPIO_Init+0x60>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	4a11      	ldr	r2, [pc, #68]	; (80007f8 <ST7735_GPIO_Init+0x60>)
 80007b2:	f043 0308 	orr.w	r3, r3, #8
 80007b6:	6193      	str	r3, [r2, #24]
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <ST7735_GPIO_Init+0x60>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	f003 0308 	and.w	r3, r3, #8
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, ST7735_RES_Pin|ST7735_DC_Pin|ST7735_CS_Pin|ST7735_BL_Pin, GPIO_PIN_RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	f44f 610e 	mov.w	r1, #2272	; 0x8e0
 80007ca:	480c      	ldr	r0, [pc, #48]	; (80007fc <ST7735_GPIO_Init+0x64>)
 80007cc:	f001 f996 	bl	8001afc <HAL_GPIO_WritePin>

	/*Configure GPIO pins : ST7735_RES_Pin ST7735_DC_Pin ST7735_CS_Pin ST7735_BL_Pin */
	GPIO_InitStruct.Pin = ST7735_RES_Pin|ST7735_DC_Pin|ST7735_CS_Pin|ST7735_BL_Pin;
 80007d0:	f44f 630e 	mov.w	r3, #2272	; 0x8e0
 80007d4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d6:	2301      	movs	r3, #1
 80007d8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2302      	movs	r3, #2
 80007e0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e2:	f107 0308 	add.w	r3, r7, #8
 80007e6:	4619      	mov	r1, r3
 80007e8:	4804      	ldr	r0, [pc, #16]	; (80007fc <ST7735_GPIO_Init+0x64>)
 80007ea:	f001 f803 	bl	80017f4 <HAL_GPIO_Init>
}
 80007ee:	bf00      	nop
 80007f0:	3718      	adds	r7, #24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40021000 	.word	0x40021000
 80007fc:	40010c00 	.word	0x40010c00

08000800 <ST7735_Reset>:

static void ST7735_Reset()
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	TFT_RES_L();
 8000804:	2200      	movs	r2, #0
 8000806:	2180      	movs	r1, #128	; 0x80
 8000808:	4806      	ldr	r0, [pc, #24]	; (8000824 <ST7735_Reset+0x24>)
 800080a:	f001 f977 	bl	8001afc <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800080e:	2014      	movs	r0, #20
 8000810:	f000 fcd0 	bl	80011b4 <HAL_Delay>
	TFT_RES_H();
 8000814:	2201      	movs	r2, #1
 8000816:	2180      	movs	r1, #128	; 0x80
 8000818:	4802      	ldr	r0, [pc, #8]	; (8000824 <ST7735_Reset+0x24>)
 800081a:	f001 f96f 	bl	8001afc <HAL_GPIO_WritePin>
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40010c00 	.word	0x40010c00

08000828 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
	TFT_DC_C();
 8000832:	2200      	movs	r2, #0
 8000834:	2140      	movs	r1, #64	; 0x40
 8000836:	4806      	ldr	r0, [pc, #24]	; (8000850 <ST7735_WriteCommand+0x28>)
 8000838:	f001 f960 	bl	8001afc <HAL_GPIO_WritePin>
#ifdef USE_SPI_DMA
	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, &cmd, sizeof(cmd));
 800083c:	1dfb      	adds	r3, r7, #7
 800083e:	2201      	movs	r2, #1
 8000840:	4619      	mov	r1, r3
 8000842:	4804      	ldr	r0, [pc, #16]	; (8000854 <ST7735_WriteCommand+0x2c>)
 8000844:	f001 fdee 	bl	8002424 <HAL_SPI_Transmit_DMA>
	//while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
#else
	HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
#endif
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40010c00 	.word	0x40010c00
 8000854:	2000004c 	.word	0x2000004c

08000858 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]
	TFT_DC_D();
 8000862:	2201      	movs	r2, #1
 8000864:	2140      	movs	r1, #64	; 0x40
 8000866:	480b      	ldr	r0, [pc, #44]	; (8000894 <ST7735_WriteData+0x3c>)
 8000868:	f001 f948 	bl	8001afc <HAL_GPIO_WritePin>
#ifdef USE_SPI_DMA
	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, buff, buff_size);
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	b29b      	uxth	r3, r3
 8000870:	461a      	mov	r2, r3
 8000872:	6879      	ldr	r1, [r7, #4]
 8000874:	4808      	ldr	r0, [pc, #32]	; (8000898 <ST7735_WriteData+0x40>)
 8000876:	f001 fdd5 	bl	8002424 <HAL_SPI_Transmit_DMA>
	while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
 800087a:	bf00      	nop
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <ST7735_WriteData+0x40>)
 800087e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000882:	b2db      	uxtb	r3, r3
 8000884:	2b03      	cmp	r3, #3
 8000886:	d0f9      	beq.n	800087c <ST7735_WriteData+0x24>
#else
	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
#endif
}
 8000888:	bf00      	nop
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40010c00 	.word	0x40010c00
 8000898:	2000004c 	.word	0x2000004c

0800089c <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	1c5a      	adds	r2, r3, #1
 80008a8:	607a      	str	r2, [r7, #4]
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	73fb      	strb	r3, [r7, #15]
    while(numCommands--)
 80008ae:	e034      	b.n	800091a <ST7735_ExecuteCommandList+0x7e>
    {
    	uint8_t cmd = *addr++;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	1c5a      	adds	r2, r3, #1
 80008b4:	607a      	str	r2, [r7, #4]
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80008ba:	7afb      	ldrb	r3, [r7, #11]
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff ffb3 	bl	8000828 <ST7735_WriteCommand>

        numArgs = *addr++;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	1c5a      	adds	r2, r3, #1
 80008c6:	607a      	str	r2, [r7, #4]
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80008cc:	7abb      	ldrb	r3, [r7, #10]
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008d4:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80008d6:	7abb      	ldrb	r3, [r7, #10]
 80008d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008dc:	72bb      	strb	r3, [r7, #10]
        if(numArgs)
 80008de:	7abb      	ldrb	r3, [r7, #10]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d008      	beq.n	80008f6 <ST7735_ExecuteCommandList+0x5a>
        {
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80008e4:	7abb      	ldrb	r3, [r7, #10]
 80008e6:	4619      	mov	r1, r3
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f7ff ffb5 	bl	8000858 <ST7735_WriteData>
            addr += numArgs;
 80008ee:	7abb      	ldrb	r3, [r7, #10]
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	4413      	add	r3, r2
 80008f4:	607b      	str	r3, [r7, #4]
        }

        if(ms)
 80008f6:	89bb      	ldrh	r3, [r7, #12]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d00e      	beq.n	800091a <ST7735_ExecuteCommandList+0x7e>
        {
            ms = *addr++;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	1c5a      	adds	r2, r3, #1
 8000900:	607a      	str	r2, [r7, #4]
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000906:	89bb      	ldrh	r3, [r7, #12]
 8000908:	2bff      	cmp	r3, #255	; 0xff
 800090a:	d102      	bne.n	8000912 <ST7735_ExecuteCommandList+0x76>
 800090c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000910:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000912:	89bb      	ldrh	r3, [r7, #12]
 8000914:	4618      	mov	r0, r3
 8000916:	f000 fc4d 	bl	80011b4 <HAL_Delay>
    while(numCommands--)
 800091a:	7bfb      	ldrb	r3, [r7, #15]
 800091c:	1e5a      	subs	r2, r3, #1
 800091e:	73fa      	strb	r2, [r7, #15]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d1c5      	bne.n	80008b0 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000924:	bf00      	nop
 8000926:	bf00      	nop
 8000928:	3710      	adds	r7, #16
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8000930:	b590      	push	{r4, r7, lr}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
 8000936:	4604      	mov	r4, r0
 8000938:	4608      	mov	r0, r1
 800093a:	4611      	mov	r1, r2
 800093c:	461a      	mov	r2, r3
 800093e:	4623      	mov	r3, r4
 8000940:	71fb      	strb	r3, [r7, #7]
 8000942:	4603      	mov	r3, r0
 8000944:	71bb      	strb	r3, [r7, #6]
 8000946:	460b      	mov	r3, r1
 8000948:	717b      	strb	r3, [r7, #5]
 800094a:	4613      	mov	r3, r2
 800094c:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 800094e:	202a      	movs	r0, #42	; 0x2a
 8000950:	f7ff ff6a 	bl	8000828 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8000954:	2300      	movs	r3, #0
 8000956:	733b      	strb	r3, [r7, #12]
 8000958:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <ST7735_SetAddressWindow+0x88>)
 800095a:	781a      	ldrb	r2, [r3, #0]
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	4413      	add	r3, r2
 8000960:	b2db      	uxtb	r3, r3
 8000962:	737b      	strb	r3, [r7, #13]
 8000964:	2300      	movs	r3, #0
 8000966:	73bb      	strb	r3, [r7, #14]
 8000968:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <ST7735_SetAddressWindow+0x88>)
 800096a:	781a      	ldrb	r2, [r3, #0]
 800096c:	797b      	ldrb	r3, [r7, #5]
 800096e:	4413      	add	r3, r2
 8000970:	b2db      	uxtb	r3, r3
 8000972:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	2104      	movs	r1, #4
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff ff6c 	bl	8000858 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000980:	202b      	movs	r0, #43	; 0x2b
 8000982:	f7ff ff51 	bl	8000828 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8000986:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <ST7735_SetAddressWindow+0x8c>)
 8000988:	781a      	ldrb	r2, [r3, #0]
 800098a:	79bb      	ldrb	r3, [r7, #6]
 800098c:	4413      	add	r3, r2
 800098e:	b2db      	uxtb	r3, r3
 8000990:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8000992:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <ST7735_SetAddressWindow+0x8c>)
 8000994:	781a      	ldrb	r2, [r3, #0]
 8000996:	793b      	ldrb	r3, [r7, #4]
 8000998:	4413      	add	r3, r2
 800099a:	b2db      	uxtb	r3, r3
 800099c:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	2104      	movs	r1, #4
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff ff57 	bl	8000858 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80009aa:	202c      	movs	r0, #44	; 0x2c
 80009ac:	f7ff ff3c 	bl	8000828 <ST7735_WriteCommand>
}
 80009b0:	bf00      	nop
 80009b2:	3714      	adds	r7, #20
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd90      	pop	{r4, r7, pc}
 80009b8:	20000020 	.word	0x20000020
 80009bc:	2000017a 	.word	0x2000017a

080009c0 <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 80009c0:	b082      	sub	sp, #8
 80009c2:	b590      	push	{r4, r7, lr}
 80009c4:	b089      	sub	sp, #36	; 0x24
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	637b      	str	r3, [r7, #52]	; 0x34
 80009ca:	4603      	mov	r3, r0
 80009cc:	80fb      	strh	r3, [r7, #6]
 80009ce:	460b      	mov	r3, r1
 80009d0:	80bb      	strh	r3, [r7, #4]
 80009d2:	4613      	mov	r3, r2
 80009d4:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80009d6:	88fb      	ldrh	r3, [r7, #6]
 80009d8:	b2d8      	uxtb	r0, r3
 80009da:	88bb      	ldrh	r3, [r7, #4]
 80009dc:	b2d9      	uxtb	r1, r3
 80009de:	88fb      	ldrh	r3, [r7, #6]
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80009e6:	4413      	add	r3, r2
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	3b01      	subs	r3, #1
 80009ec:	b2dc      	uxtb	r4, r3
 80009ee:	88bb      	ldrh	r3, [r7, #4]
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80009f6:	4413      	add	r3, r2
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	3b01      	subs	r3, #1
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	4622      	mov	r2, r4
 8000a00:	f7ff ff96 	bl	8000930 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++)
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
 8000a08:	e043      	b.n	8000a92 <ST7735_WriteChar+0xd2>
    {
        b = font.data[(ch - 32) * font.height + i];
 8000a0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a0c:	78fb      	ldrb	r3, [r7, #3]
 8000a0e:	3b20      	subs	r3, #32
 8000a10:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000a14:	fb01 f303 	mul.w	r3, r1, r3
 8000a18:	4619      	mov	r1, r3
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	440b      	add	r3, r1
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	4413      	add	r3, r2
 8000a22:	881b      	ldrh	r3, [r3, #0]
 8000a24:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++)
 8000a26:	2300      	movs	r3, #0
 8000a28:	61bb      	str	r3, [r7, #24]
 8000a2a:	e029      	b.n	8000a80 <ST7735_WriteChar+0xc0>
        {
            if((b << j) & 0x8000)
 8000a2c:	697a      	ldr	r2, [r7, #20]
 8000a2e:	69bb      	ldr	r3, [r7, #24]
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d00e      	beq.n	8000a5a <ST7735_WriteChar+0x9a>
            {
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000a3c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000a3e:	0a1b      	lsrs	r3, r3, #8
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	743b      	strb	r3, [r7, #16]
 8000a46:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000a4c:	f107 0310 	add.w	r3, r7, #16
 8000a50:	2102      	movs	r1, #2
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff ff00 	bl	8000858 <ST7735_WriteData>
 8000a58:	e00f      	b.n	8000a7a <ST7735_WriteChar+0xba>
            }
            else
            {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000a5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000a5e:	0a1b      	lsrs	r3, r3, #8
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	733b      	strb	r3, [r7, #12]
 8000a66:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000a6e:	f107 030c 	add.w	r3, r7, #12
 8000a72:	2102      	movs	r1, #2
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff feef 	bl	8000858 <ST7735_WriteData>
        for(j = 0; j < font.width; j++)
 8000a7a:	69bb      	ldr	r3, [r7, #24]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	61bb      	str	r3, [r7, #24]
 8000a80:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000a84:	461a      	mov	r2, r3
 8000a86:	69bb      	ldr	r3, [r7, #24]
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d3cf      	bcc.n	8000a2c <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++)
 8000a8c:	69fb      	ldr	r3, [r7, #28]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	61fb      	str	r3, [r7, #28]
 8000a92:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000a96:	461a      	mov	r2, r3
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d3b5      	bcc.n	8000a0a <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000a9e:	bf00      	nop
 8000aa0:	bf00      	nop
 8000aa2:	3724      	adds	r7, #36	; 0x24
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000aaa:	b002      	add	sp, #8
 8000aac:	4770      	bx	lr
	...

08000ab0 <ST7735_Init>:

void ST7735_Init()
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	ST7735_GPIO_Init();
 8000ab4:	f7ff fe70 	bl	8000798 <ST7735_GPIO_Init>
	TFT_CS_L();
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2120      	movs	r1, #32
 8000abc:	480a      	ldr	r0, [pc, #40]	; (8000ae8 <ST7735_Init+0x38>)
 8000abe:	f001 f81d 	bl	8001afc <HAL_GPIO_WritePin>
    ST7735_Reset();
 8000ac2:	f7ff fe9d 	bl	8000800 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8000ac6:	4809      	ldr	r0, [pc, #36]	; (8000aec <ST7735_Init+0x3c>)
 8000ac8:	f7ff fee8 	bl	800089c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000acc:	4808      	ldr	r0, [pc, #32]	; (8000af0 <ST7735_Init+0x40>)
 8000ace:	f7ff fee5 	bl	800089c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8000ad2:	4808      	ldr	r0, [pc, #32]	; (8000af4 <ST7735_Init+0x44>)
 8000ad4:	f7ff fee2 	bl	800089c <ST7735_ExecuteCommandList>
    TFT_CS_H();
 8000ad8:	2201      	movs	r2, #1
 8000ada:	2120      	movs	r1, #32
 8000adc:	4802      	ldr	r0, [pc, #8]	; (8000ae8 <ST7735_Init+0x38>)
 8000ade:	f001 f80d 	bl	8001afc <HAL_GPIO_WritePin>
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40010c00 	.word	0x40010c00
 8000aec:	0800598c 	.word	0x0800598c
 8000af0:	080059c8 	.word	0x080059c8
 8000af4:	080059d8 	.word	0x080059d8

08000af8 <ST7735_DrawString>:

    TFT_CS_H();
}

void ST7735_DrawString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000af8:	b082      	sub	sp, #8
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b086      	sub	sp, #24
 8000afe:	af04      	add	r7, sp, #16
 8000b00:	603a      	str	r2, [r7, #0]
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	4603      	mov	r3, r0
 8000b06:	80fb      	strh	r3, [r7, #6]
 8000b08:	460b      	mov	r3, r1
 8000b0a:	80bb      	strh	r3, [r7, #4]
	TFT_CS_L();
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2120      	movs	r1, #32
 8000b10:	4824      	ldr	r0, [pc, #144]	; (8000ba4 <ST7735_DrawString+0xac>)
 8000b12:	f000 fff3 	bl	8001afc <HAL_GPIO_WritePin>

    while(*str)
 8000b16:	e033      	b.n	8000b80 <ST7735_DrawString+0x88>
    {
        if(x + font.width >= _width)
 8000b18:	88fb      	ldrh	r3, [r7, #6]
 8000b1a:	7d3a      	ldrb	r2, [r7, #20]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	4a22      	ldr	r2, [pc, #136]	; (8000ba8 <ST7735_DrawString+0xb0>)
 8000b20:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b24:	4293      	cmp	r3, r2
 8000b26:	db16      	blt.n	8000b56 <ST7735_DrawString+0x5e>
        {
            x = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000b2c:	7d7b      	ldrb	r3, [r7, #21]
 8000b2e:	b29a      	uxth	r2, r3
 8000b30:	88bb      	ldrh	r3, [r7, #4]
 8000b32:	4413      	add	r3, r2
 8000b34:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height)
 8000b36:	88bb      	ldrh	r3, [r7, #4]
 8000b38:	7d7a      	ldrb	r2, [r7, #21]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	4a1b      	ldr	r2, [pc, #108]	; (8000bac <ST7735_DrawString+0xb4>)
 8000b3e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b42:	4293      	cmp	r3, r2
 8000b44:	da21      	bge.n	8000b8a <ST7735_DrawString+0x92>
            {
                break;
            }

            if(*str == ' ')
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b20      	cmp	r3, #32
 8000b4c:	d103      	bne.n	8000b56 <ST7735_DrawString+0x5e>
            {
                // skip spaces in the beginning of the new line
                str++;
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	3301      	adds	r3, #1
 8000b52:	603b      	str	r3, [r7, #0]
                continue;
 8000b54:	e014      	b.n	8000b80 <ST7735_DrawString+0x88>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	781a      	ldrb	r2, [r3, #0]
 8000b5a:	88b9      	ldrh	r1, [r7, #4]
 8000b5c:	88f8      	ldrh	r0, [r7, #6]
 8000b5e:	8c3b      	ldrh	r3, [r7, #32]
 8000b60:	9302      	str	r3, [sp, #8]
 8000b62:	8bbb      	ldrh	r3, [r7, #28]
 8000b64:	9301      	str	r3, [sp, #4]
 8000b66:	69bb      	ldr	r3, [r7, #24]
 8000b68:	9300      	str	r3, [sp, #0]
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	f7ff ff28 	bl	80009c0 <ST7735_WriteChar>
        x += font.width;
 8000b70:	7d3b      	ldrb	r3, [r7, #20]
 8000b72:	b29a      	uxth	r2, r3
 8000b74:	88fb      	ldrh	r3, [r7, #6]
 8000b76:	4413      	add	r3, r2
 8000b78:	80fb      	strh	r3, [r7, #6]
        str++;
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	603b      	str	r3, [r7, #0]
    while(*str)
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d1c7      	bne.n	8000b18 <ST7735_DrawString+0x20>
 8000b88:	e000      	b.n	8000b8c <ST7735_DrawString+0x94>
                break;
 8000b8a:	bf00      	nop
    }
    TFT_CS_H();
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2120      	movs	r1, #32
 8000b90:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <ST7735_DrawString+0xac>)
 8000b92:	f000 ffb3 	bl	8001afc <HAL_GPIO_WritePin>
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ba0:	b002      	add	sp, #8
 8000ba2:	4770      	bx	lr
 8000ba4:	40010c00 	.word	0x40010c00
 8000ba8:	2000001e 	.word	0x2000001e
 8000bac:	2000001c 	.word	0x2000001c

08000bb0 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4604      	mov	r4, r0
 8000bb8:	4608      	mov	r0, r1
 8000bba:	4611      	mov	r1, r2
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4623      	mov	r3, r4
 8000bc0:	80fb      	strh	r3, [r7, #6]
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	80bb      	strh	r3, [r7, #4]
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	807b      	strh	r3, [r7, #2]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= _width) || (y >= _height)) return;
 8000bce:	88fb      	ldrh	r3, [r7, #6]
 8000bd0:	4a3a      	ldr	r2, [pc, #232]	; (8000cbc <ST7735_FillRectangle+0x10c>)
 8000bd2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	da6b      	bge.n	8000cb2 <ST7735_FillRectangle+0x102>
 8000bda:	88bb      	ldrh	r3, [r7, #4]
 8000bdc:	4a38      	ldr	r2, [pc, #224]	; (8000cc0 <ST7735_FillRectangle+0x110>)
 8000bde:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000be2:	4293      	cmp	r3, r2
 8000be4:	da65      	bge.n	8000cb2 <ST7735_FillRectangle+0x102>
    if((x + w - 1) >= _width) w = _width - x;
 8000be6:	88fa      	ldrh	r2, [r7, #6]
 8000be8:	887b      	ldrh	r3, [r7, #2]
 8000bea:	4413      	add	r3, r2
 8000bec:	4a33      	ldr	r2, [pc, #204]	; (8000cbc <ST7735_FillRectangle+0x10c>)
 8000bee:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	dd06      	ble.n	8000c04 <ST7735_FillRectangle+0x54>
 8000bf6:	4b31      	ldr	r3, [pc, #196]	; (8000cbc <ST7735_FillRectangle+0x10c>)
 8000bf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bfc:	b29a      	uxth	r2, r3
 8000bfe:	88fb      	ldrh	r3, [r7, #6]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8000c04:	88ba      	ldrh	r2, [r7, #4]
 8000c06:	883b      	ldrh	r3, [r7, #0]
 8000c08:	4413      	add	r3, r2
 8000c0a:	4a2d      	ldr	r2, [pc, #180]	; (8000cc0 <ST7735_FillRectangle+0x110>)
 8000c0c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c10:	4293      	cmp	r3, r2
 8000c12:	dd06      	ble.n	8000c22 <ST7735_FillRectangle+0x72>
 8000c14:	4b2a      	ldr	r3, [pc, #168]	; (8000cc0 <ST7735_FillRectangle+0x110>)
 8000c16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c1a:	b29a      	uxth	r2, r3
 8000c1c:	88bb      	ldrh	r3, [r7, #4]
 8000c1e:	1ad3      	subs	r3, r2, r3
 8000c20:	803b      	strh	r3, [r7, #0]

    TFT_CS_L();
 8000c22:	2200      	movs	r2, #0
 8000c24:	2120      	movs	r1, #32
 8000c26:	4827      	ldr	r0, [pc, #156]	; (8000cc4 <ST7735_FillRectangle+0x114>)
 8000c28:	f000 ff68 	bl	8001afc <HAL_GPIO_WritePin>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000c2c:	88fb      	ldrh	r3, [r7, #6]
 8000c2e:	b2d8      	uxtb	r0, r3
 8000c30:	88bb      	ldrh	r3, [r7, #4]
 8000c32:	b2d9      	uxtb	r1, r3
 8000c34:	88fb      	ldrh	r3, [r7, #6]
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	887b      	ldrh	r3, [r7, #2]
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	4413      	add	r3, r2
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	3b01      	subs	r3, #1
 8000c42:	b2dc      	uxtb	r4, r3
 8000c44:	88bb      	ldrh	r3, [r7, #4]
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	883b      	ldrh	r3, [r7, #0]
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	4413      	add	r3, r2
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	3b01      	subs	r3, #1
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	4622      	mov	r2, r4
 8000c56:	f7ff fe6b 	bl	8000930 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000c5a:	8c3b      	ldrh	r3, [r7, #32]
 8000c5c:	0a1b      	lsrs	r3, r3, #8
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	733b      	strb	r3, [r7, #12]
 8000c64:	8c3b      	ldrh	r3, [r7, #32]
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	737b      	strb	r3, [r7, #13]
    TFT_DC_D();
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	2140      	movs	r1, #64	; 0x40
 8000c6e:	4815      	ldr	r0, [pc, #84]	; (8000cc4 <ST7735_FillRectangle+0x114>)
 8000c70:	f000 ff44 	bl	8001afc <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 8000c74:	883b      	ldrh	r3, [r7, #0]
 8000c76:	80bb      	strh	r3, [r7, #4]
 8000c78:	e012      	b.n	8000ca0 <ST7735_FillRectangle+0xf0>
    {
        for(x = w; x > 0; x--)
 8000c7a:	887b      	ldrh	r3, [r7, #2]
 8000c7c:	80fb      	strh	r3, [r7, #6]
 8000c7e:	e009      	b.n	8000c94 <ST7735_FillRectangle+0xe4>
        {
#ifdef USE_SPI_DMA
        	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, data, sizeof(data));
 8000c80:	f107 030c 	add.w	r3, r7, #12
 8000c84:	2202      	movs	r2, #2
 8000c86:	4619      	mov	r1, r3
 8000c88:	480f      	ldr	r0, [pc, #60]	; (8000cc8 <ST7735_FillRectangle+0x118>)
 8000c8a:	f001 fbcb 	bl	8002424 <HAL_SPI_Transmit_DMA>
        for(x = w; x > 0; x--)
 8000c8e:	88fb      	ldrh	r3, [r7, #6]
 8000c90:	3b01      	subs	r3, #1
 8000c92:	80fb      	strh	r3, [r7, #6]
 8000c94:	88fb      	ldrh	r3, [r7, #6]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d1f2      	bne.n	8000c80 <ST7735_FillRectangle+0xd0>
    for(y = h; y > 0; y--)
 8000c9a:	88bb      	ldrh	r3, [r7, #4]
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	80bb      	strh	r3, [r7, #4]
 8000ca0:	88bb      	ldrh	r3, [r7, #4]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d1e9      	bne.n	8000c7a <ST7735_FillRectangle+0xca>
#else
        	HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
#endif
        }
    }
    TFT_CS_H();
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	2120      	movs	r1, #32
 8000caa:	4806      	ldr	r0, [pc, #24]	; (8000cc4 <ST7735_FillRectangle+0x114>)
 8000cac:	f000 ff26 	bl	8001afc <HAL_GPIO_WritePin>
 8000cb0:	e000      	b.n	8000cb4 <ST7735_FillRectangle+0x104>
    if((x >= _width) || (y >= _height)) return;
 8000cb2:	bf00      	nop
}
 8000cb4:	3714      	adds	r7, #20
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd90      	pop	{r4, r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	2000001e 	.word	0x2000001e
 8000cc0:	2000001c 	.word	0x2000001c
 8000cc4:	40010c00 	.word	0x40010c00
 8000cc8:	2000004c 	.word	0x2000004c

08000ccc <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af02      	add	r7, sp, #8
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, _width, _height, color);
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <ST7735_FillScreen+0x30>)
 8000cd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <ST7735_FillScreen+0x34>)
 8000ce0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ce4:	b299      	uxth	r1, r3
 8000ce6:	88fb      	ldrh	r3, [r7, #6]
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	460b      	mov	r3, r1
 8000cec:	2100      	movs	r1, #0
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f7ff ff5e 	bl	8000bb0 <ST7735_FillRectangle>
}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	2000001e 	.word	0x2000001e
 8000d00:	2000001c 	.word	0x2000001c

08000d04 <ST7735_Backlight_On>:
    ST7735_WriteCommand(invert ? ST7735_INVON : ST7735_INVOFF);
    TFT_CS_H();
}

void ST7735_Backlight_On(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	TFT_BL_H();
 8000d08:	2201      	movs	r2, #1
 8000d0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d0e:	4802      	ldr	r0, [pc, #8]	; (8000d18 <ST7735_Backlight_On+0x14>)
 8000d10:	f000 fef4 	bl	8001afc <HAL_GPIO_WritePin>
}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40010800 	.word	0x40010800

08000d1c <ST7735_SetRotation>:
/***************************************************************************************
** Function name:           setRotation
** Description:             rotate the screen orientation m = 0-3
***************************************************************************************/
void ST7735_SetRotation(uint8_t m)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]
  _value_rotation = m % 4;
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	f003 0303 	and.w	r3, r3, #3
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4b49      	ldr	r3, [pc, #292]	; (8000e54 <ST7735_SetRotation+0x138>)
 8000d30:	701a      	strb	r2, [r3, #0]

  TFT_CS_L();
 8000d32:	2200      	movs	r2, #0
 8000d34:	2120      	movs	r1, #32
 8000d36:	4848      	ldr	r0, [pc, #288]	; (8000e58 <ST7735_SetRotation+0x13c>)
 8000d38:	f000 fee0 	bl	8001afc <HAL_GPIO_WritePin>

  ST7735_WriteCommand(ST7735_MADCTL);
 8000d3c:	2036      	movs	r0, #54	; 0x36
 8000d3e:	f7ff fd73 	bl	8000828 <ST7735_WriteCommand>

  switch (_value_rotation)
 8000d42:	4b44      	ldr	r3, [pc, #272]	; (8000e54 <ST7735_SetRotation+0x138>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b03      	cmp	r3, #3
 8000d48:	d87a      	bhi.n	8000e40 <ST7735_SetRotation+0x124>
 8000d4a:	a201      	add	r2, pc, #4	; (adr r2, 8000d50 <ST7735_SetRotation+0x34>)
 8000d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d50:	08000d61 	.word	0x08000d61
 8000d54:	08000d9d 	.word	0x08000d9d
 8000d58:	08000dd9 	.word	0x08000dd9
 8000d5c:	08000e05 	.word	0x08000e05
  {
    case 0:
    {
    	uint8_t d_r = (_data_rotation[0] | _data_rotation[1] | _data_rotation[3]);
 8000d60:	4b3e      	ldr	r3, [pc, #248]	; (8000e5c <ST7735_SetRotation+0x140>)
 8000d62:	781a      	ldrb	r2, [r3, #0]
 8000d64:	4b3d      	ldr	r3, [pc, #244]	; (8000e5c <ST7735_SetRotation+0x140>)
 8000d66:	785b      	ldrb	r3, [r3, #1]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	4b3b      	ldr	r3, [pc, #236]	; (8000e5c <ST7735_SetRotation+0x140>)
 8000d6e:	78db      	ldrb	r3, [r3, #3]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	73fb      	strb	r3, [r7, #15]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 8000d76:	f107 030f 	add.w	r3, r7, #15
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fd6b 	bl	8000858 <ST7735_WriteData>
        _width  = ST7735_WIDTH;
 8000d82:	4b37      	ldr	r3, [pc, #220]	; (8000e60 <ST7735_SetRotation+0x144>)
 8000d84:	2250      	movs	r2, #80	; 0x50
 8000d86:	801a      	strh	r2, [r3, #0]
        _height = ST7735_HEIGHT;
 8000d88:	4b36      	ldr	r3, [pc, #216]	; (8000e64 <ST7735_SetRotation+0x148>)
 8000d8a:	22a0      	movs	r2, #160	; 0xa0
 8000d8c:	801a      	strh	r2, [r3, #0]
        _xstart = ST7735_XSTART;
 8000d8e:	4b36      	ldr	r3, [pc, #216]	; (8000e68 <ST7735_SetRotation+0x14c>)
 8000d90:	2218      	movs	r2, #24
 8000d92:	701a      	strb	r2, [r3, #0]
		_ystart = ST7735_YSTART;
 8000d94:	4b35      	ldr	r3, [pc, #212]	; (8000e6c <ST7735_SetRotation+0x150>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	701a      	strb	r2, [r3, #0]
    }
     break;
 8000d9a:	e051      	b.n	8000e40 <ST7735_SetRotation+0x124>
    case 1:
    {
    	uint8_t d_r = (_data_rotation[1] | _data_rotation[2] | _data_rotation[3]);
 8000d9c:	4b2f      	ldr	r3, [pc, #188]	; (8000e5c <ST7735_SetRotation+0x140>)
 8000d9e:	785a      	ldrb	r2, [r3, #1]
 8000da0:	4b2e      	ldr	r3, [pc, #184]	; (8000e5c <ST7735_SetRotation+0x140>)
 8000da2:	789b      	ldrb	r3, [r3, #2]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	4b2c      	ldr	r3, [pc, #176]	; (8000e5c <ST7735_SetRotation+0x140>)
 8000daa:	78db      	ldrb	r3, [r3, #3]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	73bb      	strb	r3, [r7, #14]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 8000db2:	f107 030e 	add.w	r3, r7, #14
 8000db6:	2101      	movs	r1, #1
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff fd4d 	bl	8000858 <ST7735_WriteData>
    	_width  = ST7735_HEIGHT;
 8000dbe:	4b28      	ldr	r3, [pc, #160]	; (8000e60 <ST7735_SetRotation+0x144>)
 8000dc0:	22a0      	movs	r2, #160	; 0xa0
 8000dc2:	801a      	strh	r2, [r3, #0]
    	_height = ST7735_WIDTH;
 8000dc4:	4b27      	ldr	r3, [pc, #156]	; (8000e64 <ST7735_SetRotation+0x148>)
 8000dc6:	2250      	movs	r2, #80	; 0x50
 8000dc8:	801a      	strh	r2, [r3, #0]
    	_xstart = ST7735_YSTART;
 8000dca:	4b27      	ldr	r3, [pc, #156]	; (8000e68 <ST7735_SetRotation+0x14c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]
    	_ystart = ST7735_XSTART;
 8000dd0:	4b26      	ldr	r3, [pc, #152]	; (8000e6c <ST7735_SetRotation+0x150>)
 8000dd2:	2218      	movs	r2, #24
 8000dd4:	701a      	strb	r2, [r3, #0]
    }
      break;
 8000dd6:	e033      	b.n	8000e40 <ST7735_SetRotation+0x124>
    case 2:
    {
    	uint8_t d_r = _data_rotation[3];
 8000dd8:	4b20      	ldr	r3, [pc, #128]	; (8000e5c <ST7735_SetRotation+0x140>)
 8000dda:	78db      	ldrb	r3, [r3, #3]
 8000ddc:	737b      	strb	r3, [r7, #13]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 8000dde:	f107 030d 	add.w	r3, r7, #13
 8000de2:	2101      	movs	r1, #1
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fd37 	bl	8000858 <ST7735_WriteData>
    	_width  = ST7735_WIDTH;
 8000dea:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <ST7735_SetRotation+0x144>)
 8000dec:	2250      	movs	r2, #80	; 0x50
 8000dee:	801a      	strh	r2, [r3, #0]
    	_height = ST7735_HEIGHT;
 8000df0:	4b1c      	ldr	r3, [pc, #112]	; (8000e64 <ST7735_SetRotation+0x148>)
 8000df2:	22a0      	movs	r2, #160	; 0xa0
 8000df4:	801a      	strh	r2, [r3, #0]
    	_xstart = ST7735_XSTART;
 8000df6:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <ST7735_SetRotation+0x14c>)
 8000df8:	2218      	movs	r2, #24
 8000dfa:	701a      	strb	r2, [r3, #0]
    	_ystart = ST7735_YSTART;
 8000dfc:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <ST7735_SetRotation+0x150>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	701a      	strb	r2, [r3, #0]
    }
      break;
 8000e02:	e01d      	b.n	8000e40 <ST7735_SetRotation+0x124>
    case 3:
    {
    	uint8_t d_r = (_data_rotation[0] | _data_rotation[2] | _data_rotation[3]);
 8000e04:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <ST7735_SetRotation+0x140>)
 8000e06:	781a      	ldrb	r2, [r3, #0]
 8000e08:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <ST7735_SetRotation+0x140>)
 8000e0a:	789b      	ldrb	r3, [r3, #2]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <ST7735_SetRotation+0x140>)
 8000e12:	78db      	ldrb	r3, [r3, #3]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	733b      	strb	r3, [r7, #12]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 8000e1a:	f107 030c 	add.w	r3, r7, #12
 8000e1e:	2101      	movs	r1, #1
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff fd19 	bl	8000858 <ST7735_WriteData>
    	_width  = ST7735_HEIGHT;
 8000e26:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <ST7735_SetRotation+0x144>)
 8000e28:	22a0      	movs	r2, #160	; 0xa0
 8000e2a:	801a      	strh	r2, [r3, #0]
    	_height = ST7735_WIDTH;
 8000e2c:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <ST7735_SetRotation+0x148>)
 8000e2e:	2250      	movs	r2, #80	; 0x50
 8000e30:	801a      	strh	r2, [r3, #0]
    	_xstart = ST7735_YSTART;
 8000e32:	4b0d      	ldr	r3, [pc, #52]	; (8000e68 <ST7735_SetRotation+0x14c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	701a      	strb	r2, [r3, #0]
    	_ystart = ST7735_XSTART;
 8000e38:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <ST7735_SetRotation+0x150>)
 8000e3a:	2218      	movs	r2, #24
 8000e3c:	701a      	strb	r2, [r3, #0]
    }
      break;
 8000e3e:	bf00      	nop
  }
  TFT_CS_H();
 8000e40:	2201      	movs	r2, #1
 8000e42:	2120      	movs	r1, #32
 8000e44:	4804      	ldr	r0, [pc, #16]	; (8000e58 <ST7735_SetRotation+0x13c>)
 8000e46:	f000 fe59 	bl	8001afc <HAL_GPIO_WritePin>
}
 8000e4a:	bf00      	nop
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000179 	.word	0x20000179
 8000e58:	40010c00 	.word	0x40010c00
 8000e5c:	20000018 	.word	0x20000018
 8000e60:	2000001e 	.word	0x2000001e
 8000e64:	2000001c 	.word	0x2000001c
 8000e68:	20000020 	.word	0x20000020
 8000e6c:	2000017a 	.word	0x2000017a

08000e70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <HAL_MspInit+0x5c>)
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	4a14      	ldr	r2, [pc, #80]	; (8000ecc <HAL_MspInit+0x5c>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6193      	str	r3, [r2, #24]
 8000e82:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <HAL_MspInit+0x5c>)
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <HAL_MspInit+0x5c>)
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	4a0e      	ldr	r2, [pc, #56]	; (8000ecc <HAL_MspInit+0x5c>)
 8000e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e98:	61d3      	str	r3, [r2, #28]
 8000e9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <HAL_MspInit+0x5c>)
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <HAL_MspInit+0x60>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <HAL_MspInit+0x60>)
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	40010000 	.word	0x40010000

08000ed4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b088      	sub	sp, #32
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0310 	add.w	r3, r7, #16
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a28      	ldr	r2, [pc, #160]	; (8000f90 <HAL_SPI_MspInit+0xbc>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d149      	bne.n	8000f88 <HAL_SPI_MspInit+0xb4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ef4:	4b27      	ldr	r3, [pc, #156]	; (8000f94 <HAL_SPI_MspInit+0xc0>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	4a26      	ldr	r2, [pc, #152]	; (8000f94 <HAL_SPI_MspInit+0xc0>)
 8000efa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000efe:	6193      	str	r3, [r2, #24]
 8000f00:	4b24      	ldr	r3, [pc, #144]	; (8000f94 <HAL_SPI_MspInit+0xc0>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0c:	4b21      	ldr	r3, [pc, #132]	; (8000f94 <HAL_SPI_MspInit+0xc0>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	4a20      	ldr	r2, [pc, #128]	; (8000f94 <HAL_SPI_MspInit+0xc0>)
 8000f12:	f043 0304 	orr.w	r3, r3, #4
 8000f16:	6193      	str	r3, [r2, #24]
 8000f18:	4b1e      	ldr	r3, [pc, #120]	; (8000f94 <HAL_SPI_MspInit+0xc0>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	f003 0304 	and.w	r3, r3, #4
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f24:	23a0      	movs	r3, #160	; 0xa0
 8000f26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f30:	f107 0310 	add.w	r3, r7, #16
 8000f34:	4619      	mov	r1, r3
 8000f36:	4818      	ldr	r0, [pc, #96]	; (8000f98 <HAL_SPI_MspInit+0xc4>)
 8000f38:	f000 fc5c 	bl	80017f4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000f3c:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <HAL_SPI_MspInit+0xc8>)
 8000f3e:	4a18      	ldr	r2, [pc, #96]	; (8000fa0 <HAL_SPI_MspInit+0xcc>)
 8000f40:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f42:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <HAL_SPI_MspInit+0xc8>)
 8000f44:	2210      	movs	r2, #16
 8000f46:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f48:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <HAL_SPI_MspInit+0xc8>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f4e:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <HAL_SPI_MspInit+0xc8>)
 8000f50:	2280      	movs	r2, #128	; 0x80
 8000f52:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f54:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <HAL_SPI_MspInit+0xc8>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <HAL_SPI_MspInit+0xc8>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000f60:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <HAL_SPI_MspInit+0xc8>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f66:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <HAL_SPI_MspInit+0xc8>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000f6c:	480b      	ldr	r0, [pc, #44]	; (8000f9c <HAL_SPI_MspInit+0xc8>)
 8000f6e:	f000 fa53 	bl	8001418 <HAL_DMA_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <HAL_SPI_MspInit+0xa8>
    {
      Error_Handler();
 8000f78:	f7ff fc08 	bl	800078c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a07      	ldr	r2, [pc, #28]	; (8000f9c <HAL_SPI_MspInit+0xc8>)
 8000f80:	649a      	str	r2, [r3, #72]	; 0x48
 8000f82:	4a06      	ldr	r2, [pc, #24]	; (8000f9c <HAL_SPI_MspInit+0xc8>)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f88:	bf00      	nop
 8000f8a:	3720      	adds	r7, #32
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40013000 	.word	0x40013000
 8000f94:	40021000 	.word	0x40021000
 8000f98:	40010800 	.word	0x40010800
 8000f9c:	200000a4 	.word	0x200000a4
 8000fa0:	40020030 	.word	0x40020030

08000fa4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a16      	ldr	r2, [pc, #88]	; (800100c <HAL_TIM_Base_MspInit+0x68>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d114      	bne.n	8000fe0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fb6:	4b16      	ldr	r3, [pc, #88]	; (8001010 <HAL_TIM_Base_MspInit+0x6c>)
 8000fb8:	699b      	ldr	r3, [r3, #24]
 8000fba:	4a15      	ldr	r2, [pc, #84]	; (8001010 <HAL_TIM_Base_MspInit+0x6c>)
 8000fbc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fc0:	6193      	str	r3, [r2, #24]
 8000fc2:	4b13      	ldr	r3, [pc, #76]	; (8001010 <HAL_TIM_Base_MspInit+0x6c>)
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2019      	movs	r0, #25
 8000fd4:	f000 f9e9 	bl	80013aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000fd8:	2019      	movs	r0, #25
 8000fda:	f000 fa02 	bl	80013e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fde:	e010      	b.n	8001002 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fe8:	d10b      	bne.n	8001002 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fea:	4b09      	ldr	r3, [pc, #36]	; (8001010 <HAL_TIM_Base_MspInit+0x6c>)
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	4a08      	ldr	r2, [pc, #32]	; (8001010 <HAL_TIM_Base_MspInit+0x6c>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	61d3      	str	r3, [r2, #28]
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_TIM_Base_MspInit+0x6c>)
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]
}
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40012c00 	.word	0x40012c00
 8001010:	40021000 	.word	0x40021000

08001014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001018:	e7fe      	b.n	8001018 <NMI_Handler+0x4>

0800101a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800101e:	e7fe      	b.n	800101e <HardFault_Handler+0x4>

08001020 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001024:	e7fe      	b.n	8001024 <MemManage_Handler+0x4>

08001026 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800102a:	e7fe      	b.n	800102a <BusFault_Handler+0x4>

0800102c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <UsageFault_Handler+0x4>

08001032 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr

0800103e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr

0800104a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr

08001056 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800105a:	f000 f88f 	bl	800117c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001068:	4802      	ldr	r0, [pc, #8]	; (8001074 <DMA1_Channel3_IRQHandler+0x10>)
 800106a:	f000 fa8f 	bl	800158c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	200000a4 	.word	0x200000a4

08001078 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800107c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001080:	4803      	ldr	r0, [pc, #12]	; (8001090 <TIM1_UP_IRQHandler+0x18>)
 8001082:	f000 fd53 	bl	8001b2c <HAL_GPIO_TogglePin>
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001086:	4803      	ldr	r0, [pc, #12]	; (8001094 <TIM1_UP_IRQHandler+0x1c>)
 8001088:	f001 fcac 	bl	80029e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40011000 	.word	0x40011000
 8001094:	200000e8 	.word	0x200000e8

08001098 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr

080010a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010a4:	f7ff fff8 	bl	8001098 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010a8:	480b      	ldr	r0, [pc, #44]	; (80010d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80010aa:	490c      	ldr	r1, [pc, #48]	; (80010dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80010ac:	4a0c      	ldr	r2, [pc, #48]	; (80010e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80010ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b0:	e002      	b.n	80010b8 <LoopCopyDataInit>

080010b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010b6:	3304      	adds	r3, #4

080010b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010bc:	d3f9      	bcc.n	80010b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010be:	4a09      	ldr	r2, [pc, #36]	; (80010e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010c0:	4c09      	ldr	r4, [pc, #36]	; (80010e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c4:	e001      	b.n	80010ca <LoopFillZerobss>

080010c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c8:	3204      	adds	r2, #4

080010ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010cc:	d3fb      	bcc.n	80010c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ce:	f001 ffed 	bl	80030ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010d2:	f7ff f947 	bl	8000364 <main>
  bx lr
 80010d6:	4770      	bx	lr
  ldr r0, =_sdata
 80010d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010dc:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 80010e0:	08005a30 	.word	0x08005a30
  ldr r2, =_sbss
 80010e4:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 80010e8:	20000180 	.word	0x20000180

080010ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010ec:	e7fe      	b.n	80010ec <ADC1_2_IRQHandler>
	...

080010f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <HAL_Init+0x28>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a07      	ldr	r2, [pc, #28]	; (8001118 <HAL_Init+0x28>)
 80010fa:	f043 0310 	orr.w	r3, r3, #16
 80010fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001100:	2003      	movs	r0, #3
 8001102:	f000 f947 	bl	8001394 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001106:	200f      	movs	r0, #15
 8001108:	f000 f808 	bl	800111c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800110c:	f7ff feb0 	bl	8000e70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40022000 	.word	0x40022000

0800111c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <HAL_InitTick+0x54>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <HAL_InitTick+0x58>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	4619      	mov	r1, r3
 800112e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001132:	fbb3 f3f1 	udiv	r3, r3, r1
 8001136:	fbb2 f3f3 	udiv	r3, r2, r3
 800113a:	4618      	mov	r0, r3
 800113c:	f000 f95f 	bl	80013fe <HAL_SYSTICK_Config>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e00e      	b.n	8001168 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b0f      	cmp	r3, #15
 800114e:	d80a      	bhi.n	8001166 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001150:	2200      	movs	r2, #0
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	f04f 30ff 	mov.w	r0, #4294967295
 8001158:	f000 f927 	bl	80013aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800115c:	4a06      	ldr	r2, [pc, #24]	; (8001178 <HAL_InitTick+0x5c>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001162:	2300      	movs	r3, #0
 8001164:	e000      	b.n	8001168 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
}
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000024 	.word	0x20000024
 8001174:	2000002c 	.word	0x2000002c
 8001178:	20000028 	.word	0x20000028

0800117c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <HAL_IncTick+0x1c>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	4b05      	ldr	r3, [pc, #20]	; (800119c <HAL_IncTick+0x20>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4413      	add	r3, r2
 800118c:	4a03      	ldr	r2, [pc, #12]	; (800119c <HAL_IncTick+0x20>)
 800118e:	6013      	str	r3, [r2, #0]
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr
 8001198:	2000002c 	.word	0x2000002c
 800119c:	2000017c 	.word	0x2000017c

080011a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return uwTick;
 80011a4:	4b02      	ldr	r3, [pc, #8]	; (80011b0 <HAL_GetTick+0x10>)
 80011a6:	681b      	ldr	r3, [r3, #0]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr
 80011b0:	2000017c 	.word	0x2000017c

080011b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011bc:	f7ff fff0 	bl	80011a0 <HAL_GetTick>
 80011c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011cc:	d005      	beq.n	80011da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ce:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <HAL_Delay+0x44>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	461a      	mov	r2, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4413      	add	r3, r2
 80011d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011da:	bf00      	nop
 80011dc:	f7ff ffe0 	bl	80011a0 <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d8f7      	bhi.n	80011dc <HAL_Delay+0x28>
  {
  }
}
 80011ec:	bf00      	nop
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	2000002c 	.word	0x2000002c

080011fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800120c:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <__NVIC_SetPriorityGrouping+0x44>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001218:	4013      	ands	r3, r2
 800121a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001224:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800122c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122e:	4a04      	ldr	r2, [pc, #16]	; (8001240 <__NVIC_SetPriorityGrouping+0x44>)
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	60d3      	str	r3, [r2, #12]
}
 8001234:	bf00      	nop
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001248:	4b04      	ldr	r3, [pc, #16]	; (800125c <__NVIC_GetPriorityGrouping+0x18>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	0a1b      	lsrs	r3, r3, #8
 800124e:	f003 0307 	and.w	r3, r3, #7
}
 8001252:	4618      	mov	r0, r3
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	2b00      	cmp	r3, #0
 8001270:	db0b      	blt.n	800128a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	f003 021f 	and.w	r2, r3, #31
 8001278:	4906      	ldr	r1, [pc, #24]	; (8001294 <__NVIC_EnableIRQ+0x34>)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	095b      	lsrs	r3, r3, #5
 8001280:	2001      	movs	r0, #1
 8001282:	fa00 f202 	lsl.w	r2, r0, r2
 8001286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr
 8001294:	e000e100 	.word	0xe000e100

08001298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	6039      	str	r1, [r7, #0]
 80012a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	db0a      	blt.n	80012c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	490c      	ldr	r1, [pc, #48]	; (80012e4 <__NVIC_SetPriority+0x4c>)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	0112      	lsls	r2, r2, #4
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	440b      	add	r3, r1
 80012bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c0:	e00a      	b.n	80012d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	4908      	ldr	r1, [pc, #32]	; (80012e8 <__NVIC_SetPriority+0x50>)
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	3b04      	subs	r3, #4
 80012d0:	0112      	lsls	r2, r2, #4
 80012d2:	b2d2      	uxtb	r2, r2
 80012d4:	440b      	add	r3, r1
 80012d6:	761a      	strb	r2, [r3, #24]
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000e100 	.word	0xe000e100
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b089      	sub	sp, #36	; 0x24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f1c3 0307 	rsb	r3, r3, #7
 8001306:	2b04      	cmp	r3, #4
 8001308:	bf28      	it	cs
 800130a:	2304      	movcs	r3, #4
 800130c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3304      	adds	r3, #4
 8001312:	2b06      	cmp	r3, #6
 8001314:	d902      	bls.n	800131c <NVIC_EncodePriority+0x30>
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3b03      	subs	r3, #3
 800131a:	e000      	b.n	800131e <NVIC_EncodePriority+0x32>
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	f04f 32ff 	mov.w	r2, #4294967295
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43da      	mvns	r2, r3
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	401a      	ands	r2, r3
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001334:	f04f 31ff 	mov.w	r1, #4294967295
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	fa01 f303 	lsl.w	r3, r1, r3
 800133e:	43d9      	mvns	r1, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	4313      	orrs	r3, r2
         );
}
 8001346:	4618      	mov	r0, r3
 8001348:	3724      	adds	r7, #36	; 0x24
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr

08001350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3b01      	subs	r3, #1
 800135c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001360:	d301      	bcc.n	8001366 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001362:	2301      	movs	r3, #1
 8001364:	e00f      	b.n	8001386 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001366:	4a0a      	ldr	r2, [pc, #40]	; (8001390 <SysTick_Config+0x40>)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3b01      	subs	r3, #1
 800136c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800136e:	210f      	movs	r1, #15
 8001370:	f04f 30ff 	mov.w	r0, #4294967295
 8001374:	f7ff ff90 	bl	8001298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001378:	4b05      	ldr	r3, [pc, #20]	; (8001390 <SysTick_Config+0x40>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800137e:	4b04      	ldr	r3, [pc, #16]	; (8001390 <SysTick_Config+0x40>)
 8001380:	2207      	movs	r2, #7
 8001382:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	e000e010 	.word	0xe000e010

08001394 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff ff2d 	bl	80011fc <__NVIC_SetPriorityGrouping>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b086      	sub	sp, #24
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	4603      	mov	r3, r0
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
 80013b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013bc:	f7ff ff42 	bl	8001244 <__NVIC_GetPriorityGrouping>
 80013c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	68b9      	ldr	r1, [r7, #8]
 80013c6:	6978      	ldr	r0, [r7, #20]
 80013c8:	f7ff ff90 	bl	80012ec <NVIC_EncodePriority>
 80013cc:	4602      	mov	r2, r0
 80013ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013d2:	4611      	mov	r1, r2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ff5f 	bl	8001298 <__NVIC_SetPriority>
}
 80013da:	bf00      	nop
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	4603      	mov	r3, r0
 80013ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff35 	bl	8001260 <__NVIC_EnableIRQ>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff ffa2 	bl	8001350 <SysTick_Config>
 800140c:	4603      	mov	r3, r0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e043      	b.n	80014b6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	4b22      	ldr	r3, [pc, #136]	; (80014c0 <HAL_DMA_Init+0xa8>)
 8001436:	4413      	add	r3, r2
 8001438:	4a22      	ldr	r2, [pc, #136]	; (80014c4 <HAL_DMA_Init+0xac>)
 800143a:	fba2 2303 	umull	r2, r3, r2, r3
 800143e:	091b      	lsrs	r3, r3, #4
 8001440:	009a      	lsls	r2, r3, #2
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a1f      	ldr	r2, [pc, #124]	; (80014c8 <HAL_DMA_Init+0xb0>)
 800144a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2202      	movs	r2, #2
 8001450:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001462:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001466:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001470:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800147c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001488:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001490:	68fa      	ldr	r2, [r7, #12]
 8001492:	4313      	orrs	r3, r2
 8001494:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2201      	movs	r2, #1
 80014a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr
 80014c0:	bffdfff8 	.word	0xbffdfff8
 80014c4:	cccccccd 	.word	0xcccccccd
 80014c8:	40020000 	.word	0x40020000

080014cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
 80014d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014da:	2300      	movs	r3, #0
 80014dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d101      	bne.n	80014ec <HAL_DMA_Start_IT+0x20>
 80014e8:	2302      	movs	r3, #2
 80014ea:	e04b      	b.n	8001584 <HAL_DMA_Start_IT+0xb8>
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d13a      	bne.n	8001576 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2202      	movs	r2, #2
 8001504:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2200      	movs	r2, #0
 800150c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f022 0201 	bic.w	r2, r2, #1
 800151c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	68b9      	ldr	r1, [r7, #8]
 8001524:	68f8      	ldr	r0, [r7, #12]
 8001526:	f000 f937 	bl	8001798 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152e:	2b00      	cmp	r3, #0
 8001530:	d008      	beq.n	8001544 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f042 020e 	orr.w	r2, r2, #14
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	e00f      	b.n	8001564 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 0204 	bic.w	r2, r2, #4
 8001552:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f042 020a 	orr.w	r2, r2, #10
 8001562:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f042 0201 	orr.w	r2, r2, #1
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	e005      	b.n	8001582 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800157e:	2302      	movs	r3, #2
 8001580:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001582:	7dfb      	ldrb	r3, [r7, #23]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a8:	2204      	movs	r2, #4
 80015aa:	409a      	lsls	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4013      	ands	r3, r2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d04f      	beq.n	8001654 <HAL_DMA_IRQHandler+0xc8>
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	f003 0304 	and.w	r3, r3, #4
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d04a      	beq.n	8001654 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0320 	and.w	r3, r3, #32
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d107      	bne.n	80015dc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f022 0204 	bic.w	r2, r2, #4
 80015da:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a66      	ldr	r2, [pc, #408]	; (800177c <HAL_DMA_IRQHandler+0x1f0>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d029      	beq.n	800163a <HAL_DMA_IRQHandler+0xae>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a65      	ldr	r2, [pc, #404]	; (8001780 <HAL_DMA_IRQHandler+0x1f4>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d022      	beq.n	8001636 <HAL_DMA_IRQHandler+0xaa>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a63      	ldr	r2, [pc, #396]	; (8001784 <HAL_DMA_IRQHandler+0x1f8>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d01a      	beq.n	8001630 <HAL_DMA_IRQHandler+0xa4>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a62      	ldr	r2, [pc, #392]	; (8001788 <HAL_DMA_IRQHandler+0x1fc>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d012      	beq.n	800162a <HAL_DMA_IRQHandler+0x9e>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a60      	ldr	r2, [pc, #384]	; (800178c <HAL_DMA_IRQHandler+0x200>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d00a      	beq.n	8001624 <HAL_DMA_IRQHandler+0x98>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a5f      	ldr	r2, [pc, #380]	; (8001790 <HAL_DMA_IRQHandler+0x204>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d102      	bne.n	800161e <HAL_DMA_IRQHandler+0x92>
 8001618:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800161c:	e00e      	b.n	800163c <HAL_DMA_IRQHandler+0xb0>
 800161e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001622:	e00b      	b.n	800163c <HAL_DMA_IRQHandler+0xb0>
 8001624:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001628:	e008      	b.n	800163c <HAL_DMA_IRQHandler+0xb0>
 800162a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800162e:	e005      	b.n	800163c <HAL_DMA_IRQHandler+0xb0>
 8001630:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001634:	e002      	b.n	800163c <HAL_DMA_IRQHandler+0xb0>
 8001636:	2340      	movs	r3, #64	; 0x40
 8001638:	e000      	b.n	800163c <HAL_DMA_IRQHandler+0xb0>
 800163a:	2304      	movs	r3, #4
 800163c:	4a55      	ldr	r2, [pc, #340]	; (8001794 <HAL_DMA_IRQHandler+0x208>)
 800163e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001644:	2b00      	cmp	r3, #0
 8001646:	f000 8094 	beq.w	8001772 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001652:	e08e      	b.n	8001772 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001658:	2202      	movs	r2, #2
 800165a:	409a      	lsls	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4013      	ands	r3, r2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d056      	beq.n	8001712 <HAL_DMA_IRQHandler+0x186>
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d051      	beq.n	8001712 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0320 	and.w	r3, r3, #32
 8001678:	2b00      	cmp	r3, #0
 800167a:	d10b      	bne.n	8001694 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 020a 	bic.w	r2, r2, #10
 800168a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2201      	movs	r2, #1
 8001690:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a38      	ldr	r2, [pc, #224]	; (800177c <HAL_DMA_IRQHandler+0x1f0>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d029      	beq.n	80016f2 <HAL_DMA_IRQHandler+0x166>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a37      	ldr	r2, [pc, #220]	; (8001780 <HAL_DMA_IRQHandler+0x1f4>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d022      	beq.n	80016ee <HAL_DMA_IRQHandler+0x162>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a35      	ldr	r2, [pc, #212]	; (8001784 <HAL_DMA_IRQHandler+0x1f8>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d01a      	beq.n	80016e8 <HAL_DMA_IRQHandler+0x15c>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a34      	ldr	r2, [pc, #208]	; (8001788 <HAL_DMA_IRQHandler+0x1fc>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d012      	beq.n	80016e2 <HAL_DMA_IRQHandler+0x156>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a32      	ldr	r2, [pc, #200]	; (800178c <HAL_DMA_IRQHandler+0x200>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d00a      	beq.n	80016dc <HAL_DMA_IRQHandler+0x150>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a31      	ldr	r2, [pc, #196]	; (8001790 <HAL_DMA_IRQHandler+0x204>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d102      	bne.n	80016d6 <HAL_DMA_IRQHandler+0x14a>
 80016d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80016d4:	e00e      	b.n	80016f4 <HAL_DMA_IRQHandler+0x168>
 80016d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016da:	e00b      	b.n	80016f4 <HAL_DMA_IRQHandler+0x168>
 80016dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016e0:	e008      	b.n	80016f4 <HAL_DMA_IRQHandler+0x168>
 80016e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016e6:	e005      	b.n	80016f4 <HAL_DMA_IRQHandler+0x168>
 80016e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016ec:	e002      	b.n	80016f4 <HAL_DMA_IRQHandler+0x168>
 80016ee:	2320      	movs	r3, #32
 80016f0:	e000      	b.n	80016f4 <HAL_DMA_IRQHandler+0x168>
 80016f2:	2302      	movs	r3, #2
 80016f4:	4a27      	ldr	r2, [pc, #156]	; (8001794 <HAL_DMA_IRQHandler+0x208>)
 80016f6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001704:	2b00      	cmp	r3, #0
 8001706:	d034      	beq.n	8001772 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001710:	e02f      	b.n	8001772 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	2208      	movs	r2, #8
 8001718:	409a      	lsls	r2, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	4013      	ands	r3, r2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d028      	beq.n	8001774 <HAL_DMA_IRQHandler+0x1e8>
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	f003 0308 	and.w	r3, r3, #8
 8001728:	2b00      	cmp	r3, #0
 800172a:	d023      	beq.n	8001774 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 020e 	bic.w	r2, r2, #14
 800173a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001744:	2101      	movs	r1, #1
 8001746:	fa01 f202 	lsl.w	r2, r1, r2
 800174a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	2b00      	cmp	r3, #0
 8001768:	d004      	beq.n	8001774 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	4798      	blx	r3
    }
  }
  return;
 8001772:	bf00      	nop
 8001774:	bf00      	nop
}
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40020008 	.word	0x40020008
 8001780:	4002001c 	.word	0x4002001c
 8001784:	40020030 	.word	0x40020030
 8001788:	40020044 	.word	0x40020044
 800178c:	40020058 	.word	0x40020058
 8001790:	4002006c 	.word	0x4002006c
 8001794:	40020000 	.word	0x40020000

08001798 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
 80017a4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ae:	2101      	movs	r1, #1
 80017b0:	fa01 f202 	lsl.w	r2, r1, r2
 80017b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b10      	cmp	r3, #16
 80017c4:	d108      	bne.n	80017d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	68ba      	ldr	r2, [r7, #8]
 80017d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80017d6:	e007      	b.n	80017e8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	68ba      	ldr	r2, [r7, #8]
 80017de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	60da      	str	r2, [r3, #12]
}
 80017e8:	bf00      	nop
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr
	...

080017f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b08b      	sub	sp, #44	; 0x2c
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017fe:	2300      	movs	r3, #0
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001802:	2300      	movs	r3, #0
 8001804:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001806:	e169      	b.n	8001adc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001808:	2201      	movs	r2, #1
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	69fa      	ldr	r2, [r7, #28]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	429a      	cmp	r2, r3
 8001822:	f040 8158 	bne.w	8001ad6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	4a9a      	ldr	r2, [pc, #616]	; (8001a94 <HAL_GPIO_Init+0x2a0>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d05e      	beq.n	80018ee <HAL_GPIO_Init+0xfa>
 8001830:	4a98      	ldr	r2, [pc, #608]	; (8001a94 <HAL_GPIO_Init+0x2a0>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d875      	bhi.n	8001922 <HAL_GPIO_Init+0x12e>
 8001836:	4a98      	ldr	r2, [pc, #608]	; (8001a98 <HAL_GPIO_Init+0x2a4>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d058      	beq.n	80018ee <HAL_GPIO_Init+0xfa>
 800183c:	4a96      	ldr	r2, [pc, #600]	; (8001a98 <HAL_GPIO_Init+0x2a4>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d86f      	bhi.n	8001922 <HAL_GPIO_Init+0x12e>
 8001842:	4a96      	ldr	r2, [pc, #600]	; (8001a9c <HAL_GPIO_Init+0x2a8>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d052      	beq.n	80018ee <HAL_GPIO_Init+0xfa>
 8001848:	4a94      	ldr	r2, [pc, #592]	; (8001a9c <HAL_GPIO_Init+0x2a8>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d869      	bhi.n	8001922 <HAL_GPIO_Init+0x12e>
 800184e:	4a94      	ldr	r2, [pc, #592]	; (8001aa0 <HAL_GPIO_Init+0x2ac>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d04c      	beq.n	80018ee <HAL_GPIO_Init+0xfa>
 8001854:	4a92      	ldr	r2, [pc, #584]	; (8001aa0 <HAL_GPIO_Init+0x2ac>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d863      	bhi.n	8001922 <HAL_GPIO_Init+0x12e>
 800185a:	4a92      	ldr	r2, [pc, #584]	; (8001aa4 <HAL_GPIO_Init+0x2b0>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d046      	beq.n	80018ee <HAL_GPIO_Init+0xfa>
 8001860:	4a90      	ldr	r2, [pc, #576]	; (8001aa4 <HAL_GPIO_Init+0x2b0>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d85d      	bhi.n	8001922 <HAL_GPIO_Init+0x12e>
 8001866:	2b12      	cmp	r3, #18
 8001868:	d82a      	bhi.n	80018c0 <HAL_GPIO_Init+0xcc>
 800186a:	2b12      	cmp	r3, #18
 800186c:	d859      	bhi.n	8001922 <HAL_GPIO_Init+0x12e>
 800186e:	a201      	add	r2, pc, #4	; (adr r2, 8001874 <HAL_GPIO_Init+0x80>)
 8001870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001874:	080018ef 	.word	0x080018ef
 8001878:	080018c9 	.word	0x080018c9
 800187c:	080018db 	.word	0x080018db
 8001880:	0800191d 	.word	0x0800191d
 8001884:	08001923 	.word	0x08001923
 8001888:	08001923 	.word	0x08001923
 800188c:	08001923 	.word	0x08001923
 8001890:	08001923 	.word	0x08001923
 8001894:	08001923 	.word	0x08001923
 8001898:	08001923 	.word	0x08001923
 800189c:	08001923 	.word	0x08001923
 80018a0:	08001923 	.word	0x08001923
 80018a4:	08001923 	.word	0x08001923
 80018a8:	08001923 	.word	0x08001923
 80018ac:	08001923 	.word	0x08001923
 80018b0:	08001923 	.word	0x08001923
 80018b4:	08001923 	.word	0x08001923
 80018b8:	080018d1 	.word	0x080018d1
 80018bc:	080018e5 	.word	0x080018e5
 80018c0:	4a79      	ldr	r2, [pc, #484]	; (8001aa8 <HAL_GPIO_Init+0x2b4>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d013      	beq.n	80018ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018c6:	e02c      	b.n	8001922 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	623b      	str	r3, [r7, #32]
          break;
 80018ce:	e029      	b.n	8001924 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	3304      	adds	r3, #4
 80018d6:	623b      	str	r3, [r7, #32]
          break;
 80018d8:	e024      	b.n	8001924 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	3308      	adds	r3, #8
 80018e0:	623b      	str	r3, [r7, #32]
          break;
 80018e2:	e01f      	b.n	8001924 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	330c      	adds	r3, #12
 80018ea:	623b      	str	r3, [r7, #32]
          break;
 80018ec:	e01a      	b.n	8001924 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d102      	bne.n	80018fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018f6:	2304      	movs	r3, #4
 80018f8:	623b      	str	r3, [r7, #32]
          break;
 80018fa:	e013      	b.n	8001924 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d105      	bne.n	8001910 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001904:	2308      	movs	r3, #8
 8001906:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	69fa      	ldr	r2, [r7, #28]
 800190c:	611a      	str	r2, [r3, #16]
          break;
 800190e:	e009      	b.n	8001924 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001910:	2308      	movs	r3, #8
 8001912:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69fa      	ldr	r2, [r7, #28]
 8001918:	615a      	str	r2, [r3, #20]
          break;
 800191a:	e003      	b.n	8001924 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800191c:	2300      	movs	r3, #0
 800191e:	623b      	str	r3, [r7, #32]
          break;
 8001920:	e000      	b.n	8001924 <HAL_GPIO_Init+0x130>
          break;
 8001922:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	2bff      	cmp	r3, #255	; 0xff
 8001928:	d801      	bhi.n	800192e <HAL_GPIO_Init+0x13a>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	e001      	b.n	8001932 <HAL_GPIO_Init+0x13e>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	3304      	adds	r3, #4
 8001932:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	2bff      	cmp	r3, #255	; 0xff
 8001938:	d802      	bhi.n	8001940 <HAL_GPIO_Init+0x14c>
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	e002      	b.n	8001946 <HAL_GPIO_Init+0x152>
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	3b08      	subs	r3, #8
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	210f      	movs	r1, #15
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	fa01 f303 	lsl.w	r3, r1, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	401a      	ands	r2, r3
 8001958:	6a39      	ldr	r1, [r7, #32]
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	fa01 f303 	lsl.w	r3, r1, r3
 8001960:	431a      	orrs	r2, r3
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196e:	2b00      	cmp	r3, #0
 8001970:	f000 80b1 	beq.w	8001ad6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001974:	4b4d      	ldr	r3, [pc, #308]	; (8001aac <HAL_GPIO_Init+0x2b8>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	4a4c      	ldr	r2, [pc, #304]	; (8001aac <HAL_GPIO_Init+0x2b8>)
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	6193      	str	r3, [r2, #24]
 8001980:	4b4a      	ldr	r3, [pc, #296]	; (8001aac <HAL_GPIO_Init+0x2b8>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800198c:	4a48      	ldr	r2, [pc, #288]	; (8001ab0 <HAL_GPIO_Init+0x2bc>)
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	089b      	lsrs	r3, r3, #2
 8001992:	3302      	adds	r3, #2
 8001994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001998:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	f003 0303 	and.w	r3, r3, #3
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	220f      	movs	r2, #15
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	4013      	ands	r3, r2
 80019ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a40      	ldr	r2, [pc, #256]	; (8001ab4 <HAL_GPIO_Init+0x2c0>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d013      	beq.n	80019e0 <HAL_GPIO_Init+0x1ec>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a3f      	ldr	r2, [pc, #252]	; (8001ab8 <HAL_GPIO_Init+0x2c4>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d00d      	beq.n	80019dc <HAL_GPIO_Init+0x1e8>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a3e      	ldr	r2, [pc, #248]	; (8001abc <HAL_GPIO_Init+0x2c8>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d007      	beq.n	80019d8 <HAL_GPIO_Init+0x1e4>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a3d      	ldr	r2, [pc, #244]	; (8001ac0 <HAL_GPIO_Init+0x2cc>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d101      	bne.n	80019d4 <HAL_GPIO_Init+0x1e0>
 80019d0:	2303      	movs	r3, #3
 80019d2:	e006      	b.n	80019e2 <HAL_GPIO_Init+0x1ee>
 80019d4:	2304      	movs	r3, #4
 80019d6:	e004      	b.n	80019e2 <HAL_GPIO_Init+0x1ee>
 80019d8:	2302      	movs	r3, #2
 80019da:	e002      	b.n	80019e2 <HAL_GPIO_Init+0x1ee>
 80019dc:	2301      	movs	r3, #1
 80019de:	e000      	b.n	80019e2 <HAL_GPIO_Init+0x1ee>
 80019e0:	2300      	movs	r3, #0
 80019e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e4:	f002 0203 	and.w	r2, r2, #3
 80019e8:	0092      	lsls	r2, r2, #2
 80019ea:	4093      	lsls	r3, r2
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019f2:	492f      	ldr	r1, [pc, #188]	; (8001ab0 <HAL_GPIO_Init+0x2bc>)
 80019f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f6:	089b      	lsrs	r3, r3, #2
 80019f8:	3302      	adds	r3, #2
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d006      	beq.n	8001a1a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a0c:	4b2d      	ldr	r3, [pc, #180]	; (8001ac4 <HAL_GPIO_Init+0x2d0>)
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	492c      	ldr	r1, [pc, #176]	; (8001ac4 <HAL_GPIO_Init+0x2d0>)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	608b      	str	r3, [r1, #8]
 8001a18:	e006      	b.n	8001a28 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a1a:	4b2a      	ldr	r3, [pc, #168]	; (8001ac4 <HAL_GPIO_Init+0x2d0>)
 8001a1c:	689a      	ldr	r2, [r3, #8]
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	43db      	mvns	r3, r3
 8001a22:	4928      	ldr	r1, [pc, #160]	; (8001ac4 <HAL_GPIO_Init+0x2d0>)
 8001a24:	4013      	ands	r3, r2
 8001a26:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d006      	beq.n	8001a42 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a34:	4b23      	ldr	r3, [pc, #140]	; (8001ac4 <HAL_GPIO_Init+0x2d0>)
 8001a36:	68da      	ldr	r2, [r3, #12]
 8001a38:	4922      	ldr	r1, [pc, #136]	; (8001ac4 <HAL_GPIO_Init+0x2d0>)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	60cb      	str	r3, [r1, #12]
 8001a40:	e006      	b.n	8001a50 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a42:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <HAL_GPIO_Init+0x2d0>)
 8001a44:	68da      	ldr	r2, [r3, #12]
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	491e      	ldr	r1, [pc, #120]	; (8001ac4 <HAL_GPIO_Init+0x2d0>)
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d006      	beq.n	8001a6a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a5c:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <HAL_GPIO_Init+0x2d0>)
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	4918      	ldr	r1, [pc, #96]	; (8001ac4 <HAL_GPIO_Init+0x2d0>)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	604b      	str	r3, [r1, #4]
 8001a68:	e006      	b.n	8001a78 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a6a:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <HAL_GPIO_Init+0x2d0>)
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	4914      	ldr	r1, [pc, #80]	; (8001ac4 <HAL_GPIO_Init+0x2d0>)
 8001a74:	4013      	ands	r3, r2
 8001a76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d021      	beq.n	8001ac8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a84:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <HAL_GPIO_Init+0x2d0>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	490e      	ldr	r1, [pc, #56]	; (8001ac4 <HAL_GPIO_Init+0x2d0>)
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	600b      	str	r3, [r1, #0]
 8001a90:	e021      	b.n	8001ad6 <HAL_GPIO_Init+0x2e2>
 8001a92:	bf00      	nop
 8001a94:	10320000 	.word	0x10320000
 8001a98:	10310000 	.word	0x10310000
 8001a9c:	10220000 	.word	0x10220000
 8001aa0:	10210000 	.word	0x10210000
 8001aa4:	10120000 	.word	0x10120000
 8001aa8:	10110000 	.word	0x10110000
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40010000 	.word	0x40010000
 8001ab4:	40010800 	.word	0x40010800
 8001ab8:	40010c00 	.word	0x40010c00
 8001abc:	40011000 	.word	0x40011000
 8001ac0:	40011400 	.word	0x40011400
 8001ac4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <HAL_GPIO_Init+0x304>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	4909      	ldr	r1, [pc, #36]	; (8001af8 <HAL_GPIO_Init+0x304>)
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	3301      	adds	r3, #1
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f47f ae8e 	bne.w	8001808 <HAL_GPIO_Init+0x14>
  }
}
 8001aec:	bf00      	nop
 8001aee:	bf00      	nop
 8001af0:	372c      	adds	r7, #44	; 0x2c
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr
 8001af8:	40010400 	.word	0x40010400

08001afc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	807b      	strh	r3, [r7, #2]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b0c:	787b      	ldrb	r3, [r7, #1]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b12:	887a      	ldrh	r2, [r7, #2]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b18:	e003      	b.n	8001b22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b1a:	887b      	ldrh	r3, [r7, #2]
 8001b1c:	041a      	lsls	r2, r3, #16
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	611a      	str	r2, [r3, #16]
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr

08001b2c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b3e:	887a      	ldrh	r2, [r7, #2]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	4013      	ands	r3, r2
 8001b44:	041a      	lsls	r2, r3, #16
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	43d9      	mvns	r1, r3
 8001b4a:	887b      	ldrh	r3, [r7, #2]
 8001b4c:	400b      	ands	r3, r1
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	611a      	str	r2, [r3, #16]
}
 8001b54:	bf00      	nop
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
	...

08001b60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e272      	b.n	8002058 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 8087 	beq.w	8001c8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b80:	4b92      	ldr	r3, [pc, #584]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 030c 	and.w	r3, r3, #12
 8001b88:	2b04      	cmp	r3, #4
 8001b8a:	d00c      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b8c:	4b8f      	ldr	r3, [pc, #572]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 030c 	and.w	r3, r3, #12
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	d112      	bne.n	8001bbe <HAL_RCC_OscConfig+0x5e>
 8001b98:	4b8c      	ldr	r3, [pc, #560]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba4:	d10b      	bne.n	8001bbe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba6:	4b89      	ldr	r3, [pc, #548]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d06c      	beq.n	8001c8c <HAL_RCC_OscConfig+0x12c>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d168      	bne.n	8001c8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e24c      	b.n	8002058 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc6:	d106      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x76>
 8001bc8:	4b80      	ldr	r3, [pc, #512]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a7f      	ldr	r2, [pc, #508]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	e02e      	b.n	8001c34 <HAL_RCC_OscConfig+0xd4>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d10c      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x98>
 8001bde:	4b7b      	ldr	r3, [pc, #492]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a7a      	ldr	r2, [pc, #488]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001be4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	4b78      	ldr	r3, [pc, #480]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a77      	ldr	r2, [pc, #476]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	e01d      	b.n	8001c34 <HAL_RCC_OscConfig+0xd4>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c00:	d10c      	bne.n	8001c1c <HAL_RCC_OscConfig+0xbc>
 8001c02:	4b72      	ldr	r3, [pc, #456]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a71      	ldr	r2, [pc, #452]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	4b6f      	ldr	r3, [pc, #444]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a6e      	ldr	r2, [pc, #440]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	e00b      	b.n	8001c34 <HAL_RCC_OscConfig+0xd4>
 8001c1c:	4b6b      	ldr	r3, [pc, #428]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a6a      	ldr	r2, [pc, #424]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	4b68      	ldr	r3, [pc, #416]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a67      	ldr	r2, [pc, #412]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d013      	beq.n	8001c64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3c:	f7ff fab0 	bl	80011a0 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c44:	f7ff faac 	bl	80011a0 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b64      	cmp	r3, #100	; 0x64
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e200      	b.n	8002058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c56:	4b5d      	ldr	r3, [pc, #372]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0f0      	beq.n	8001c44 <HAL_RCC_OscConfig+0xe4>
 8001c62:	e014      	b.n	8001c8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c64:	f7ff fa9c 	bl	80011a0 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c6c:	f7ff fa98 	bl	80011a0 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b64      	cmp	r3, #100	; 0x64
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e1ec      	b.n	8002058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c7e:	4b53      	ldr	r3, [pc, #332]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f0      	bne.n	8001c6c <HAL_RCC_OscConfig+0x10c>
 8001c8a:	e000      	b.n	8001c8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d063      	beq.n	8001d62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c9a:	4b4c      	ldr	r3, [pc, #304]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f003 030c 	and.w	r3, r3, #12
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00b      	beq.n	8001cbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ca6:	4b49      	ldr	r3, [pc, #292]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f003 030c 	and.w	r3, r3, #12
 8001cae:	2b08      	cmp	r3, #8
 8001cb0:	d11c      	bne.n	8001cec <HAL_RCC_OscConfig+0x18c>
 8001cb2:	4b46      	ldr	r3, [pc, #280]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d116      	bne.n	8001cec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cbe:	4b43      	ldr	r3, [pc, #268]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d005      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x176>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d001      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e1c0      	b.n	8002058 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd6:	4b3d      	ldr	r3, [pc, #244]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	4939      	ldr	r1, [pc, #228]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cea:	e03a      	b.n	8001d62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d020      	beq.n	8001d36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cf4:	4b36      	ldr	r3, [pc, #216]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfa:	f7ff fa51 	bl	80011a0 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d02:	f7ff fa4d 	bl	80011a0 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e1a1      	b.n	8002058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d14:	4b2d      	ldr	r3, [pc, #180]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0f0      	beq.n	8001d02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d20:	4b2a      	ldr	r3, [pc, #168]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	4927      	ldr	r1, [pc, #156]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	600b      	str	r3, [r1, #0]
 8001d34:	e015      	b.n	8001d62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d36:	4b26      	ldr	r3, [pc, #152]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3c:	f7ff fa30 	bl	80011a0 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d44:	f7ff fa2c 	bl	80011a0 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e180      	b.n	8002058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d56:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f0      	bne.n	8001d44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d03a      	beq.n	8001de4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d019      	beq.n	8001daa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d76:	4b17      	ldr	r3, [pc, #92]	; (8001dd4 <HAL_RCC_OscConfig+0x274>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d7c:	f7ff fa10 	bl	80011a0 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d84:	f7ff fa0c 	bl	80011a0 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e160      	b.n	8002058 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d96:	4b0d      	ldr	r3, [pc, #52]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0f0      	beq.n	8001d84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001da2:	2001      	movs	r0, #1
 8001da4:	f000 fa9c 	bl	80022e0 <RCC_Delay>
 8001da8:	e01c      	b.n	8001de4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001daa:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <HAL_RCC_OscConfig+0x274>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db0:	f7ff f9f6 	bl	80011a0 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db6:	e00f      	b.n	8001dd8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db8:	f7ff f9f2 	bl	80011a0 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d908      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e146      	b.n	8002058 <HAL_RCC_OscConfig+0x4f8>
 8001dca:	bf00      	nop
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	42420000 	.word	0x42420000
 8001dd4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd8:	4b92      	ldr	r3, [pc, #584]	; (8002024 <HAL_RCC_OscConfig+0x4c4>)
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1e9      	bne.n	8001db8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 80a6 	beq.w	8001f3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001df2:	2300      	movs	r3, #0
 8001df4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001df6:	4b8b      	ldr	r3, [pc, #556]	; (8002024 <HAL_RCC_OscConfig+0x4c4>)
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d10d      	bne.n	8001e1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e02:	4b88      	ldr	r3, [pc, #544]	; (8002024 <HAL_RCC_OscConfig+0x4c4>)
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	4a87      	ldr	r2, [pc, #540]	; (8002024 <HAL_RCC_OscConfig+0x4c4>)
 8001e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e0c:	61d3      	str	r3, [r2, #28]
 8001e0e:	4b85      	ldr	r3, [pc, #532]	; (8002024 <HAL_RCC_OscConfig+0x4c4>)
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e16:	60bb      	str	r3, [r7, #8]
 8001e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1e:	4b82      	ldr	r3, [pc, #520]	; (8002028 <HAL_RCC_OscConfig+0x4c8>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d118      	bne.n	8001e5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e2a:	4b7f      	ldr	r3, [pc, #508]	; (8002028 <HAL_RCC_OscConfig+0x4c8>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a7e      	ldr	r2, [pc, #504]	; (8002028 <HAL_RCC_OscConfig+0x4c8>)
 8001e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e36:	f7ff f9b3 	bl	80011a0 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e3e:	f7ff f9af 	bl	80011a0 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b64      	cmp	r3, #100	; 0x64
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e103      	b.n	8002058 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e50:	4b75      	ldr	r3, [pc, #468]	; (8002028 <HAL_RCC_OscConfig+0x4c8>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0f0      	beq.n	8001e3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d106      	bne.n	8001e72 <HAL_RCC_OscConfig+0x312>
 8001e64:	4b6f      	ldr	r3, [pc, #444]	; (8002024 <HAL_RCC_OscConfig+0x4c4>)
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	4a6e      	ldr	r2, [pc, #440]	; (8002024 <HAL_RCC_OscConfig+0x4c4>)
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	6213      	str	r3, [r2, #32]
 8001e70:	e02d      	b.n	8001ece <HAL_RCC_OscConfig+0x36e>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10c      	bne.n	8001e94 <HAL_RCC_OscConfig+0x334>
 8001e7a:	4b6a      	ldr	r3, [pc, #424]	; (8002024 <HAL_RCC_OscConfig+0x4c4>)
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	4a69      	ldr	r2, [pc, #420]	; (8002024 <HAL_RCC_OscConfig+0x4c4>)
 8001e80:	f023 0301 	bic.w	r3, r3, #1
 8001e84:	6213      	str	r3, [r2, #32]
 8001e86:	4b67      	ldr	r3, [pc, #412]	; (8002024 <HAL_RCC_OscConfig+0x4c4>)
 8001e88:	6a1b      	ldr	r3, [r3, #32]
 8001e8a:	4a66      	ldr	r2, [pc, #408]	; (8002024 <HAL_RCC_OscConfig+0x4c4>)
 8001e8c:	f023 0304 	bic.w	r3, r3, #4
 8001e90:	6213      	str	r3, [r2, #32]
 8001e92:	e01c      	b.n	8001ece <HAL_RCC_OscConfig+0x36e>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	2b05      	cmp	r3, #5
 8001e9a:	d10c      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x356>
 8001e9c:	4b61      	ldr	r3, [pc, #388]	; (8002024 <HAL_RCC_OscConfig+0x4c4>)
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	4a60      	ldr	r2, [pc, #384]	; (8002024 <HAL_RCC_OscConfig+0x4c4>)
 8001ea2:	f043 0304 	orr.w	r3, r3, #4
 8001ea6:	6213      	str	r3, [r2, #32]
 8001ea8:	4b5e      	ldr	r3, [pc, #376]	; (8002024 <HAL_RCC_OscConfig+0x4c4>)
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	4a5d      	ldr	r2, [pc, #372]	; (8002024 <HAL_RCC_OscConfig+0x4c4>)
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	6213      	str	r3, [r2, #32]
 8001eb4:	e00b      	b.n	8001ece <HAL_RCC_OscConfig+0x36e>
 8001eb6:	4b5b      	ldr	r3, [pc, #364]	; (8002024 <HAL_RCC_OscConfig+0x4c4>)
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
 8001eba:	4a5a      	ldr	r2, [pc, #360]	; (8002024 <HAL_RCC_OscConfig+0x4c4>)
 8001ebc:	f023 0301 	bic.w	r3, r3, #1
 8001ec0:	6213      	str	r3, [r2, #32]
 8001ec2:	4b58      	ldr	r3, [pc, #352]	; (8002024 <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	4a57      	ldr	r2, [pc, #348]	; (8002024 <HAL_RCC_OscConfig+0x4c4>)
 8001ec8:	f023 0304 	bic.w	r3, r3, #4
 8001ecc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d015      	beq.n	8001f02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed6:	f7ff f963 	bl	80011a0 <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001edc:	e00a      	b.n	8001ef4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ede:	f7ff f95f 	bl	80011a0 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e0b1      	b.n	8002058 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef4:	4b4b      	ldr	r3, [pc, #300]	; (8002024 <HAL_RCC_OscConfig+0x4c4>)
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0ee      	beq.n	8001ede <HAL_RCC_OscConfig+0x37e>
 8001f00:	e014      	b.n	8001f2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f02:	f7ff f94d 	bl	80011a0 <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f08:	e00a      	b.n	8001f20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f0a:	f7ff f949 	bl	80011a0 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e09b      	b.n	8002058 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f20:	4b40      	ldr	r3, [pc, #256]	; (8002024 <HAL_RCC_OscConfig+0x4c4>)
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1ee      	bne.n	8001f0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f2c:	7dfb      	ldrb	r3, [r7, #23]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d105      	bne.n	8001f3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f32:	4b3c      	ldr	r3, [pc, #240]	; (8002024 <HAL_RCC_OscConfig+0x4c4>)
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	4a3b      	ldr	r2, [pc, #236]	; (8002024 <HAL_RCC_OscConfig+0x4c4>)
 8001f38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 8087 	beq.w	8002056 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f48:	4b36      	ldr	r3, [pc, #216]	; (8002024 <HAL_RCC_OscConfig+0x4c4>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f003 030c 	and.w	r3, r3, #12
 8001f50:	2b08      	cmp	r3, #8
 8001f52:	d061      	beq.n	8002018 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	69db      	ldr	r3, [r3, #28]
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d146      	bne.n	8001fea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f5c:	4b33      	ldr	r3, [pc, #204]	; (800202c <HAL_RCC_OscConfig+0x4cc>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f62:	f7ff f91d 	bl	80011a0 <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f6a:	f7ff f919 	bl	80011a0 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e06d      	b.n	8002058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f7c:	4b29      	ldr	r3, [pc, #164]	; (8002024 <HAL_RCC_OscConfig+0x4c4>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1f0      	bne.n	8001f6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f90:	d108      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f92:	4b24      	ldr	r3, [pc, #144]	; (8002024 <HAL_RCC_OscConfig+0x4c4>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	4921      	ldr	r1, [pc, #132]	; (8002024 <HAL_RCC_OscConfig+0x4c4>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fa4:	4b1f      	ldr	r3, [pc, #124]	; (8002024 <HAL_RCC_OscConfig+0x4c4>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a19      	ldr	r1, [r3, #32]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	430b      	orrs	r3, r1
 8001fb6:	491b      	ldr	r1, [pc, #108]	; (8002024 <HAL_RCC_OscConfig+0x4c4>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fbc:	4b1b      	ldr	r3, [pc, #108]	; (800202c <HAL_RCC_OscConfig+0x4cc>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc2:	f7ff f8ed 	bl	80011a0 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fca:	f7ff f8e9 	bl	80011a0 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e03d      	b.n	8002058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fdc:	4b11      	ldr	r3, [pc, #68]	; (8002024 <HAL_RCC_OscConfig+0x4c4>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0f0      	beq.n	8001fca <HAL_RCC_OscConfig+0x46a>
 8001fe8:	e035      	b.n	8002056 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fea:	4b10      	ldr	r3, [pc, #64]	; (800202c <HAL_RCC_OscConfig+0x4cc>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff0:	f7ff f8d6 	bl	80011a0 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff8:	f7ff f8d2 	bl	80011a0 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e026      	b.n	8002058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800200a:	4b06      	ldr	r3, [pc, #24]	; (8002024 <HAL_RCC_OscConfig+0x4c4>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1f0      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x498>
 8002016:	e01e      	b.n	8002056 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	69db      	ldr	r3, [r3, #28]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d107      	bne.n	8002030 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e019      	b.n	8002058 <HAL_RCC_OscConfig+0x4f8>
 8002024:	40021000 	.word	0x40021000
 8002028:	40007000 	.word	0x40007000
 800202c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002030:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <HAL_RCC_OscConfig+0x500>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	429a      	cmp	r2, r3
 8002042:	d106      	bne.n	8002052 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800204e:	429a      	cmp	r2, r3
 8002050:	d001      	beq.n	8002056 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e000      	b.n	8002058 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40021000 	.word	0x40021000

08002064 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e0d0      	b.n	800221a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002078:	4b6a      	ldr	r3, [pc, #424]	; (8002224 <HAL_RCC_ClockConfig+0x1c0>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	429a      	cmp	r2, r3
 8002084:	d910      	bls.n	80020a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002086:	4b67      	ldr	r3, [pc, #412]	; (8002224 <HAL_RCC_ClockConfig+0x1c0>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f023 0207 	bic.w	r2, r3, #7
 800208e:	4965      	ldr	r1, [pc, #404]	; (8002224 <HAL_RCC_ClockConfig+0x1c0>)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	4313      	orrs	r3, r2
 8002094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002096:	4b63      	ldr	r3, [pc, #396]	; (8002224 <HAL_RCC_ClockConfig+0x1c0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d001      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e0b8      	b.n	800221a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d020      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d005      	beq.n	80020cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020c0:	4b59      	ldr	r3, [pc, #356]	; (8002228 <HAL_RCC_ClockConfig+0x1c4>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	4a58      	ldr	r2, [pc, #352]	; (8002228 <HAL_RCC_ClockConfig+0x1c4>)
 80020c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0308 	and.w	r3, r3, #8
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d005      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020d8:	4b53      	ldr	r3, [pc, #332]	; (8002228 <HAL_RCC_ClockConfig+0x1c4>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	4a52      	ldr	r2, [pc, #328]	; (8002228 <HAL_RCC_ClockConfig+0x1c4>)
 80020de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e4:	4b50      	ldr	r3, [pc, #320]	; (8002228 <HAL_RCC_ClockConfig+0x1c4>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	494d      	ldr	r1, [pc, #308]	; (8002228 <HAL_RCC_ClockConfig+0x1c4>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d040      	beq.n	8002184 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d107      	bne.n	800211a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210a:	4b47      	ldr	r3, [pc, #284]	; (8002228 <HAL_RCC_ClockConfig+0x1c4>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d115      	bne.n	8002142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e07f      	b.n	800221a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b02      	cmp	r3, #2
 8002120:	d107      	bne.n	8002132 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002122:	4b41      	ldr	r3, [pc, #260]	; (8002228 <HAL_RCC_ClockConfig+0x1c4>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d109      	bne.n	8002142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e073      	b.n	800221a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002132:	4b3d      	ldr	r3, [pc, #244]	; (8002228 <HAL_RCC_ClockConfig+0x1c4>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e06b      	b.n	800221a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002142:	4b39      	ldr	r3, [pc, #228]	; (8002228 <HAL_RCC_ClockConfig+0x1c4>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f023 0203 	bic.w	r2, r3, #3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	4936      	ldr	r1, [pc, #216]	; (8002228 <HAL_RCC_ClockConfig+0x1c4>)
 8002150:	4313      	orrs	r3, r2
 8002152:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002154:	f7ff f824 	bl	80011a0 <HAL_GetTick>
 8002158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215a:	e00a      	b.n	8002172 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800215c:	f7ff f820 	bl	80011a0 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	f241 3288 	movw	r2, #5000	; 0x1388
 800216a:	4293      	cmp	r3, r2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e053      	b.n	800221a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002172:	4b2d      	ldr	r3, [pc, #180]	; (8002228 <HAL_RCC_ClockConfig+0x1c4>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f003 020c 	and.w	r2, r3, #12
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	429a      	cmp	r2, r3
 8002182:	d1eb      	bne.n	800215c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002184:	4b27      	ldr	r3, [pc, #156]	; (8002224 <HAL_RCC_ClockConfig+0x1c0>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	429a      	cmp	r2, r3
 8002190:	d210      	bcs.n	80021b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002192:	4b24      	ldr	r3, [pc, #144]	; (8002224 <HAL_RCC_ClockConfig+0x1c0>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f023 0207 	bic.w	r2, r3, #7
 800219a:	4922      	ldr	r1, [pc, #136]	; (8002224 <HAL_RCC_ClockConfig+0x1c0>)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	4313      	orrs	r3, r2
 80021a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a2:	4b20      	ldr	r3, [pc, #128]	; (8002224 <HAL_RCC_ClockConfig+0x1c0>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d001      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e032      	b.n	800221a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d008      	beq.n	80021d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021c0:	4b19      	ldr	r3, [pc, #100]	; (8002228 <HAL_RCC_ClockConfig+0x1c4>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	4916      	ldr	r1, [pc, #88]	; (8002228 <HAL_RCC_ClockConfig+0x1c4>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0308 	and.w	r3, r3, #8
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d009      	beq.n	80021f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021de:	4b12      	ldr	r3, [pc, #72]	; (8002228 <HAL_RCC_ClockConfig+0x1c4>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	490e      	ldr	r1, [pc, #56]	; (8002228 <HAL_RCC_ClockConfig+0x1c4>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021f2:	f000 f821 	bl	8002238 <HAL_RCC_GetSysClockFreq>
 80021f6:	4602      	mov	r2, r0
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <HAL_RCC_ClockConfig+0x1c4>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	091b      	lsrs	r3, r3, #4
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	490a      	ldr	r1, [pc, #40]	; (800222c <HAL_RCC_ClockConfig+0x1c8>)
 8002204:	5ccb      	ldrb	r3, [r1, r3]
 8002206:	fa22 f303 	lsr.w	r3, r2, r3
 800220a:	4a09      	ldr	r2, [pc, #36]	; (8002230 <HAL_RCC_ClockConfig+0x1cc>)
 800220c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800220e:	4b09      	ldr	r3, [pc, #36]	; (8002234 <HAL_RCC_ClockConfig+0x1d0>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f7fe ff82 	bl	800111c <HAL_InitTick>

  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40022000 	.word	0x40022000
 8002228:	40021000 	.word	0x40021000
 800222c:	08005a04 	.word	0x08005a04
 8002230:	20000024 	.word	0x20000024
 8002234:	20000028 	.word	0x20000028

08002238 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002238:	b480      	push	{r7}
 800223a:	b087      	sub	sp, #28
 800223c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	2300      	movs	r3, #0
 8002244:	60bb      	str	r3, [r7, #8]
 8002246:	2300      	movs	r3, #0
 8002248:	617b      	str	r3, [r7, #20]
 800224a:	2300      	movs	r3, #0
 800224c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002252:	4b1e      	ldr	r3, [pc, #120]	; (80022cc <HAL_RCC_GetSysClockFreq+0x94>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f003 030c 	and.w	r3, r3, #12
 800225e:	2b04      	cmp	r3, #4
 8002260:	d002      	beq.n	8002268 <HAL_RCC_GetSysClockFreq+0x30>
 8002262:	2b08      	cmp	r3, #8
 8002264:	d003      	beq.n	800226e <HAL_RCC_GetSysClockFreq+0x36>
 8002266:	e027      	b.n	80022b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002268:	4b19      	ldr	r3, [pc, #100]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800226a:	613b      	str	r3, [r7, #16]
      break;
 800226c:	e027      	b.n	80022be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	0c9b      	lsrs	r3, r3, #18
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	4a17      	ldr	r2, [pc, #92]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002278:	5cd3      	ldrb	r3, [r2, r3]
 800227a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d010      	beq.n	80022a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002286:	4b11      	ldr	r3, [pc, #68]	; (80022cc <HAL_RCC_GetSysClockFreq+0x94>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	0c5b      	lsrs	r3, r3, #17
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	4a11      	ldr	r2, [pc, #68]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002292:	5cd3      	ldrb	r3, [r2, r3]
 8002294:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a0d      	ldr	r2, [pc, #52]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800229a:	fb03 f202 	mul.w	r2, r3, r2
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a4:	617b      	str	r3, [r7, #20]
 80022a6:	e004      	b.n	80022b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a0c      	ldr	r2, [pc, #48]	; (80022dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80022ac:	fb02 f303 	mul.w	r3, r2, r3
 80022b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	613b      	str	r3, [r7, #16]
      break;
 80022b6:	e002      	b.n	80022be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022b8:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80022ba:	613b      	str	r3, [r7, #16]
      break;
 80022bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022be:	693b      	ldr	r3, [r7, #16]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	371c      	adds	r7, #28
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	40021000 	.word	0x40021000
 80022d0:	007a1200 	.word	0x007a1200
 80022d4:	08005a14 	.word	0x08005a14
 80022d8:	08005a24 	.word	0x08005a24
 80022dc:	003d0900 	.word	0x003d0900

080022e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022e8:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <RCC_Delay+0x34>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a0a      	ldr	r2, [pc, #40]	; (8002318 <RCC_Delay+0x38>)
 80022ee:	fba2 2303 	umull	r2, r3, r2, r3
 80022f2:	0a5b      	lsrs	r3, r3, #9
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	fb02 f303 	mul.w	r3, r2, r3
 80022fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022fc:	bf00      	nop
  }
  while (Delay --);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	1e5a      	subs	r2, r3, #1
 8002302:	60fa      	str	r2, [r7, #12]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1f9      	bne.n	80022fc <RCC_Delay+0x1c>
}
 8002308:	bf00      	nop
 800230a:	bf00      	nop
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	bc80      	pop	{r7}
 8002312:	4770      	bx	lr
 8002314:	20000024 	.word	0x20000024
 8002318:	10624dd3 	.word	0x10624dd3

0800231c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e076      	b.n	800241c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	2b00      	cmp	r3, #0
 8002334:	d108      	bne.n	8002348 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800233e:	d009      	beq.n	8002354 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	61da      	str	r2, [r3, #28]
 8002346:	e005      	b.n	8002354 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d106      	bne.n	8002374 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7fe fdb0 	bl	8000ed4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2202      	movs	r2, #2
 8002378:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800238a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800239c:	431a      	orrs	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	431a      	orrs	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023c4:	431a      	orrs	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d8:	ea42 0103 	orr.w	r1, r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	430a      	orrs	r2, r1
 80023ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	0c1a      	lsrs	r2, r3, #16
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f002 0204 	and.w	r2, r2, #4
 80023fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	69da      	ldr	r2, [r3, #28]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800240a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	4613      	mov	r3, r2
 8002430:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002432:	2300      	movs	r3, #0
 8002434:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800243c:	2b01      	cmp	r3, #1
 800243e:	d101      	bne.n	8002444 <HAL_SPI_Transmit_DMA+0x20>
 8002440:	2302      	movs	r3, #2
 8002442:	e097      	b.n	8002574 <HAL_SPI_Transmit_DMA+0x150>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b01      	cmp	r3, #1
 8002456:	d002      	beq.n	800245e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8002458:	2302      	movs	r3, #2
 800245a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800245c:	e085      	b.n	800256a <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d002      	beq.n	800246a <HAL_SPI_Transmit_DMA+0x46>
 8002464:	88fb      	ldrh	r3, [r7, #6]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d102      	bne.n	8002470 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800246e:	e07c      	b.n	800256a <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2203      	movs	r2, #3
 8002474:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	88fa      	ldrh	r2, [r7, #6]
 8002488:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	88fa      	ldrh	r2, [r7, #6]
 800248e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024b6:	d10f      	bne.n	80024d8 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024c6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024d6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024dc:	4a27      	ldr	r2, [pc, #156]	; (800257c <HAL_SPI_Transmit_DMA+0x158>)
 80024de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024e4:	4a26      	ldr	r2, [pc, #152]	; (8002580 <HAL_SPI_Transmit_DMA+0x15c>)
 80024e6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ec:	4a25      	ldr	r2, [pc, #148]	; (8002584 <HAL_SPI_Transmit_DMA+0x160>)
 80024ee:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024f4:	2200      	movs	r2, #0
 80024f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002500:	4619      	mov	r1, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	330c      	adds	r3, #12
 8002508:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800250e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002510:	f7fe ffdc 	bl	80014cc <HAL_DMA_Start_IT>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d008      	beq.n	800252c <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251e:	f043 0210 	orr.w	r2, r3, #16
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	75fb      	strb	r3, [r7, #23]

    goto error;
 800252a:	e01e      	b.n	800256a <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002536:	2b40      	cmp	r3, #64	; 0x40
 8002538:	d007      	beq.n	800254a <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002548:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f042 0220 	orr.w	r2, r2, #32
 8002558:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f042 0202 	orr.w	r2, r2, #2
 8002568:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002572:	7dfb      	ldrb	r3, [r7, #23]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3718      	adds	r7, #24
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	08002665 	.word	0x08002665
 8002580:	080025bf 	.word	0x080025bf
 8002584:	08002681 	.word	0x08002681

08002588 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	bc80      	pop	{r7}
 8002598:	4770      	bx	lr

0800259a <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr

080025ac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr

080025be <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b086      	sub	sp, #24
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025cc:	f7fe fde8 	bl	80011a0 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0320 	and.w	r3, r3, #32
 80025dc:	2b20      	cmp	r3, #32
 80025de:	d03b      	beq.n	8002658 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 0220 	bic.w	r2, r2, #32
 80025ee:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 0202 	bic.w	r2, r2, #2
 80025fe:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	2164      	movs	r1, #100	; 0x64
 8002604:	6978      	ldr	r0, [r7, #20]
 8002606:	f000 f8e3 	bl	80027d0 <SPI_EndRxTxTransaction>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d005      	beq.n	800261c <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002614:	f043 0220 	orr.w	r2, r3, #32
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d10a      	bne.n	800263a <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002624:	2300      	movs	r3, #0
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	2200      	movs	r2, #0
 800263e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002650:	6978      	ldr	r0, [r7, #20]
 8002652:	f7ff ffab 	bl	80025ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002656:	e002      	b.n	800265e <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8002658:	6978      	ldr	r0, [r7, #20]
 800265a:	f7ff ff95 	bl	8002588 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800265e:	3718      	adds	r7, #24
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002670:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f7ff ff91 	bl	800259a <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002678:	bf00      	nop
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 0203 	bic.w	r2, r2, #3
 800269c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a2:	f043 0210 	orr.w	r2, r3, #16
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f7ff ff7a 	bl	80025ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80026b8:	bf00      	nop
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b088      	sub	sp, #32
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	603b      	str	r3, [r7, #0]
 80026cc:	4613      	mov	r3, r2
 80026ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80026d0:	f7fe fd66 	bl	80011a0 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d8:	1a9b      	subs	r3, r3, r2
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	4413      	add	r3, r2
 80026de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80026e0:	f7fe fd5e 	bl	80011a0 <HAL_GetTick>
 80026e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80026e6:	4b39      	ldr	r3, [pc, #228]	; (80027cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	015b      	lsls	r3, r3, #5
 80026ec:	0d1b      	lsrs	r3, r3, #20
 80026ee:	69fa      	ldr	r2, [r7, #28]
 80026f0:	fb02 f303 	mul.w	r3, r2, r3
 80026f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026f6:	e054      	b.n	80027a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026fe:	d050      	beq.n	80027a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002700:	f7fe fd4e 	bl	80011a0 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	69fa      	ldr	r2, [r7, #28]
 800270c:	429a      	cmp	r2, r3
 800270e:	d902      	bls.n	8002716 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d13d      	bne.n	8002792 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002724:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800272e:	d111      	bne.n	8002754 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002738:	d004      	beq.n	8002744 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002742:	d107      	bne.n	8002754 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002752:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800275c:	d10f      	bne.n	800277e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800277c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e017      	b.n	80027c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	3b01      	subs	r3, #1
 80027a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	4013      	ands	r3, r2
 80027ac:	68ba      	ldr	r2, [r7, #8]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	bf0c      	ite	eq
 80027b2:	2301      	moveq	r3, #1
 80027b4:	2300      	movne	r3, #0
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	461a      	mov	r2, r3
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d19b      	bne.n	80026f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3720      	adds	r7, #32
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20000024 	.word	0x20000024

080027d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af02      	add	r7, sp, #8
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2200      	movs	r2, #0
 80027e4:	2180      	movs	r1, #128	; 0x80
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f7ff ff6a 	bl	80026c0 <SPI_WaitFlagStateUntilTimeout>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d007      	beq.n	8002802 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f6:	f043 0220 	orr.w	r2, r3, #32
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e000      	b.n	8002804 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e041      	b.n	80028a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d106      	bne.n	8002838 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7fe fbb6 	bl	8000fa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2202      	movs	r2, #2
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3304      	adds	r3, #4
 8002848:	4619      	mov	r1, r3
 800284a:	4610      	mov	r0, r2
 800284c:	f000 fac6 	bl	8002ddc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
	...

080028ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d001      	beq.n	80028c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e032      	b.n	800292a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2202      	movs	r2, #2
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a18      	ldr	r2, [pc, #96]	; (8002934 <HAL_TIM_Base_Start+0x88>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d00e      	beq.n	80028f4 <HAL_TIM_Base_Start+0x48>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028de:	d009      	beq.n	80028f4 <HAL_TIM_Base_Start+0x48>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a14      	ldr	r2, [pc, #80]	; (8002938 <HAL_TIM_Base_Start+0x8c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d004      	beq.n	80028f4 <HAL_TIM_Base_Start+0x48>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a13      	ldr	r2, [pc, #76]	; (800293c <HAL_TIM_Base_Start+0x90>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d111      	bne.n	8002918 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2b06      	cmp	r3, #6
 8002904:	d010      	beq.n	8002928 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f042 0201 	orr.w	r2, r2, #1
 8002914:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002916:	e007      	b.n	8002928 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 0201 	orr.w	r2, r2, #1
 8002926:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3714      	adds	r7, #20
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr
 8002934:	40012c00 	.word	0x40012c00
 8002938:	40000400 	.word	0x40000400
 800293c:	40000800 	.word	0x40000800

08002940 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b01      	cmp	r3, #1
 8002952:	d001      	beq.n	8002958 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e03a      	b.n	80029ce <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2202      	movs	r2, #2
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68da      	ldr	r2, [r3, #12]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0201 	orr.w	r2, r2, #1
 800296e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a18      	ldr	r2, [pc, #96]	; (80029d8 <HAL_TIM_Base_Start_IT+0x98>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d00e      	beq.n	8002998 <HAL_TIM_Base_Start_IT+0x58>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002982:	d009      	beq.n	8002998 <HAL_TIM_Base_Start_IT+0x58>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a14      	ldr	r2, [pc, #80]	; (80029dc <HAL_TIM_Base_Start_IT+0x9c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d004      	beq.n	8002998 <HAL_TIM_Base_Start_IT+0x58>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a13      	ldr	r2, [pc, #76]	; (80029e0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d111      	bne.n	80029bc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2b06      	cmp	r3, #6
 80029a8:	d010      	beq.n	80029cc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f042 0201 	orr.w	r2, r2, #1
 80029b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ba:	e007      	b.n	80029cc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f042 0201 	orr.w	r2, r2, #1
 80029ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr
 80029d8:	40012c00 	.word	0x40012c00
 80029dc:	40000400 	.word	0x40000400
 80029e0:	40000800 	.word	0x40000800

080029e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d122      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d11b      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f06f 0202 	mvn.w	r2, #2
 8002a10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	f003 0303 	and.w	r3, r3, #3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 f9bd 	bl	8002da6 <HAL_TIM_IC_CaptureCallback>
 8002a2c:	e005      	b.n	8002a3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f9b0 	bl	8002d94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 f9bf 	bl	8002db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	f003 0304 	and.w	r3, r3, #4
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	d122      	bne.n	8002a94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d11b      	bne.n	8002a94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f06f 0204 	mvn.w	r2, #4
 8002a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2202      	movs	r2, #2
 8002a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f993 	bl	8002da6 <HAL_TIM_IC_CaptureCallback>
 8002a80:	e005      	b.n	8002a8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f986 	bl	8002d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 f995 	bl	8002db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d122      	bne.n	8002ae8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f003 0308 	and.w	r3, r3, #8
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d11b      	bne.n	8002ae8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f06f 0208 	mvn.w	r2, #8
 8002ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2204      	movs	r2, #4
 8002abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f969 	bl	8002da6 <HAL_TIM_IC_CaptureCallback>
 8002ad4:	e005      	b.n	8002ae2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f95c 	bl	8002d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f96b 	bl	8002db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	f003 0310 	and.w	r3, r3, #16
 8002af2:	2b10      	cmp	r3, #16
 8002af4:	d122      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f003 0310 	and.w	r3, r3, #16
 8002b00:	2b10      	cmp	r3, #16
 8002b02:	d11b      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f06f 0210 	mvn.w	r2, #16
 8002b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2208      	movs	r2, #8
 8002b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f93f 	bl	8002da6 <HAL_TIM_IC_CaptureCallback>
 8002b28:	e005      	b.n	8002b36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f932 	bl	8002d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f941 	bl	8002db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d10e      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d107      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f06f 0201 	mvn.w	r2, #1
 8002b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f90d 	bl	8002d82 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b72:	2b80      	cmp	r3, #128	; 0x80
 8002b74:	d10e      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b80:	2b80      	cmp	r3, #128	; 0x80
 8002b82:	d107      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 fa83 	bl	800309a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9e:	2b40      	cmp	r3, #64	; 0x40
 8002ba0:	d10e      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bac:	2b40      	cmp	r3, #64	; 0x40
 8002bae:	d107      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f905 	bl	8002dca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	f003 0320 	and.w	r3, r3, #32
 8002bca:	2b20      	cmp	r3, #32
 8002bcc:	d10e      	bne.n	8002bec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f003 0320 	and.w	r3, r3, #32
 8002bd8:	2b20      	cmp	r3, #32
 8002bda:	d107      	bne.n	8002bec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f06f 0220 	mvn.w	r2, #32
 8002be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 fa4e 	bl	8003088 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bec:	bf00      	nop
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d101      	bne.n	8002c10 <HAL_TIM_ConfigClockSource+0x1c>
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	e0b4      	b.n	8002d7a <HAL_TIM_ConfigClockSource+0x186>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c48:	d03e      	beq.n	8002cc8 <HAL_TIM_ConfigClockSource+0xd4>
 8002c4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c4e:	f200 8087 	bhi.w	8002d60 <HAL_TIM_ConfigClockSource+0x16c>
 8002c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c56:	f000 8086 	beq.w	8002d66 <HAL_TIM_ConfigClockSource+0x172>
 8002c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c5e:	d87f      	bhi.n	8002d60 <HAL_TIM_ConfigClockSource+0x16c>
 8002c60:	2b70      	cmp	r3, #112	; 0x70
 8002c62:	d01a      	beq.n	8002c9a <HAL_TIM_ConfigClockSource+0xa6>
 8002c64:	2b70      	cmp	r3, #112	; 0x70
 8002c66:	d87b      	bhi.n	8002d60 <HAL_TIM_ConfigClockSource+0x16c>
 8002c68:	2b60      	cmp	r3, #96	; 0x60
 8002c6a:	d050      	beq.n	8002d0e <HAL_TIM_ConfigClockSource+0x11a>
 8002c6c:	2b60      	cmp	r3, #96	; 0x60
 8002c6e:	d877      	bhi.n	8002d60 <HAL_TIM_ConfigClockSource+0x16c>
 8002c70:	2b50      	cmp	r3, #80	; 0x50
 8002c72:	d03c      	beq.n	8002cee <HAL_TIM_ConfigClockSource+0xfa>
 8002c74:	2b50      	cmp	r3, #80	; 0x50
 8002c76:	d873      	bhi.n	8002d60 <HAL_TIM_ConfigClockSource+0x16c>
 8002c78:	2b40      	cmp	r3, #64	; 0x40
 8002c7a:	d058      	beq.n	8002d2e <HAL_TIM_ConfigClockSource+0x13a>
 8002c7c:	2b40      	cmp	r3, #64	; 0x40
 8002c7e:	d86f      	bhi.n	8002d60 <HAL_TIM_ConfigClockSource+0x16c>
 8002c80:	2b30      	cmp	r3, #48	; 0x30
 8002c82:	d064      	beq.n	8002d4e <HAL_TIM_ConfigClockSource+0x15a>
 8002c84:	2b30      	cmp	r3, #48	; 0x30
 8002c86:	d86b      	bhi.n	8002d60 <HAL_TIM_ConfigClockSource+0x16c>
 8002c88:	2b20      	cmp	r3, #32
 8002c8a:	d060      	beq.n	8002d4e <HAL_TIM_ConfigClockSource+0x15a>
 8002c8c:	2b20      	cmp	r3, #32
 8002c8e:	d867      	bhi.n	8002d60 <HAL_TIM_ConfigClockSource+0x16c>
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d05c      	beq.n	8002d4e <HAL_TIM_ConfigClockSource+0x15a>
 8002c94:	2b10      	cmp	r3, #16
 8002c96:	d05a      	beq.n	8002d4e <HAL_TIM_ConfigClockSource+0x15a>
 8002c98:	e062      	b.n	8002d60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6818      	ldr	r0, [r3, #0]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	6899      	ldr	r1, [r3, #8]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	f000 f970 	bl	8002f8e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002cbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	609a      	str	r2, [r3, #8]
      break;
 8002cc6:	e04f      	b.n	8002d68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6818      	ldr	r0, [r3, #0]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	6899      	ldr	r1, [r3, #8]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f000 f959 	bl	8002f8e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cea:	609a      	str	r2, [r3, #8]
      break;
 8002cec:	e03c      	b.n	8002d68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6818      	ldr	r0, [r3, #0]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	6859      	ldr	r1, [r3, #4]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	f000 f8d0 	bl	8002ea0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2150      	movs	r1, #80	; 0x50
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 f927 	bl	8002f5a <TIM_ITRx_SetConfig>
      break;
 8002d0c:	e02c      	b.n	8002d68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6818      	ldr	r0, [r3, #0]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	6859      	ldr	r1, [r3, #4]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	f000 f8ee 	bl	8002efc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2160      	movs	r1, #96	; 0x60
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 f917 	bl	8002f5a <TIM_ITRx_SetConfig>
      break;
 8002d2c:	e01c      	b.n	8002d68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6818      	ldr	r0, [r3, #0]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	6859      	ldr	r1, [r3, #4]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	f000 f8b0 	bl	8002ea0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2140      	movs	r1, #64	; 0x40
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 f907 	bl	8002f5a <TIM_ITRx_SetConfig>
      break;
 8002d4c:	e00c      	b.n	8002d68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4619      	mov	r1, r3
 8002d58:	4610      	mov	r0, r2
 8002d5a:	f000 f8fe 	bl	8002f5a <TIM_ITRx_SetConfig>
      break;
 8002d5e:	e003      	b.n	8002d68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	73fb      	strb	r3, [r7, #15]
      break;
 8002d64:	e000      	b.n	8002d68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr

08002d94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr

08002da6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr

08002db8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bc80      	pop	{r7}
 8002dc8:	4770      	bx	lr

08002dca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr

08002ddc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a29      	ldr	r2, [pc, #164]	; (8002e94 <TIM_Base_SetConfig+0xb8>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d00b      	beq.n	8002e0c <TIM_Base_SetConfig+0x30>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dfa:	d007      	beq.n	8002e0c <TIM_Base_SetConfig+0x30>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a26      	ldr	r2, [pc, #152]	; (8002e98 <TIM_Base_SetConfig+0xbc>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d003      	beq.n	8002e0c <TIM_Base_SetConfig+0x30>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a25      	ldr	r2, [pc, #148]	; (8002e9c <TIM_Base_SetConfig+0xc0>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d108      	bne.n	8002e1e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a1c      	ldr	r2, [pc, #112]	; (8002e94 <TIM_Base_SetConfig+0xb8>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d00b      	beq.n	8002e3e <TIM_Base_SetConfig+0x62>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e2c:	d007      	beq.n	8002e3e <TIM_Base_SetConfig+0x62>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a19      	ldr	r2, [pc, #100]	; (8002e98 <TIM_Base_SetConfig+0xbc>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d003      	beq.n	8002e3e <TIM_Base_SetConfig+0x62>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a18      	ldr	r2, [pc, #96]	; (8002e9c <TIM_Base_SetConfig+0xc0>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d108      	bne.n	8002e50 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a07      	ldr	r2, [pc, #28]	; (8002e94 <TIM_Base_SetConfig+0xb8>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d103      	bne.n	8002e84 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	691a      	ldr	r2, [r3, #16]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	615a      	str	r2, [r3, #20]
}
 8002e8a:	bf00      	nop
 8002e8c:	3714      	adds	r7, #20
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr
 8002e94:	40012c00 	.word	0x40012c00
 8002e98:	40000400 	.word	0x40000400
 8002e9c:	40000800 	.word	0x40000800

08002ea0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b087      	sub	sp, #28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	f023 0201 	bic.w	r2, r3, #1
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	011b      	lsls	r3, r3, #4
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	f023 030a 	bic.w	r3, r3, #10
 8002edc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	621a      	str	r2, [r3, #32]
}
 8002ef2:	bf00      	nop
 8002ef4:	371c      	adds	r7, #28
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bc80      	pop	{r7}
 8002efa:	4770      	bx	lr

08002efc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b087      	sub	sp, #28
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	f023 0210 	bic.w	r2, r3, #16
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	031b      	lsls	r3, r3, #12
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f38:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	011b      	lsls	r3, r3, #4
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	621a      	str	r2, [r3, #32]
}
 8002f50:	bf00      	nop
 8002f52:	371c      	adds	r7, #28
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bc80      	pop	{r7}
 8002f58:	4770      	bx	lr

08002f5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b085      	sub	sp, #20
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
 8002f62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	f043 0307 	orr.w	r3, r3, #7
 8002f7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	609a      	str	r2, [r3, #8]
}
 8002f84:	bf00      	nop
 8002f86:	3714      	adds	r7, #20
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bc80      	pop	{r7}
 8002f8c:	4770      	bx	lr

08002f8e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b087      	sub	sp, #28
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	60f8      	str	r0, [r7, #12]
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	607a      	str	r2, [r7, #4]
 8002f9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fa8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	021a      	lsls	r2, r3, #8
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	609a      	str	r2, [r3, #8]
}
 8002fc2:	bf00      	nop
 8002fc4:	371c      	adds	r7, #28
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr

08002fcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d101      	bne.n	8002fe4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	e046      	b.n	8003072 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2202      	movs	r2, #2
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800300a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	4313      	orrs	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a16      	ldr	r2, [pc, #88]	; (800307c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d00e      	beq.n	8003046 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003030:	d009      	beq.n	8003046 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a12      	ldr	r2, [pc, #72]	; (8003080 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d004      	beq.n	8003046 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a10      	ldr	r2, [pc, #64]	; (8003084 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d10c      	bne.n	8003060 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800304c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	4313      	orrs	r3, r2
 8003056:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3714      	adds	r7, #20
 8003076:	46bd      	mov	sp, r7
 8003078:	bc80      	pop	{r7}
 800307a:	4770      	bx	lr
 800307c:	40012c00 	.word	0x40012c00
 8003080:	40000400 	.word	0x40000400
 8003084:	40000800 	.word	0x40000800

08003088 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	bc80      	pop	{r7}
 8003098:	4770      	bx	lr

0800309a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800309a:	b480      	push	{r7}
 800309c:	b083      	sub	sp, #12
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr

080030ac <__libc_init_array>:
 80030ac:	b570      	push	{r4, r5, r6, lr}
 80030ae:	2600      	movs	r6, #0
 80030b0:	4d0c      	ldr	r5, [pc, #48]	; (80030e4 <__libc_init_array+0x38>)
 80030b2:	4c0d      	ldr	r4, [pc, #52]	; (80030e8 <__libc_init_array+0x3c>)
 80030b4:	1b64      	subs	r4, r4, r5
 80030b6:	10a4      	asrs	r4, r4, #2
 80030b8:	42a6      	cmp	r6, r4
 80030ba:	d109      	bne.n	80030d0 <__libc_init_array+0x24>
 80030bc:	f000 f822 	bl	8003104 <_init>
 80030c0:	2600      	movs	r6, #0
 80030c2:	4d0a      	ldr	r5, [pc, #40]	; (80030ec <__libc_init_array+0x40>)
 80030c4:	4c0a      	ldr	r4, [pc, #40]	; (80030f0 <__libc_init_array+0x44>)
 80030c6:	1b64      	subs	r4, r4, r5
 80030c8:	10a4      	asrs	r4, r4, #2
 80030ca:	42a6      	cmp	r6, r4
 80030cc:	d105      	bne.n	80030da <__libc_init_array+0x2e>
 80030ce:	bd70      	pop	{r4, r5, r6, pc}
 80030d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80030d4:	4798      	blx	r3
 80030d6:	3601      	adds	r6, #1
 80030d8:	e7ee      	b.n	80030b8 <__libc_init_array+0xc>
 80030da:	f855 3b04 	ldr.w	r3, [r5], #4
 80030de:	4798      	blx	r3
 80030e0:	3601      	adds	r6, #1
 80030e2:	e7f2      	b.n	80030ca <__libc_init_array+0x1e>
 80030e4:	08005a28 	.word	0x08005a28
 80030e8:	08005a28 	.word	0x08005a28
 80030ec:	08005a28 	.word	0x08005a28
 80030f0:	08005a2c 	.word	0x08005a2c

080030f4 <memset>:
 80030f4:	4603      	mov	r3, r0
 80030f6:	4402      	add	r2, r0
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d100      	bne.n	80030fe <memset+0xa>
 80030fc:	4770      	bx	lr
 80030fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003102:	e7f9      	b.n	80030f8 <memset+0x4>

08003104 <_init>:
 8003104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003106:	bf00      	nop
 8003108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800310a:	bc08      	pop	{r3}
 800310c:	469e      	mov	lr, r3
 800310e:	4770      	bx	lr

08003110 <_fini>:
 8003110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003112:	bf00      	nop
 8003114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003116:	bc08      	pop	{r3}
 8003118:	469e      	mov	lr, r3
 800311a:	4770      	bx	lr
