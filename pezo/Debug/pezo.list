
pezo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008824  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001234  08008938  08008938  00018938  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b6c  08009b6c  00020358  2**0
                  CONTENTS
  4 .ARM          00000000  08009b6c  08009b6c  00020358  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009b6c  08009b6c  00020358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b6c  08009b6c  00019b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b70  08009b70  00019b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  08009b74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013c8  20000358  08009ecc  00020358  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001720  08009ecc  00021720  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020358  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021c95  00000000  00000000  00020381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005127  00000000  00000000  00042016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  00047140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000068ee  00000000  00000000  00048370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00022bdf  00000000  00000000  0004ec5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000941f2  00000000  00000000  0007183d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00105a2f  2**0
                  CONTENTS, READONLY
 19 .debug_loc    00014a17  00000000  00000000  00105a7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 000025e8  00000000  00000000  0011a498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000047ac  00000000  00000000  0011ca80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000358 	.word	0x20000358
 800012c:	00000000 	.word	0x00000000
 8000130:	0800891c 	.word	0x0800891c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000035c 	.word	0x2000035c
 800014c:	0800891c 	.word	0x0800891c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <Error>:
  * @retval None
  */

void Error(void)
{
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a8e:	4801      	ldr	r0, [pc, #4]	; (8000a94 <Error+0xc>)
 8000a90:	f002 b926 	b.w	8002ce0 <HAL_GPIO_WritePin>
 8000a94:	40011000 	.word	0x40011000

08000a98 <I2Cx_ReadData>:

/**
  * @}
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8000a98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	HAL_StatusTypeDef status = HAL_OK;
	uint8_t value = 0;
 8000a9a:	2300      	movs	r3, #0
{
 8000a9c:	460a      	mov	r2, r1
	uint8_t value = 0;
 8000a9e:	f88d 3017 	strb.w	r3, [sp, #23]
	status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 8000aa2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8000aac:	f10d 0117 	add.w	r1, sp, #23
 8000ab0:	9100      	str	r1, [sp, #0]
 8000ab2:	4601      	mov	r1, r0
 8000ab4:	4805      	ldr	r0, [pc, #20]	; (8000acc <I2Cx_ReadData+0x34>)
 8000ab6:	f002 fc4d 	bl	8003354 <HAL_I2C_Mem_Read>
	if(status != HAL_OK) Error();
 8000aba:	b108      	cbz	r0, 8000ac0 <I2Cx_ReadData+0x28>
 8000abc:	f7ff ffe4 	bl	8000a88 <Error>
	return value;
}
 8000ac0:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8000ac4:	b007      	add	sp, #28
 8000ac6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000aca:	bf00      	nop
 8000acc:	2000043c 	.word	0x2000043c

08000ad0 <LSM303DLHC_AccReadXYZ>:
{
 8000ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if(status != HAL_OK) Error();
}
//--------------------------------------------
uint8_t Accel_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
	return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8000ad4:	2123      	movs	r1, #35	; 0x23
{
 8000ad6:	4605      	mov	r5, r0
	return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8000ad8:	2032      	movs	r0, #50	; 0x32
 8000ada:	f7ff ffdd 	bl	8000a98 <I2Cx_ReadData>
 8000ade:	2124      	movs	r1, #36	; 0x24
 8000ae0:	4606      	mov	r6, r0
 8000ae2:	2032      	movs	r0, #50	; 0x32
 8000ae4:	f7ff ffd8 	bl	8000a98 <I2Cx_ReadData>
 8000ae8:	2128      	movs	r1, #40	; 0x28
 8000aea:	2032      	movs	r0, #50	; 0x32
 8000aec:	f7ff ffd4 	bl	8000a98 <I2Cx_ReadData>
 8000af0:	2129      	movs	r1, #41	; 0x29
  buffer[0] = Accel_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A);
 8000af2:	b247      	sxtb	r7, r0
	return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8000af4:	2032      	movs	r0, #50	; 0x32
 8000af6:	f7ff ffcf 	bl	8000a98 <I2Cx_ReadData>
 8000afa:	212a      	movs	r1, #42	; 0x2a
  buffer[1] = Accel_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8000afc:	fa4f f980 	sxtb.w	r9, r0
	return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8000b00:	2032      	movs	r0, #50	; 0x32
 8000b02:	f7ff ffc9 	bl	8000a98 <I2Cx_ReadData>
 8000b06:	212b      	movs	r1, #43	; 0x2b
  buffer[2] = Accel_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8000b08:	b244      	sxtb	r4, r0
	return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8000b0a:	2032      	movs	r0, #50	; 0x32
 8000b0c:	f7ff ffc4 	bl	8000a98 <I2Cx_ReadData>
 8000b10:	212c      	movs	r1, #44	; 0x2c
  buffer[3] = Accel_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8000b12:	fa4f fa80 	sxtb.w	sl, r0
	return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8000b16:	2032      	movs	r0, #50	; 0x32
 8000b18:	f7ff ffbe 	bl	8000a98 <I2Cx_ReadData>
 8000b1c:	212d      	movs	r1, #45	; 0x2d
  buffer[4] = Accel_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8000b1e:	fa4f f880 	sxtb.w	r8, r0
	return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8000b22:	2032      	movs	r0, #50	; 0x32
 8000b24:	f7ff ffb8 	bl	8000a98 <I2Cx_ReadData>
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB))
 8000b28:	0672      	lsls	r2, r6, #25
  buffer[5] = Accel_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 8000b2a:	b243      	sxtb	r3, r0
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB))
 8000b2c:	d51a      	bpl.n	8000b64 <LSM303DLHC_AccReadXYZ+0x94>
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8000b2e:	eb09 2707 	add.w	r7, r9, r7, lsl #8
 8000b32:	eb0a 2404 	add.w	r4, sl, r4, lsl #8
 8000b36:	b23f      	sxth	r7, r7
 8000b38:	b224      	sxth	r4, r4
 8000b3a:	eb03 2308 	add.w	r3, r3, r8, lsl #8
 8000b3e:	f006 0030 	and.w	r0, r6, #48	; 0x30
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8000b42:	2820      	cmp	r0, #32
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8000b44:	b21a      	sxth	r2, r3
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8000b46:	d016      	beq.n	8000b76 <LSM303DLHC_AccReadXYZ+0xa6>
 8000b48:	2830      	cmp	r0, #48	; 0x30
 8000b4a:	d016      	beq.n	8000b7a <LSM303DLHC_AccReadXYZ+0xaa>
 8000b4c:	2810      	cmp	r0, #16
 8000b4e:	bf14      	ite	ne
 8000b50:	2301      	movne	r3, #1
 8000b52:	2302      	moveq	r3, #2
    pData[i]=(pnRawData[i] * sensitivity);
 8000b54:	435f      	muls	r7, r3
 8000b56:	435c      	muls	r4, r3
 8000b58:	4353      	muls	r3, r2
 8000b5a:	802f      	strh	r7, [r5, #0]
 8000b5c:	806c      	strh	r4, [r5, #2]
 8000b5e:	80ab      	strh	r3, [r5, #4]
}
 8000b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8000b64:	eb07 2709 	add.w	r7, r7, r9, lsl #8
 8000b68:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 8000b6c:	b23f      	sxth	r7, r7
 8000b6e:	b224      	sxth	r4, r4
 8000b70:	eb08 2303 	add.w	r3, r8, r3, lsl #8
 8000b74:	e7e3      	b.n	8000b3e <LSM303DLHC_AccReadXYZ+0x6e>
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 8000b76:	2304      	movs	r3, #4
 8000b78:	e7ec      	b.n	8000b54 <LSM303DLHC_AccReadXYZ+0x84>
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 8000b7a:	230c      	movs	r3, #12
 8000b7c:	e7ea      	b.n	8000b54 <LSM303DLHC_AccReadXYZ+0x84>
	...

08000b80 <I2Cx_WriteData>:
{
 8000b80:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	status = HAL_I2C_Mem_Write(&hi2c1, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x10000);
 8000b82:	2301      	movs	r3, #1
{
 8000b84:	f88d 2017 	strb.w	r2, [sp, #23]
	status = HAL_I2C_Mem_Write(&hi2c1, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x10000);
 8000b88:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b8c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8000b90:	f10d 0217 	add.w	r2, sp, #23
 8000b94:	9200      	str	r2, [sp, #0]
 8000b96:	460a      	mov	r2, r1
 8000b98:	4601      	mov	r1, r0
 8000b9a:	4804      	ldr	r0, [pc, #16]	; (8000bac <I2Cx_WriteData+0x2c>)
 8000b9c:	f002 fb4a 	bl	8003234 <HAL_I2C_Mem_Write>
	if(status != HAL_OK) Error();
 8000ba0:	b108      	cbz	r0, 8000ba6 <I2Cx_WriteData+0x26>
 8000ba2:	f7ff ff71 	bl	8000a88 <Error>
}
 8000ba6:	b007      	add	sp, #28
 8000ba8:	f85d fb04 	ldr.w	pc, [sp], #4
 8000bac:	2000043c 	.word	0x2000043c

08000bb0 <LSM303DLHC_AccInit>:
{
 8000bb0:	b508      	push	{r3, lr}
}
//--------------------------------------------
void Accel_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
	I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 8000bb2:	b2c2      	uxtb	r2, r0
 8000bb4:	2120      	movs	r1, #32
 8000bb6:	2032      	movs	r0, #50	; 0x32
 8000bb8:	f7ff ffe2 	bl	8000b80 <I2Cx_WriteData>
}
 8000bbc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2123      	movs	r1, #35	; 0x23
 8000bc4:	2032      	movs	r0, #50	; 0x32
 8000bc6:	f7ff bfdb 	b.w	8000b80 <I2Cx_WriteData>

08000bca <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bca:	b510      	push	{r4, lr}
 8000bcc:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bce:	2214      	movs	r2, #20
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	a80c      	add	r0, sp, #48	; 0x30
 8000bd4:	f004 ffce 	bl	8005b74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd8:	2214      	movs	r2, #20
 8000bda:	2100      	movs	r1, #0
 8000bdc:	eb0d 0002 	add.w	r0, sp, r2
 8000be0:	f004 ffc8 	bl	8005b74 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000be4:	2210      	movs	r2, #16
 8000be6:	2100      	movs	r1, #0
 8000be8:	a801      	add	r0, sp, #4
 8000bea:	f004 ffc3 	bl	8005b74 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bee:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bf0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bf4:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bf6:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bfa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bfe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c02:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c04:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c06:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c08:	f003 fb74 	bl	80042f4 <HAL_RCC_OscConfig>
 8000c0c:	b108      	cbz	r0, 8000c12 <SystemClock_Config+0x48>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c0e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <SystemClock_Config+0x46>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c12:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c14:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c18:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c1c:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c1e:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c22:	4621      	mov	r1, r4
 8000c24:	a805      	add	r0, sp, #20
 8000c26:	f003 fd2d 	bl	8004684 <HAL_RCC_ClockConfig>
 8000c2a:	b108      	cbz	r0, 8000c30 <SystemClock_Config+0x66>
 8000c2c:	b672      	cpsid	i
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <SystemClock_Config+0x64>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000c30:	2312      	movs	r3, #18
 8000c32:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000c34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000c38:	e9cd 3003 	strd	r3, r0, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c3c:	a801      	add	r0, sp, #4
 8000c3e:	f003 fdeb 	bl	8004818 <HAL_RCCEx_PeriphCLKConfig>
 8000c42:	b108      	cbz	r0, 8000c48 <SystemClock_Config+0x7e>
 8000c44:	b672      	cpsid	i
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <SystemClock_Config+0x7c>
  HAL_RCC_EnableCSS();
 8000c48:	f003 fcf0 	bl	800462c <HAL_RCC_EnableCSS>
}
 8000c4c:	b014      	add	sp, #80	; 0x50
 8000c4e:	bd10      	pop	{r4, pc}

08000c50 <main>:
{
 8000c50:	b580      	push	{r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c52:	4d9a      	ldr	r5, [pc, #616]	; (8000ebc <main+0x26c>)
{
 8000c54:	b08e      	sub	sp, #56	; 0x38
  HAL_Init();
 8000c56:	f001 fc7b 	bl	8002550 <HAL_Init>
  SystemClock_Config();
 8000c5a:	f7ff ffb6 	bl	8000bca <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5e:	2210      	movs	r2, #16
 8000c60:	2100      	movs	r1, #0
 8000c62:	a80a      	add	r0, sp, #40	; 0x28
 8000c64:	f004 ff86 	bl	8005b74 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c68:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6c:	f043 0310 	orr.w	r3, r3, #16
 8000c70:	61ab      	str	r3, [r5, #24]
 8000c72:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c78:	f003 0310 	and.w	r3, r3, #16
 8000c7c:	9306      	str	r3, [sp, #24]
 8000c7e:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c80:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c82:	488f      	ldr	r0, [pc, #572]	; (8000ec0 <main+0x270>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c84:	f043 0320 	orr.w	r3, r3, #32
 8000c88:	61ab      	str	r3, [r5, #24]
 8000c8a:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c8e:	f003 0320 	and.w	r3, r3, #32
 8000c92:	9307      	str	r3, [sp, #28]
 8000c94:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c98:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	f043 0304 	orr.w	r3, r3, #4
 8000c9e:	61ab      	str	r3, [r5, #24]
 8000ca0:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2702      	movs	r7, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca4:	f003 0304 	and.w	r3, r3, #4
 8000ca8:	9308      	str	r3, [sp, #32]
 8000caa:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cac:	69ab      	ldr	r3, [r5, #24]
 8000cae:	f043 0308 	orr.w	r3, r3, #8
 8000cb2:	61ab      	str	r3, [r5, #24]
 8000cb4:	69ab      	ldr	r3, [r5, #24]
 8000cb6:	f003 0308 	and.w	r3, r3, #8
 8000cba:	9309      	str	r3, [sp, #36]	; 0x24
 8000cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000cbe:	f002 f80f 	bl	8002ce0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(modem_power_GPIO_Port, modem_power_Pin, GPIO_PIN_RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	487f      	ldr	r0, [pc, #508]	; (8000ec4 <main+0x274>)
 8000cc8:	f002 f80a 	bl	8002ce0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, reboot_Pin|ST7735_BL_Pin|ST7735_CS_Pin|ST7735_DC_Pin
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f640 01b8 	movw	r1, #2232	; 0x8b8
 8000cd2:	487d      	ldr	r0, [pc, #500]	; (8000ec8 <main+0x278>)
 8000cd4:	f002 f804 	bl	8002ce0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000cdc:	4878      	ldr	r0, [pc, #480]	; (8000ec0 <main+0x270>)
 8000cde:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce0:	e9cd 360a 	strd	r3, r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	e9cd 470c 	strd	r4, r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000ce8:	f001 ff20 	bl	8002b2c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000cec:	2311      	movs	r3, #17
  HAL_GPIO_Init(modem_power_GPIO_Port, &GPIO_InitStruct);
 8000cee:	4875      	ldr	r0, [pc, #468]	; (8000ec4 <main+0x274>)
 8000cf0:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pin = modem_power_Pin;
 8000cf6:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	970d      	str	r7, [sp, #52]	; 0x34
  HAL_GPIO_Init(modem_power_GPIO_Port, &GPIO_InitStruct);
 8000cfa:	f001 ff17 	bl	8002b2c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = reboot_Pin|ST7735_BL_Pin|ST7735_CS_Pin|ST7735_DC_Pin
 8000cfe:	f640 03b8 	movw	r3, #2232	; 0x8b8
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d02:	4871      	ldr	r0, [pc, #452]	; (8000ec8 <main+0x278>)
 8000d04:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d06:	e9cd 360a 	strd	r3, r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	e9cd 470c 	strd	r4, r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0e:	f001 ff0d 	bl	8002b2c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = int1_Pin|int2_Pin|dry_Pin;
 8000d12:	f44f 4360 	mov.w	r3, #57344	; 0xe000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d16:	486c      	ldr	r0, [pc, #432]	; (8000ec8 <main+0x278>)
 8000d18:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1a:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d20:	f001 ff04 	bl	8002b2c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d24:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000d26:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d28:	4333      	orrs	r3, r6
 8000d2a:	616b      	str	r3, [r5, #20]
 8000d2c:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000d2e:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d30:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000d32:	200e      	movs	r0, #14
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d34:	9305      	str	r3, [sp, #20]
 8000d36:	9b05      	ldr	r3, [sp, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000d38:	f001 fd74 	bl	8002824 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000d3c:	200e      	movs	r0, #14
 8000d3e:	f001 fda3 	bl	8002888 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000d42:	4622      	mov	r2, r4
 8000d44:	4621      	mov	r1, r4
 8000d46:	200f      	movs	r0, #15
 8000d48:	f001 fd6c 	bl	8002824 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000d4c:	200f      	movs	r0, #15
 8000d4e:	f001 fd9b 	bl	8002888 <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 8000d52:	4d5e      	ldr	r5, [pc, #376]	; (8000ecc <main+0x27c>)
 8000d54:	4b5e      	ldr	r3, [pc, #376]	; (8000ed0 <main+0x280>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d56:	4628      	mov	r0, r5
  hadc1.Instance = ADC1;
 8000d58:	602b      	str	r3, [r5, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d5a:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d5e:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 8000d62:	940c      	str	r4, [sp, #48]	; 0x30
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d64:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d66:	732c      	strb	r4, [r5, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d68:	752c      	strb	r4, [r5, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d6a:	61eb      	str	r3, [r5, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d6c:	606c      	str	r4, [r5, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000d6e:	612e      	str	r6, [r5, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d70:	f001 fcc8 	bl	8002704 <HAL_ADC_Init>
 8000d74:	b108      	cbz	r0, 8000d7a <main+0x12a>
 8000d76:	b672      	cpsid	i
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <main+0x128>
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d7a:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d7c:	a90a      	add	r1, sp, #40	; 0x28
 8000d7e:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d80:	e9cd 660a 	strd	r6, r6, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d84:	f001 fc1a 	bl	80025bc <HAL_ADC_ConfigChannel>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	b108      	cbz	r0, 8000d90 <main+0x140>
 8000d8c:	b672      	cpsid	i
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <main+0x13e>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d90:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi1.Instance = SPI1;
 8000d94:	484f      	ldr	r0, [pc, #316]	; (8000ed4 <main+0x284>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d96:	4e50      	ldr	r6, [pc, #320]	; (8000ed8 <main+0x288>)
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d98:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d9c:	e9c0 6200 	strd	r6, r2, [r0]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000da0:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000da4:	2208      	movs	r2, #8
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000da6:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000daa:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000dac:	f44f 7700 	mov.w	r7, #512	; 0x200
  hspi1.Init.CRCPolynomial = 10;
 8000db0:	230a      	movs	r3, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000db2:	e9c0 7206 	strd	r7, r2, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 8000db6:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000db8:	f003 fe0c 	bl	80049d4 <HAL_SPI_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	b108      	cbz	r0, 8000dc4 <main+0x174>
 8000dc0:	b672      	cpsid	i
  while (1)
 8000dc2:	e7fe      	b.n	8000dc2 <main+0x172>
  huart1.Init.BaudRate = 115200;
 8000dc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart1.Instance = USART1;
 8000dc8:	4844      	ldr	r0, [pc, #272]	; (8000edc <main+0x28c>)
  huart1.Init.BaudRate = 115200;
 8000dca:	4d45      	ldr	r5, [pc, #276]	; (8000ee0 <main+0x290>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dcc:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.BaudRate = 115200;
 8000dd0:	e9c0 5200 	strd	r5, r2, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dd4:	220c      	movs	r2, #12
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dd6:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd8:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ddc:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dde:	f003 ff6d 	bl	8004cbc <HAL_UART_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	b108      	cbz	r0, 8000dea <main+0x19a>
 8000de6:	b672      	cpsid	i
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <main+0x198>
  hi2c1.Instance = I2C1;
 8000dea:	483e      	ldr	r0, [pc, #248]	; (8000ee4 <main+0x294>)
  hi2c1.Init.ClockSpeed = 100000;
 8000dec:	4c3e      	ldr	r4, [pc, #248]	; (8000ee8 <main+0x298>)
 8000dee:	4a3f      	ldr	r2, [pc, #252]	; (8000eec <main+0x29c>)
  hi2c1.Init.OwnAddress1 = 0;
 8000df0:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8000df4:	e9c0 4200 	strd	r4, r2, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000df8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dfc:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e00:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e04:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e06:	f002 f96d 	bl	80030e4 <HAL_I2C_Init>
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	b108      	cbz	r0, 8000e12 <main+0x1c2>
 8000e0e:	b672      	cpsid	i
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <main+0x1c0>
  MX_USB_DEVICE_Init();
 8000e12:	f000 fc4f 	bl	80016b4 <MX_USB_DEVICE_Init>
  ST7735_Init();
 8000e16:	f000 f901 	bl	800101c <ST7735_Init>
  ST7735_Backlight_On();
 8000e1a:	f000 fa3f 	bl	800129c <ST7735_Backlight_On>
  ST7735_FillScreen(ST7735_BLACK);
 8000e1e:	4620      	mov	r0, r4
 8000e20:	f000 fa2a 	bl	8001278 <ST7735_FillScreen>
  HAL_Delay(1000);
 8000e24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e28:	f001 fbb6 	bl	8002598 <HAL_Delay>
  ST7735_SetRotation(3);
 8000e2c:	2003      	movs	r0, #3
 8000e2e:	f000 fa3d 	bl	80012ac <ST7735_SetRotation>
  LSM303DLHC_AccInit(0x1097);
 8000e32:	f241 0097 	movw	r0, #4247	; 0x1097
 8000e36:	f7ff febb 	bl	8000bb0 <LSM303DLHC_AccInit>
	LSM303DLHC_AccReadXYZ(buffer);
 8000e3a:	4f2d      	ldr	r7, [pc, #180]	; (8000ef0 <main+0x2a0>)
	xval=buffer[0];
 8000e3c:	4e2d      	ldr	r6, [pc, #180]	; (8000ef4 <main+0x2a4>)
	sprintf(msg,"X:%06d Y:%06d Z:%06d", xval, yval, zval);
 8000e3e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8000ef8 <main+0x2a8>
	LSM303DLHC_AccReadXYZ(buffer);
 8000e42:	482b      	ldr	r0, [pc, #172]	; (8000ef0 <main+0x2a0>)
 8000e44:	f7ff fe44 	bl	8000ad0 <LSM303DLHC_AccReadXYZ>
	yval=buffer[1];
 8000e48:	4d2c      	ldr	r5, [pc, #176]	; (8000efc <main+0x2ac>)
	xval=buffer[0];
 8000e4a:	f9b7 2000 	ldrsh.w	r2, [r7]
	yval=buffer[1];
 8000e4e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
	zval=buffer[2];
 8000e52:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000e56:	4c2a      	ldr	r4, [pc, #168]	; (8000f00 <main+0x2b0>)
	xval=buffer[0];
 8000e58:	8032      	strh	r2, [r6, #0]
	yval=buffer[1];
 8000e5a:	802b      	strh	r3, [r5, #0]
	zval=buffer[2];
 8000e5c:	8021      	strh	r1, [r4, #0]
	sprintf(msg,"X:%06d Y:%06d Z:%06d", xval, yval, zval);
 8000e5e:	4640      	mov	r0, r8
 8000e60:	9100      	str	r1, [sp, #0]
 8000e62:	4928      	ldr	r1, [pc, #160]	; (8000f04 <main+0x2b4>)
 8000e64:	f005 faee 	bl	8006444 <siprintf>
	ST7735_DrawString(0, 0, msg, Font_11x18, ST7735_YELLOW, ST7735_BLUE);
 8000e68:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000e6c:	211f      	movs	r1, #31
 8000e6e:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8000e72:	2100      	movs	r1, #0
 8000e74:	4b24      	ldr	r3, [pc, #144]	; (8000f08 <main+0x2b8>)
 8000e76:	4608      	mov	r0, r1
 8000e78:	685a      	ldr	r2, [r3, #4]
 8000e7a:	9200      	str	r2, [sp, #0]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4642      	mov	r2, r8
 8000e80:	f000 f91e 	bl	80010c0 <ST7735_DrawString>
	buf[0]=0x11;
 8000e84:	2311      	movs	r3, #17
 8000e86:	4821      	ldr	r0, [pc, #132]	; (8000f0c <main+0x2bc>)
	buf[2]=(uint8_t)(xval>>8);
 8000e88:	f996 2001 	ldrsb.w	r2, [r6, #1]
	buf[0]=0x11;
 8000e8c:	7003      	strb	r3, [r0, #0]
	buf[1]=0x55;
 8000e8e:	2355      	movs	r3, #85	; 0x55
 8000e90:	7043      	strb	r3, [r0, #1]
	buf[2]=(uint8_t)(xval>>8);
 8000e92:	f9b6 3000 	ldrsh.w	r3, [r6]
 8000e96:	7082      	strb	r2, [r0, #2]
	buf[3]=(uint8_t)xval;
 8000e98:	70c3      	strb	r3, [r0, #3]
	buf[4]=(uint8_t)(yval>>8);
 8000e9a:	f995 2001 	ldrsb.w	r2, [r5, #1]
 8000e9e:	f9b5 3000 	ldrsh.w	r3, [r5]
 8000ea2:	7102      	strb	r2, [r0, #4]
	buf[5]=(uint8_t)yval;
 8000ea4:	7143      	strb	r3, [r0, #5]
	buf[6]=(uint8_t)(zval>>8);
 8000ea6:	f994 2001 	ldrsb.w	r2, [r4, #1]
 8000eaa:	f9b4 3000 	ldrsh.w	r3, [r4]
	CDC_Transmit_FS(buf, 8);
 8000eae:	2108      	movs	r1, #8
	buf[6]=(uint8_t)(zval>>8);
 8000eb0:	7182      	strb	r2, [r0, #6]
	buf[7]=(uint8_t)zval;
 8000eb2:	71c3      	strb	r3, [r0, #7]
	CDC_Transmit_FS(buf, 8);
 8000eb4:	f000 fdc2 	bl	8001a3c <CDC_Transmit_FS>
  while (1)
 8000eb8:	e7c3      	b.n	8000e42 <main+0x1f2>
 8000eba:	bf00      	nop
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	40011000 	.word	0x40011000
 8000ec4:	40010800 	.word	0x40010800
 8000ec8:	40010c00 	.word	0x40010c00
 8000ecc:	20000384 	.word	0x20000384
 8000ed0:	40012400 	.word	0x40012400
 8000ed4:	20000490 	.word	0x20000490
 8000ed8:	40013000 	.word	0x40013000
 8000edc:	200004e8 	.word	0x200004e8
 8000ee0:	40013800 	.word	0x40013800
 8000ee4:	2000043c 	.word	0x2000043c
 8000ee8:	40005400 	.word	0x40005400
 8000eec:	000186a0 	.word	0x000186a0
 8000ef0:	2000037c 	.word	0x2000037c
 8000ef4:	20000558 	.word	0x20000558
 8000ef8:	20000530 	.word	0x20000530
 8000efc:	2000055a 	.word	0x2000055a
 8000f00:	2000055c 	.word	0x2000055c
 8000f04:	08009694 	.word	0x08009694
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	20000374 	.word	0x20000374

08000f10 <Error_Handler>:
 8000f10:	b672      	cpsid	i
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <Error_Handler+0x2>

08000f14 <ST7735_WriteCommand>:
	HAL_Delay(20);
	TFT_RES_H();
}

static void ST7735_WriteCommand(uint8_t cmd)
{
 8000f14:	b507      	push	{r0, r1, r2, lr}
	TFT_DC_C();
 8000f16:	2200      	movs	r2, #0
{
 8000f18:	f88d 0007 	strb.w	r0, [sp, #7]
	TFT_DC_C();
 8000f1c:	2120      	movs	r1, #32
 8000f1e:	4807      	ldr	r0, [pc, #28]	; (8000f3c <ST7735_WriteCommand+0x28>)
 8000f20:	f001 fede 	bl	8002ce0 <HAL_GPIO_WritePin>
#ifdef USE_SPI_DMA
	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, &cmd, sizeof(cmd));
	//while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
#else
	HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000f24:	f04f 33ff 	mov.w	r3, #4294967295
 8000f28:	2201      	movs	r2, #1
 8000f2a:	f10d 0107 	add.w	r1, sp, #7
 8000f2e:	4804      	ldr	r0, [pc, #16]	; (8000f40 <ST7735_WriteCommand+0x2c>)
 8000f30:	f003 fda8 	bl	8004a84 <HAL_SPI_Transmit>
#endif
}
 8000f34:	b003      	add	sp, #12
 8000f36:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f3a:	bf00      	nop
 8000f3c:	40010c00 	.word	0x40010c00
 8000f40:	20000490 	.word	0x20000490

08000f44 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8000f44:	b570      	push	{r4, r5, r6, lr}
 8000f46:	4604      	mov	r4, r0
 8000f48:	460d      	mov	r5, r1
	TFT_DC_D();
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	2120      	movs	r1, #32
 8000f4e:	4806      	ldr	r0, [pc, #24]	; (8000f68 <ST7735_WriteData+0x24>)
 8000f50:	f001 fec6 	bl	8002ce0 <HAL_GPIO_WritePin>
#ifdef USE_SPI_DMA
	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, buff, buff_size);
	//while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
#else
	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000f54:	4621      	mov	r1, r4
 8000f56:	b2aa      	uxth	r2, r5
 8000f58:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8000f5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000f60:	4802      	ldr	r0, [pc, #8]	; (8000f6c <ST7735_WriteData+0x28>)
 8000f62:	f003 bd8f 	b.w	8004a84 <HAL_SPI_Transmit>
 8000f66:	bf00      	nop
 8000f68:	40010c00 	.word	0x40010c00
 8000f6c:	20000490 	.word	0x20000490

08000f70 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr)
{
 8000f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000f72:	4605      	mov	r5, r0
 8000f74:	f815 6b01 	ldrb.w	r6, [r5], #1
    while(numCommands--)
 8000f78:	b906      	cbnz	r6, 8000f7c <ST7735_ExecuteCommandList+0xc>
            ms = *addr++;
            if(ms == 255) ms = 500;
            HAL_Delay(ms);
        }
    }
}
 8000f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ST7735_WriteCommand(cmd);
 8000f7c:	462c      	mov	r4, r5
 8000f7e:	f814 0b02 	ldrb.w	r0, [r4], #2
 8000f82:	f7ff ffc7 	bl	8000f14 <ST7735_WriteCommand>
        numArgs = *addr++;
 8000f86:	786d      	ldrb	r5, [r5, #1]
        if(numArgs)
 8000f88:	f015 077f 	ands.w	r7, r5, #127	; 0x7f
 8000f8c:	d004      	beq.n	8000f98 <ST7735_ExecuteCommandList+0x28>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000f8e:	4620      	mov	r0, r4
 8000f90:	4639      	mov	r1, r7
 8000f92:	f7ff ffd7 	bl	8000f44 <ST7735_WriteData>
            addr += numArgs;
 8000f96:	443c      	add	r4, r7
        if(ms)
 8000f98:	062b      	lsls	r3, r5, #24
 8000f9a:	d507      	bpl.n	8000fac <ST7735_ExecuteCommandList+0x3c>
            ms = *addr++;
 8000f9c:	f814 0b01 	ldrb.w	r0, [r4], #1
            if(ms == 255) ms = 500;
 8000fa0:	28ff      	cmp	r0, #255	; 0xff
            HAL_Delay(ms);
 8000fa2:	bf08      	it	eq
 8000fa4:	f44f 70fa 	moveq.w	r0, #500	; 0x1f4
 8000fa8:	f001 faf6 	bl	8002598 <HAL_Delay>
 8000fac:	3e01      	subs	r6, #1
            ms = *addr++;
 8000fae:	4625      	mov	r5, r4
 8000fb0:	b2f6      	uxtb	r6, r6
 8000fb2:	e7e1      	b.n	8000f78 <ST7735_ExecuteCommandList+0x8>

08000fb4 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8000fb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000fb6:	4616      	mov	r6, r2
 8000fb8:	4605      	mov	r5, r0
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000fba:	202a      	movs	r0, #42	; 0x2a
{
 8000fbc:	461f      	mov	r7, r3
 8000fbe:	460c      	mov	r4, r1
    ST7735_WriteCommand(ST7735_CASET);
 8000fc0:	f7ff ffa8 	bl	8000f14 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8000fc4:	4a13      	ldr	r2, [pc, #76]	; (8001014 <ST7735_SetAddressWindow+0x60>)
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	7811      	ldrb	r1, [r2, #0]
 8000fca:	f88d 3004 	strb.w	r3, [sp, #4]
 8000fce:	440d      	add	r5, r1
 8000fd0:	4431      	add	r1, r6
 8000fd2:	f88d 1007 	strb.w	r1, [sp, #7]
    ST7735_WriteData(data, sizeof(data));
 8000fd6:	2104      	movs	r1, #4
 8000fd8:	eb0d 0001 	add.w	r0, sp, r1
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8000fdc:	f88d 3006 	strb.w	r3, [sp, #6]
 8000fe0:	f88d 5005 	strb.w	r5, [sp, #5]
    ST7735_WriteData(data, sizeof(data));
 8000fe4:	f7ff ffae 	bl	8000f44 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000fe8:	202b      	movs	r0, #43	; 0x2b
 8000fea:	f7ff ff93 	bl	8000f14 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
    data[3] = y1 + _ystart;
    ST7735_WriteData(data, sizeof(data));
 8000fee:	2104      	movs	r1, #4
    data[1] = y0 + _ystart;
 8000ff0:	4b09      	ldr	r3, [pc, #36]	; (8001018 <ST7735_SetAddressWindow+0x64>)
    ST7735_WriteData(data, sizeof(data));
 8000ff2:	eb0d 0001 	add.w	r0, sp, r1
    data[1] = y0 + _ystart;
 8000ff6:	781a      	ldrb	r2, [r3, #0]
 8000ff8:	4414      	add	r4, r2
    data[3] = y1 + _ystart;
 8000ffa:	443a      	add	r2, r7
 8000ffc:	f88d 2007 	strb.w	r2, [sp, #7]
    data[1] = y0 + _ystart;
 8001000:	f88d 4005 	strb.w	r4, [sp, #5]
    ST7735_WriteData(data, sizeof(data));
 8001004:	f7ff ff9e 	bl	8000f44 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001008:	202c      	movs	r0, #44	; 0x2c
 800100a:	f7ff ff83 	bl	8000f14 <ST7735_WriteCommand>
}
 800100e:	b003      	add	sp, #12
 8001010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001012:	bf00      	nop
 8001014:	2000000c 	.word	0x2000000c
 8001018:	2000055f 	.word	0x2000055f

0800101c <ST7735_Init>:
        }
    }
}

void ST7735_Init()
{
 800101c:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101e:	2510      	movs	r5, #16
{
 8001020:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001022:	462a      	mov	r2, r5
 8001024:	2100      	movs	r1, #0
 8001026:	a802      	add	r0, sp, #8
 8001028:	f004 fda4 	bl	8005b74 <memset>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800102c:	4b1f      	ldr	r3, [pc, #124]	; (80010ac <ST7735_Init+0x90>)
	HAL_GPIO_WritePin(GPIOB, ST7735_RES_Pin|ST7735_DC_Pin|ST7735_CS_Pin|ST7735_BL_Pin, GPIO_PIN_RESET);
 800102e:	4c20      	ldr	r4, [pc, #128]	; (80010b0 <ST7735_Init+0x94>)
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001030:	699a      	ldr	r2, [r3, #24]
	HAL_GPIO_WritePin(GPIOB, ST7735_RES_Pin|ST7735_DC_Pin|ST7735_CS_Pin|ST7735_BL_Pin, GPIO_PIN_RESET);
 8001032:	4620      	mov	r0, r4
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001034:	f042 0208 	orr.w	r2, r2, #8
 8001038:	619a      	str	r2, [r3, #24]
 800103a:	699b      	ldr	r3, [r3, #24]
	HAL_GPIO_WritePin(GPIOB, ST7735_RES_Pin|ST7735_DC_Pin|ST7735_CS_Pin|ST7735_BL_Pin, GPIO_PIN_RESET);
 800103c:	2200      	movs	r2, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800103e:	f003 0308 	and.w	r3, r3, #8
 8001042:	9301      	str	r3, [sp, #4]
	HAL_GPIO_WritePin(GPIOB, ST7735_RES_Pin|ST7735_DC_Pin|ST7735_CS_Pin|ST7735_BL_Pin, GPIO_PIN_RESET);
 8001044:	21b8      	movs	r1, #184	; 0xb8
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001046:	2601      	movs	r6, #1
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001048:	9b01      	ldr	r3, [sp, #4]
	HAL_GPIO_WritePin(GPIOB, ST7735_RES_Pin|ST7735_DC_Pin|ST7735_CS_Pin|ST7735_BL_Pin, GPIO_PIN_RESET);
 800104a:	f001 fe49 	bl	8002ce0 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104e:	23b8      	movs	r3, #184	; 0xb8
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2700      	movs	r7, #0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001052:	e9cd 3602 	strd	r3, r6, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2302      	movs	r3, #2
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001058:	4620      	mov	r0, r4
 800105a:	a902      	add	r1, sp, #8
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105c:	e9cd 7304 	strd	r7, r3, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001060:	f001 fd64 	bl	8002b2c <HAL_GPIO_Init>
	ST7735_GPIO_Init();
	TFT_CS_L();
 8001064:	463a      	mov	r2, r7
 8001066:	4629      	mov	r1, r5
 8001068:	4620      	mov	r0, r4
 800106a:	f001 fe39 	bl	8002ce0 <HAL_GPIO_WritePin>
	TFT_RES_L();
 800106e:	463a      	mov	r2, r7
 8001070:	2180      	movs	r1, #128	; 0x80
 8001072:	4620      	mov	r0, r4
 8001074:	f001 fe34 	bl	8002ce0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001078:	2014      	movs	r0, #20
 800107a:	f001 fa8d 	bl	8002598 <HAL_Delay>
	TFT_RES_H();
 800107e:	4632      	mov	r2, r6
 8001080:	2180      	movs	r1, #128	; 0x80
 8001082:	4620      	mov	r0, r4
 8001084:	f001 fe2c 	bl	8002ce0 <HAL_GPIO_WritePin>
    ST7735_Reset();
    ST7735_ExecuteCommandList(init_cmds1);
 8001088:	480a      	ldr	r0, [pc, #40]	; (80010b4 <ST7735_Init+0x98>)
 800108a:	f7ff ff71 	bl	8000f70 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 800108e:	480a      	ldr	r0, [pc, #40]	; (80010b8 <ST7735_Init+0x9c>)
 8001090:	f7ff ff6e 	bl	8000f70 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8001094:	4809      	ldr	r0, [pc, #36]	; (80010bc <ST7735_Init+0xa0>)
 8001096:	f7ff ff6b 	bl	8000f70 <ST7735_ExecuteCommandList>
    TFT_CS_H();
 800109a:	4632      	mov	r2, r6
 800109c:	4629      	mov	r1, r5
 800109e:	4620      	mov	r0, r4
}
 80010a0:	b007      	add	sp, #28
 80010a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    TFT_CS_H();
 80010a6:	f001 be1b 	b.w	8002ce0 <HAL_GPIO_WritePin>
 80010aa:	bf00      	nop
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40010c00 	.word	0x40010c00
 80010b4:	080096a9 	.word	0x080096a9
 80010b8:	080096e4 	.word	0x080096e4
 80010bc:	080096f3 	.word	0x080096f3

080010c0 <ST7735_DrawString>:

    TFT_CS_H();
}

void ST7735_DrawString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 80010c0:	b082      	sub	sp, #8
 80010c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010c6:	4615      	mov	r5, r2
 80010c8:	b089      	sub	sp, #36	; 0x24
 80010ca:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 80010ce:	f8bd a058 	ldrh.w	sl, [sp, #88]	; 0x58
 80010d2:	9202      	str	r2, [sp, #8]
 80010d4:	4604      	mov	r4, r0
 80010d6:	460f      	mov	r7, r1
	TFT_CS_L();
 80010d8:	2200      	movs	r2, #0
 80010da:	2110      	movs	r1, #16
 80010dc:	4835      	ldr	r0, [pc, #212]	; (80011b4 <ST7735_DrawString+0xf4>)
{
 80010de:	9313      	str	r3, [sp, #76]	; 0x4c
 80010e0:	fa5f f883 	uxtb.w	r8, r3
 80010e4:	f3c3 2607 	ubfx	r6, r3, #8, #8
	TFT_CS_L();
 80010e8:	f001 fdfa 	bl	8002ce0 <HAL_GPIO_WritePin>
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80010ec:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80010f0:	9305      	str	r3, [sp, #20]
                uint8_t data[] = { color >> 8, color & 0xFF };
 80010f2:	9b02      	ldr	r3, [sp, #8]
 80010f4:	9501      	str	r5, [sp, #4]
 80010f6:	0a1b      	lsrs	r3, r3, #8
 80010f8:	9304      	str	r3, [sp, #16]

    while(*str)
 80010fa:	9b01      	ldr	r3, [sp, #4]
 80010fc:	f813 5b01 	ldrb.w	r5, [r3], #1
 8001100:	9301      	str	r3, [sp, #4]
 8001102:	b945      	cbnz	r5, 8001116 <ST7735_DrawString+0x56>

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
        x += font.width;
        str++;
    }
    TFT_CS_H();
 8001104:	2201      	movs	r2, #1
 8001106:	2110      	movs	r1, #16
 8001108:	482a      	ldr	r0, [pc, #168]	; (80011b4 <ST7735_DrawString+0xf4>)
}
 800110a:	b009      	add	sp, #36	; 0x24
 800110c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001110:	b002      	add	sp, #8
    TFT_CS_H();
 8001112:	f001 bde5 	b.w	8002ce0 <HAL_GPIO_WritePin>
        if(x + font.width >= _width)
 8001116:	4a28      	ldr	r2, [pc, #160]	; (80011b8 <ST7735_DrawString+0xf8>)
 8001118:	eb04 0308 	add.w	r3, r4, r8
 800111c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001120:	4293      	cmp	r3, r2
 8001122:	db0b      	blt.n	800113c <ST7735_DrawString+0x7c>
            if(y + font.height >= _height)
 8001124:	4b25      	ldr	r3, [pc, #148]	; (80011bc <ST7735_DrawString+0xfc>)
            y += font.height;
 8001126:	4437      	add	r7, r6
            if(y + font.height >= _height)
 8001128:	f9b3 3000 	ldrsh.w	r3, [r3]
            y += font.height;
 800112c:	b2bf      	uxth	r7, r7
            if(y + font.height >= _height)
 800112e:	19ba      	adds	r2, r7, r6
 8001130:	429a      	cmp	r2, r3
 8001132:	dae7      	bge.n	8001104 <ST7735_DrawString+0x44>
            if(*str == ' ')
 8001134:	2d20      	cmp	r5, #32
            x = 0;
 8001136:	f04f 0400 	mov.w	r4, #0
            if(*str == ' ')
 800113a:	d0de      	beq.n	80010fa <ST7735_DrawString+0x3a>
        b = font.data[(ch - 32) * font.height + i];
 800113c:	3d20      	subs	r5, #32
 800113e:	4375      	muls	r5, r6
    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8001140:	b2e0      	uxtb	r0, r4
 8001142:	b2f9      	uxtb	r1, r7
 8001144:	1e73      	subs	r3, r6, #1
 8001146:	f108 32ff 	add.w	r2, r8, #4294967295
 800114a:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 800114e:	440b      	add	r3, r1
 8001150:	4402      	add	r2, r0
 8001152:	b2db      	uxtb	r3, r3
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	eb0b 0545 	add.w	r5, fp, r5, lsl #1
 800115a:	f7ff ff2b 	bl	8000fb4 <ST7735_SetAddressWindow>
    for(i = 0; i < font.height; i++)
 800115e:	f04f 0b00 	mov.w	fp, #0
 8001162:	455e      	cmp	r6, fp
 8001164:	d802      	bhi.n	800116c <ST7735_DrawString+0xac>
        x += font.width;
 8001166:	4444      	add	r4, r8
 8001168:	b2a4      	uxth	r4, r4
        str++;
 800116a:	e7c6      	b.n	80010fa <ST7735_DrawString+0x3a>
        for(j = 0; j < font.width; j++)
 800116c:	f04f 0900 	mov.w	r9, #0
        b = font.data[(ch - 32) * font.height + i];
 8001170:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001174:	9303      	str	r3, [sp, #12]
        for(j = 0; j < font.width; j++)
 8001176:	45c1      	cmp	r9, r8
 8001178:	d302      	bcc.n	8001180 <ST7735_DrawString+0xc0>
    for(i = 0; i < font.height; i++)
 800117a:	f10b 0b01 	add.w	fp, fp, #1
 800117e:	e7f0      	b.n	8001162 <ST7735_DrawString+0xa2>
            if((b << j) & 0x8000)
 8001180:	9b03      	ldr	r3, [sp, #12]
                ST7735_WriteData(data, sizeof(data));
 8001182:	a807      	add	r0, sp, #28
            if((b << j) & 0x8000)
 8001184:	fa03 f109 	lsl.w	r1, r3, r9
 8001188:	040b      	lsls	r3, r1, #16
                uint8_t data[] = { color >> 8, color & 0xFF };
 800118a:	bf49      	itett	mi
 800118c:	9b04      	ldrmi	r3, [sp, #16]
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800118e:	9b05      	ldrpl	r3, [sp, #20]
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001190:	f88d 301c 	strbmi.w	r3, [sp, #28]
 8001194:	9b02      	ldrmi	r3, [sp, #8]
                ST7735_WriteData(data, sizeof(data));
 8001196:	f04f 0102 	mov.w	r1, #2
                uint8_t data[] = { color >> 8, color & 0xFF };
 800119a:	bf4e      	itee	mi
 800119c:	f88d 301d 	strbmi.w	r3, [sp, #29]
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80011a0:	f88d 301c 	strbpl.w	r3, [sp, #28]
 80011a4:	f88d a01d 	strbpl.w	sl, [sp, #29]
        for(j = 0; j < font.width; j++)
 80011a8:	f109 0901 	add.w	r9, r9, #1
                ST7735_WriteData(data, sizeof(data));
 80011ac:	f7ff feca 	bl	8000f44 <ST7735_WriteData>
        for(j = 0; j < font.width; j++)
 80011b0:	e7e1      	b.n	8001176 <ST7735_DrawString+0xb6>
 80011b2:	bf00      	nop
 80011b4:	40010c00 	.word	0x40010c00
 80011b8:	2000000a 	.word	0x2000000a
 80011bc:	20000008 	.word	0x20000008

080011c0 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 80011c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80011c4:	461c      	mov	r4, r3
    // clipping
    if((x >= _width) || (y >= _height)) return;
 80011c6:	4b28      	ldr	r3, [pc, #160]	; (8001268 <ST7735_FillRectangle+0xa8>)
{
 80011c8:	4617      	mov	r7, r2
    if((x >= _width) || (y >= _height)) return;
 80011ca:	f9b3 2000 	ldrsh.w	r2, [r3]
{
 80011ce:	4605      	mov	r5, r0
    if((x >= _width) || (y >= _height)) return;
 80011d0:	4290      	cmp	r0, r2
{
 80011d2:	460e      	mov	r6, r1
 80011d4:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    if((x >= _width) || (y >= _height)) return;
 80011d8:	da32      	bge.n	8001240 <ST7735_FillRectangle+0x80>
 80011da:	4b24      	ldr	r3, [pc, #144]	; (800126c <ST7735_FillRectangle+0xac>)
 80011dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e0:	4299      	cmp	r1, r3
 80011e2:	da2d      	bge.n	8001240 <ST7735_FillRectangle+0x80>
    if((x + w - 1) >= _width) w = _width - x;
 80011e4:	1839      	adds	r1, r7, r0
 80011e6:	428a      	cmp	r2, r1
 80011e8:	bfbc      	itt	lt
 80011ea:	1a12      	sublt	r2, r2, r0
 80011ec:	b297      	uxthlt	r7, r2
    if((y + h - 1) >= _height) h = _height - y;
 80011ee:	19a2      	adds	r2, r4, r6
 80011f0:	4293      	cmp	r3, r2
 80011f2:	bfb8      	it	lt
 80011f4:	1b9b      	sublt	r3, r3, r6

    TFT_CS_L();
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	f04f 0110 	mov.w	r1, #16
 80011fe:	481c      	ldr	r0, [pc, #112]	; (8001270 <ST7735_FillRectangle+0xb0>)
    if((y + h - 1) >= _height) h = _height - y;
 8001200:	bfb8      	it	lt
 8001202:	b29c      	uxthlt	r4, r3
    TFT_CS_L();
 8001204:	f001 fd6c 	bl	8002ce0 <HAL_GPIO_WritePin>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001208:	b2f1      	uxtb	r1, r6
 800120a:	b2e8      	uxtb	r0, r5
 800120c:	1e4b      	subs	r3, r1, #1
 800120e:	1e42      	subs	r2, r0, #1
 8001210:	4423      	add	r3, r4
 8001212:	443a      	add	r2, r7
 8001214:	b2db      	uxtb	r3, r3
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	f7ff fecc 	bl	8000fb4 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 800121c:	ea4f 2318 	mov.w	r3, r8, lsr #8
    TFT_DC_D();
 8001220:	2201      	movs	r2, #1
 8001222:	2120      	movs	r1, #32
 8001224:	4812      	ldr	r0, [pc, #72]	; (8001270 <ST7735_FillRectangle+0xb0>)
    uint8_t data[] = { color >> 8, color & 0xFF };
 8001226:	f88d 3004 	strb.w	r3, [sp, #4]
 800122a:	f88d 8005 	strb.w	r8, [sp, #5]
    TFT_DC_D();
 800122e:	f001 fd57 	bl	8002ce0 <HAL_GPIO_WritePin>
        {
//#ifdef USE_SPI_DMA
//        	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, data, sizeof(data));
//        	while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
//#else
        	HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001232:	4e10      	ldr	r6, [pc, #64]	; (8001274 <ST7735_FillRectangle+0xb4>)
    for(y = h; y > 0; y--)
 8001234:	b9ac      	cbnz	r4, 8001262 <ST7735_FillRectangle+0xa2>
//#endif
        }
    }
    TFT_CS_H();
 8001236:	2201      	movs	r2, #1
 8001238:	2110      	movs	r1, #16
 800123a:	480d      	ldr	r0, [pc, #52]	; (8001270 <ST7735_FillRectangle+0xb0>)
 800123c:	f001 fd50 	bl	8002ce0 <HAL_GPIO_WritePin>
}
 8001240:	b002      	add	sp, #8
 8001242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        	HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001246:	f04f 33ff 	mov.w	r3, #4294967295
 800124a:	2202      	movs	r2, #2
 800124c:	4630      	mov	r0, r6
 800124e:	a901      	add	r1, sp, #4
 8001250:	f003 fc18 	bl	8004a84 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--)
 8001254:	3d01      	subs	r5, #1
 8001256:	b2ad      	uxth	r5, r5
 8001258:	2d00      	cmp	r5, #0
 800125a:	d1f4      	bne.n	8001246 <ST7735_FillRectangle+0x86>
    for(y = h; y > 0; y--)
 800125c:	3c01      	subs	r4, #1
 800125e:	b2a4      	uxth	r4, r4
 8001260:	e7e8      	b.n	8001234 <ST7735_FillRectangle+0x74>
        for(x = w; x > 0; x--)
 8001262:	463d      	mov	r5, r7
 8001264:	e7f8      	b.n	8001258 <ST7735_FillRectangle+0x98>
 8001266:	bf00      	nop
 8001268:	2000000a 	.word	0x2000000a
 800126c:	20000008 	.word	0x20000008
 8001270:	40010c00 	.word	0x40010c00
 8001274:	20000490 	.word	0x20000490

08001278 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color)
{
 8001278:	b507      	push	{r0, r1, r2, lr}
    ST7735_FillRectangle(0, 0, _width, _height, color);
 800127a:	2100      	movs	r1, #0
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <ST7735_FillScreen+0x1c>)
 800127e:	4a06      	ldr	r2, [pc, #24]	; (8001298 <ST7735_FillScreen+0x20>)
 8001280:	9000      	str	r0, [sp, #0]
 8001282:	881b      	ldrh	r3, [r3, #0]
 8001284:	4608      	mov	r0, r1
 8001286:	8812      	ldrh	r2, [r2, #0]
 8001288:	f7ff ff9a 	bl	80011c0 <ST7735_FillRectangle>
}
 800128c:	b003      	add	sp, #12
 800128e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001292:	bf00      	nop
 8001294:	20000008 	.word	0x20000008
 8001298:	2000000a 	.word	0x2000000a

0800129c <ST7735_Backlight_On>:
    TFT_CS_H();
}

void ST7735_Backlight_On(void)
{
	TFT_BL_H();
 800129c:	2201      	movs	r2, #1
 800129e:	2108      	movs	r1, #8
 80012a0:	4801      	ldr	r0, [pc, #4]	; (80012a8 <ST7735_Backlight_On+0xc>)
 80012a2:	f001 bd1d 	b.w	8002ce0 <HAL_GPIO_WritePin>
 80012a6:	bf00      	nop
 80012a8:	40010c00 	.word	0x40010c00

080012ac <ST7735_SetRotation>:
/***************************************************************************************
** Function name:           setRotation
** Description:             rotate the screen orientation m = 0-3
***************************************************************************************/
void ST7735_SetRotation(uint8_t m)
{
 80012ac:	b513      	push	{r0, r1, r4, lr}
  _value_rotation = m % 4;
 80012ae:	4c23      	ldr	r4, [pc, #140]	; (800133c <ST7735_SetRotation+0x90>)
 80012b0:	f000 0003 	and.w	r0, r0, #3

  TFT_CS_L();
 80012b4:	2200      	movs	r2, #0
 80012b6:	2110      	movs	r1, #16
  _value_rotation = m % 4;
 80012b8:	7020      	strb	r0, [r4, #0]
  TFT_CS_L();
 80012ba:	4821      	ldr	r0, [pc, #132]	; (8001340 <ST7735_SetRotation+0x94>)
 80012bc:	f001 fd10 	bl	8002ce0 <HAL_GPIO_WritePin>

  ST7735_WriteCommand(ST7735_MADCTL);
 80012c0:	2036      	movs	r0, #54	; 0x36
 80012c2:	f7ff fe27 	bl	8000f14 <ST7735_WriteCommand>

  switch (_value_rotation)
 80012c6:	7823      	ldrb	r3, [r4, #0]
 80012c8:	2b03      	cmp	r3, #3
 80012ca:	d817      	bhi.n	80012fc <ST7735_SetRotation+0x50>
 80012cc:	e8df f003 	tbb	[pc, r3]
 80012d0:	34321e02 	.word	0x34321e02
  {
    case 0:
    {
    	uint8_t d_r = (_data_rotation[0] | _data_rotation[1] | _data_rotation[3]);
 80012d4:	23c8      	movs	r3, #200	; 0xc8
    }
      break;
    case 2:
    {
    	uint8_t d_r = _data_rotation[3];
    	ST7735_WriteData(&d_r, sizeof(d_r));
 80012d6:	2101      	movs	r1, #1
 80012d8:	f10d 0007 	add.w	r0, sp, #7
    	uint8_t d_r = _data_rotation[3];
 80012dc:	f88d 3007 	strb.w	r3, [sp, #7]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 80012e0:	f7ff fe30 	bl	8000f44 <ST7735_WriteData>
    	_width  = ST7735_WIDTH;
 80012e4:	2250      	movs	r2, #80	; 0x50
 80012e6:	4b17      	ldr	r3, [pc, #92]	; (8001344 <ST7735_SetRotation+0x98>)
 80012e8:	801a      	strh	r2, [r3, #0]
    	_height = ST7735_HEIGHT;
 80012ea:	22a0      	movs	r2, #160	; 0xa0
 80012ec:	4b16      	ldr	r3, [pc, #88]	; (8001348 <ST7735_SetRotation+0x9c>)
 80012ee:	801a      	strh	r2, [r3, #0]
    	_xstart = ST7735_XSTART;
 80012f0:	2218      	movs	r2, #24
 80012f2:	4b16      	ldr	r3, [pc, #88]	; (800134c <ST7735_SetRotation+0xa0>)
 80012f4:	701a      	strb	r2, [r3, #0]
    	_ystart = ST7735_YSTART;
 80012f6:	2200      	movs	r2, #0
 80012f8:	4b15      	ldr	r3, [pc, #84]	; (8001350 <ST7735_SetRotation+0xa4>)
    	uint8_t d_r = (_data_rotation[0] | _data_rotation[2] | _data_rotation[3]);
    	ST7735_WriteData(&d_r, sizeof(d_r));
    	_width  = ST7735_HEIGHT;
    	_height = ST7735_WIDTH;
    	_xstart = ST7735_YSTART;
    	_ystart = ST7735_XSTART;
 80012fa:	701a      	strb	r2, [r3, #0]
    }
      break;
  }
  TFT_CS_H();
 80012fc:	2201      	movs	r2, #1
 80012fe:	2110      	movs	r1, #16
 8001300:	480f      	ldr	r0, [pc, #60]	; (8001340 <ST7735_SetRotation+0x94>)
}
 8001302:	b002      	add	sp, #8
 8001304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TFT_CS_H();
 8001308:	f001 bcea 	b.w	8002ce0 <HAL_GPIO_WritePin>
    	uint8_t d_r = (_data_rotation[1] | _data_rotation[2] | _data_rotation[3]);
 800130c:	23a8      	movs	r3, #168	; 0xa8
    	ST7735_WriteData(&d_r, sizeof(d_r));
 800130e:	2101      	movs	r1, #1
 8001310:	f10d 0007 	add.w	r0, sp, #7
    	uint8_t d_r = (_data_rotation[0] | _data_rotation[2] | _data_rotation[3]);
 8001314:	f88d 3007 	strb.w	r3, [sp, #7]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 8001318:	f7ff fe14 	bl	8000f44 <ST7735_WriteData>
    	_width  = ST7735_HEIGHT;
 800131c:	22a0      	movs	r2, #160	; 0xa0
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <ST7735_SetRotation+0x98>)
 8001320:	801a      	strh	r2, [r3, #0]
    	_height = ST7735_WIDTH;
 8001322:	2250      	movs	r2, #80	; 0x50
 8001324:	4b08      	ldr	r3, [pc, #32]	; (8001348 <ST7735_SetRotation+0x9c>)
 8001326:	801a      	strh	r2, [r3, #0]
    	_xstart = ST7735_YSTART;
 8001328:	2200      	movs	r2, #0
 800132a:	4b08      	ldr	r3, [pc, #32]	; (800134c <ST7735_SetRotation+0xa0>)
 800132c:	701a      	strb	r2, [r3, #0]
    	_ystart = ST7735_XSTART;
 800132e:	2218      	movs	r2, #24
 8001330:	4b07      	ldr	r3, [pc, #28]	; (8001350 <ST7735_SetRotation+0xa4>)
 8001332:	e7e2      	b.n	80012fa <ST7735_SetRotation+0x4e>
    	uint8_t d_r = _data_rotation[3];
 8001334:	2308      	movs	r3, #8
 8001336:	e7ce      	b.n	80012d6 <ST7735_SetRotation+0x2a>
    	uint8_t d_r = (_data_rotation[0] | _data_rotation[2] | _data_rotation[3]);
 8001338:	2368      	movs	r3, #104	; 0x68
 800133a:	e7e8      	b.n	800130e <ST7735_SetRotation+0x62>
 800133c:	2000055e 	.word	0x2000055e
 8001340:	40010c00 	.word	0x40010c00
 8001344:	2000000a 	.word	0x2000000a
 8001348:	20000008 	.word	0x20000008
 800134c:	2000000c 	.word	0x2000000c
 8001350:	2000055f 	.word	0x2000055f

08001354 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001354:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <HAL_MspInit+0x3c>)
{
 8001356:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001358:	699a      	ldr	r2, [r3, #24]
 800135a:	f042 0201 	orr.w	r2, r2, #1
 800135e:	619a      	str	r2, [r3, #24]
 8001360:	699a      	ldr	r2, [r3, #24]
 8001362:	f002 0201 	and.w	r2, r2, #1
 8001366:	9200      	str	r2, [sp, #0]
 8001368:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800136a:	69da      	ldr	r2, [r3, #28]
 800136c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001370:	61da      	str	r2, [r3, #28]
 8001372:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001374:	4a07      	ldr	r2, [pc, #28]	; (8001394 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137a:	9301      	str	r3, [sp, #4]
 800137c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800137e:	6853      	ldr	r3, [r2, #4]
 8001380:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001384:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001388:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138a:	b002      	add	sp, #8
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40021000 	.word	0x40021000
 8001394:	40010000 	.word	0x40010000

08001398 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001398:	b510      	push	{r4, lr}
 800139a:	4604      	mov	r4, r0
 800139c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139e:	2210      	movs	r2, #16
 80013a0:	2100      	movs	r1, #0
 80013a2:	a802      	add	r0, sp, #8
 80013a4:	f004 fbe6 	bl	8005b74 <memset>
  if(hadc->Instance==ADC1)
 80013a8:	6822      	ldr	r2, [r4, #0]
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <HAL_ADC_MspInit+0x54>)
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d11b      	bne.n	80013e8 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013b0:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 80013b4:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b6:	480e      	ldr	r0, [pc, #56]	; (80013f0 <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013bc:	619a      	str	r2, [r3, #24]
 80013be:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c0:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013c2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80013c6:	9200      	str	r2, [sp, #0]
 80013c8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ca:	699a      	ldr	r2, [r3, #24]
 80013cc:	f042 0204 	orr.w	r2, r2, #4
 80013d0:	619a      	str	r2, [r3, #24]
 80013d2:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013d4:	2202      	movs	r2, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	f003 0304 	and.w	r3, r3, #4
 80013da:	9301      	str	r3, [sp, #4]
 80013dc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013de:	2303      	movs	r3, #3
 80013e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e4:	f001 fba2 	bl	8002b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013e8:	b006      	add	sp, #24
 80013ea:	bd10      	pop	{r4, pc}
 80013ec:	40012400 	.word	0x40012400
 80013f0:	40010800 	.word	0x40010800

080013f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013f4:	b510      	push	{r4, lr}
 80013f6:	4604      	mov	r4, r0
 80013f8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fa:	2210      	movs	r2, #16
 80013fc:	2100      	movs	r1, #0
 80013fe:	a802      	add	r0, sp, #8
 8001400:	f004 fbb8 	bl	8005b74 <memset>
  if(hi2c->Instance==I2C1)
 8001404:	6822      	ldr	r2, [r4, #0]
 8001406:	4b15      	ldr	r3, [pc, #84]	; (800145c <HAL_I2C_MspInit+0x68>)
 8001408:	429a      	cmp	r2, r3
 800140a:	d124      	bne.n	8001456 <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800140c:	4c14      	ldr	r4, [pc, #80]	; (8001460 <HAL_I2C_MspInit+0x6c>)
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800140e:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001412:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001414:	4813      	ldr	r0, [pc, #76]	; (8001464 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001416:	f043 0308 	orr.w	r3, r3, #8
 800141a:	61a3      	str	r3, [r4, #24]
 800141c:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141e:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001420:	f003 0308 	and.w	r3, r3, #8
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001428:	2312      	movs	r3, #18
 800142a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800142e:	2303      	movs	r3, #3
 8001430:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001432:	f001 fb7b 	bl	8002b2c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001436:	4a0c      	ldr	r2, [pc, #48]	; (8001468 <HAL_I2C_MspInit+0x74>)
 8001438:	6853      	ldr	r3, [r2, #4]
 800143a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800143e:	f043 0302 	orr.w	r3, r3, #2
 8001442:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001444:	69e3      	ldr	r3, [r4, #28]
 8001446:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800144a:	61e3      	str	r3, [r4, #28]
 800144c:	69e3      	ldr	r3, [r4, #28]
 800144e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001452:	9301      	str	r3, [sp, #4]
 8001454:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001456:	b006      	add	sp, #24
 8001458:	bd10      	pop	{r4, pc}
 800145a:	bf00      	nop
 800145c:	40005400 	.word	0x40005400
 8001460:	40021000 	.word	0x40021000
 8001464:	40010c00 	.word	0x40010c00
 8001468:	40010000 	.word	0x40010000

0800146c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800146c:	b510      	push	{r4, lr}
 800146e:	4604      	mov	r4, r0
 8001470:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001472:	2210      	movs	r2, #16
 8001474:	2100      	movs	r1, #0
 8001476:	a802      	add	r0, sp, #8
 8001478:	f004 fb7c 	bl	8005b74 <memset>
  if(hspi->Instance==SPI1)
 800147c:	6822      	ldr	r2, [r4, #0]
 800147e:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <HAL_SPI_MspInit+0x58>)
 8001480:	429a      	cmp	r2, r3
 8001482:	d11d      	bne.n	80014c0 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001484:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8001488:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148a:	480f      	ldr	r0, [pc, #60]	; (80014c8 <HAL_SPI_MspInit+0x5c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800148c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001490:	619a      	str	r2, [r3, #24]
 8001492:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001494:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001496:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800149a:	9200      	str	r2, [sp, #0]
 800149c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	699a      	ldr	r2, [r3, #24]
 80014a0:	f042 0204 	orr.w	r2, r2, #4
 80014a4:	619a      	str	r2, [r3, #24]
 80014a6:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	22a0      	movs	r2, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014aa:	f003 0304 	and.w	r3, r3, #4
 80014ae:	9301      	str	r3, [sp, #4]
 80014b0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b2:	2302      	movs	r3, #2
 80014b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014b8:	2303      	movs	r3, #3
 80014ba:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014bc:	f001 fb36 	bl	8002b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014c0:	b006      	add	sp, #24
 80014c2:	bd10      	pop	{r4, pc}
 80014c4:	40013000 	.word	0x40013000
 80014c8:	40010800 	.word	0x40010800

080014cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014cc:	b570      	push	{r4, r5, r6, lr}
 80014ce:	4606      	mov	r6, r0
 80014d0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d2:	2210      	movs	r2, #16
 80014d4:	2100      	movs	r1, #0
 80014d6:	a802      	add	r0, sp, #8
 80014d8:	f004 fb4c 	bl	8005b74 <memset>
  if(huart->Instance==USART1)
 80014dc:	6832      	ldr	r2, [r6, #0]
 80014de:	4b2f      	ldr	r3, [pc, #188]	; (800159c <HAL_UART_MspInit+0xd0>)
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d158      	bne.n	8001596 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014e4:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80014e8:	699a      	ldr	r2, [r3, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ea:	f44f 7100 	mov.w	r1, #512	; 0x200
    __HAL_RCC_USART1_CLK_ENABLE();
 80014ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014f2:	619a      	str	r2, [r3, #24]
 80014f4:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f6:	482a      	ldr	r0, [pc, #168]	; (80015a0 <HAL_UART_MspInit+0xd4>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80014f8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80014fc:	9200      	str	r2, [sp, #0]
 80014fe:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001500:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001502:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001504:	f042 0204 	orr.w	r2, r2, #4
 8001508:	619a      	str	r2, [r3, #24]
 800150a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800150c:	4c25      	ldr	r4, [pc, #148]	; (80015a4 <HAL_UART_MspInit+0xd8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150e:	f003 0304 	and.w	r3, r3, #4
 8001512:	9301      	str	r3, [sp, #4]
 8001514:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	e9cd 1302 	strd	r1, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800151c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001520:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001522:	f001 fb03 	bl	8002b2c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001526:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152a:	481d      	ldr	r0, [pc, #116]	; (80015a0 <HAL_UART_MspInit+0xd4>)
 800152c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800152e:	e9cd 3502 	strd	r3, r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001534:	f001 fafa 	bl	8002b2c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001538:	4b1b      	ldr	r3, [pc, #108]	; (80015a8 <HAL_UART_MspInit+0xdc>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800153a:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800153c:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001540:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001542:	e9c4 5505 	strd	r5, r5, [r4, #20]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001546:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800154a:	60a5      	str	r5, [r4, #8]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800154c:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800154e:	f001 f9bd 	bl	80028cc <HAL_DMA_Init>
 8001552:	b108      	cbz	r0, 8001558 <HAL_UART_MspInit+0x8c>
    {
      Error_Handler();
 8001554:	f7ff fcdc 	bl	8000f10 <Error_Handler>

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001558:	2310      	movs	r3, #16
 800155a:	4a14      	ldr	r2, [pc, #80]	; (80015ac <HAL_UART_MspInit+0xe0>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800155c:	63f4      	str	r4, [r6, #60]	; 0x3c
 800155e:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001560:	4c13      	ldr	r4, [pc, #76]	; (80015b0 <HAL_UART_MspInit+0xe4>)
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001562:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001566:	2300      	movs	r3, #0
 8001568:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800156a:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800156c:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001570:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001574:	e9c4 3306 	strd	r3, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001578:	f001 f9a8 	bl	80028cc <HAL_DMA_Init>
 800157c:	b108      	cbz	r0, 8001582 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 800157e:	f7ff fcc7 	bl	8000f10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2025      	movs	r0, #37	; 0x25
 8001586:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001588:	63b4      	str	r4, [r6, #56]	; 0x38
 800158a:	6266      	str	r6, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800158c:	f001 f94a 	bl	8002824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001590:	2025      	movs	r0, #37	; 0x25
 8001592:	f001 f979 	bl	8002888 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001596:	b006      	add	sp, #24
 8001598:	bd70      	pop	{r4, r5, r6, pc}
 800159a:	bf00      	nop
 800159c:	40013800 	.word	0x40013800
 80015a0:	40010800 	.word	0x40010800
 80015a4:	200003b4 	.word	0x200003b4
 80015a8:	40020058 	.word	0x40020058
 80015ac:	40020044 	.word	0x40020044
 80015b0:	200003f8 	.word	0x200003f8

080015b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80015b6:	f003 f923 	bl	8004800 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015ba:	e7fe      	b.n	80015ba <NMI_Handler+0x6>

080015bc <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <HardFault_Handler>

080015be <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015be:	e7fe      	b.n	80015be <MemManage_Handler>

080015c0 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <BusFault_Handler>

080015c2 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c2:	e7fe      	b.n	80015c2 <UsageFault_Handler>

080015c4 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015c4:	4770      	bx	lr

080015c6 <DebugMon_Handler>:
 80015c6:	4770      	bx	lr

080015c8 <PendSV_Handler>:
 80015c8:	4770      	bx	lr

080015ca <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ca:	f000 bfd3 	b.w	8002574 <HAL_IncTick>
	...

080015d0 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80015d0:	4801      	ldr	r0, [pc, #4]	; (80015d8 <DMA1_Channel4_IRQHandler+0x8>)
 80015d2:	f001 ba17 	b.w	8002a04 <HAL_DMA_IRQHandler>
 80015d6:	bf00      	nop
 80015d8:	200003f8 	.word	0x200003f8

080015dc <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80015dc:	4801      	ldr	r0, [pc, #4]	; (80015e4 <DMA1_Channel5_IRQHandler+0x8>)
 80015de:	f001 ba11 	b.w	8002a04 <HAL_DMA_IRQHandler>
 80015e2:	bf00      	nop
 80015e4:	200003b4 	.word	0x200003b4

080015e8 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80015e8:	4801      	ldr	r0, [pc, #4]	; (80015f0 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 80015ea:	f002 b897 	b.w	800371c <HAL_PCD_IRQHandler>
 80015ee:	bf00      	nop
 80015f0:	20000ff8 	.word	0x20000ff8

080015f4 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015f4:	4801      	ldr	r0, [pc, #4]	; (80015fc <USART1_IRQHandler+0x8>)
 80015f6:	f003 bbf3 	b.w	8004de0 <HAL_UART_IRQHandler>
 80015fa:	bf00      	nop
 80015fc:	200004e8 	.word	0x200004e8

08001600 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001600:	2001      	movs	r0, #1
 8001602:	4770      	bx	lr

08001604 <_kill>:

int _kill(int pid, int sig)
{
 8001604:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001606:	f004 fa7d 	bl	8005b04 <__errno>
 800160a:	2316      	movs	r3, #22
 800160c:	6003      	str	r3, [r0, #0]
	return -1;
}
 800160e:	f04f 30ff 	mov.w	r0, #4294967295
 8001612:	bd08      	pop	{r3, pc}

08001614 <_exit>:

void _exit (int status)
{
 8001614:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001616:	f004 fa75 	bl	8005b04 <__errno>
 800161a:	2316      	movs	r3, #22
 800161c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800161e:	e7fe      	b.n	800161e <_exit+0xa>

08001620 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001620:	b570      	push	{r4, r5, r6, lr}
 8001622:	460d      	mov	r5, r1
 8001624:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001626:	460e      	mov	r6, r1
 8001628:	1b73      	subs	r3, r6, r5
 800162a:	429c      	cmp	r4, r3
 800162c:	dc01      	bgt.n	8001632 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800162e:	4620      	mov	r0, r4
 8001630:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001632:	f3af 8000 	nop.w
 8001636:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163a:	e7f5      	b.n	8001628 <_read+0x8>

0800163c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800163c:	b570      	push	{r4, r5, r6, lr}
 800163e:	460d      	mov	r5, r1
 8001640:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001642:	460e      	mov	r6, r1
 8001644:	1b73      	subs	r3, r6, r5
 8001646:	429c      	cmp	r4, r3
 8001648:	dc01      	bgt.n	800164e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800164a:	4620      	mov	r0, r4
 800164c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800164e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001652:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001656:	e7f5      	b.n	8001644 <_write+0x8>

08001658 <_close>:

int _close(int file)
{
	return -1;
}
 8001658:	f04f 30ff 	mov.w	r0, #4294967295
 800165c:	4770      	bx	lr

0800165e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800165e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8001662:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001664:	604b      	str	r3, [r1, #4]
}
 8001666:	4770      	bx	lr

08001668 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001668:	2001      	movs	r0, #1
 800166a:	4770      	bx	lr

0800166c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800166c:	2000      	movs	r0, #0
 800166e:	4770      	bx	lr

08001670 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001670:	4a0b      	ldr	r2, [pc, #44]	; (80016a0 <_sbrk+0x30>)
{
 8001672:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001674:	6811      	ldr	r1, [r2, #0]
{
 8001676:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001678:	b909      	cbnz	r1, 800167e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800167a:	490a      	ldr	r1, [pc, #40]	; (80016a4 <_sbrk+0x34>)
 800167c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800167e:	6810      	ldr	r0, [r2, #0]
 8001680:	4909      	ldr	r1, [pc, #36]	; (80016a8 <_sbrk+0x38>)
 8001682:	4c0a      	ldr	r4, [pc, #40]	; (80016ac <_sbrk+0x3c>)
 8001684:	4403      	add	r3, r0
 8001686:	1b09      	subs	r1, r1, r4
 8001688:	428b      	cmp	r3, r1
 800168a:	d906      	bls.n	800169a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800168c:	f004 fa3a 	bl	8005b04 <__errno>
 8001690:	230c      	movs	r3, #12
 8001692:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001694:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001698:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800169a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800169c:	e7fc      	b.n	8001698 <_sbrk+0x28>
 800169e:	bf00      	nop
 80016a0:	20000560 	.word	0x20000560
 80016a4:	20001720 	.word	0x20001720
 80016a8:	20005000 	.word	0x20005000
 80016ac:	00000400 	.word	0x00000400

080016b0 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016b0:	4770      	bx	lr
	...

080016b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80016b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80016b6:	2200      	movs	r2, #0
 80016b8:	490e      	ldr	r1, [pc, #56]	; (80016f4 <MX_USB_DEVICE_Init+0x40>)
 80016ba:	480f      	ldr	r0, [pc, #60]	; (80016f8 <MX_USB_DEVICE_Init+0x44>)
 80016bc:	f000 fae8 	bl	8001c90 <USBD_Init>
 80016c0:	b108      	cbz	r0, 80016c6 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 80016c2:	f7ff fc25 	bl	8000f10 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80016c6:	490d      	ldr	r1, [pc, #52]	; (80016fc <MX_USB_DEVICE_Init+0x48>)
 80016c8:	480b      	ldr	r0, [pc, #44]	; (80016f8 <MX_USB_DEVICE_Init+0x44>)
 80016ca:	f000 faf6 	bl	8001cba <USBD_RegisterClass>
 80016ce:	b108      	cbz	r0, 80016d4 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 80016d0:	f7ff fc1e 	bl	8000f10 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80016d4:	490a      	ldr	r1, [pc, #40]	; (8001700 <MX_USB_DEVICE_Init+0x4c>)
 80016d6:	4808      	ldr	r0, [pc, #32]	; (80016f8 <MX_USB_DEVICE_Init+0x44>)
 80016d8:	f000 f945 	bl	8001966 <USBD_CDC_RegisterInterface>
 80016dc:	b108      	cbz	r0, 80016e2 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 80016de:	f7ff fc17 	bl	8000f10 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80016e2:	4805      	ldr	r0, [pc, #20]	; (80016f8 <MX_USB_DEVICE_Init+0x44>)
 80016e4:	f000 faf0 	bl	8001cc8 <USBD_Start>
 80016e8:	b118      	cbz	r0, 80016f2 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80016ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80016ee:	f7ff bc0f 	b.w	8000f10 <Error_Handler>
}
 80016f2:	bd08      	pop	{r3, pc}
 80016f4:	20000134 	.word	0x20000134
 80016f8:	20000564 	.word	0x20000564
 80016fc:	20000014 	.word	0x20000014
 8001700:	20000124 	.word	0x20000124

08001704 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8001704:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8001708:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800170a:	b16b      	cbz	r3, 8001728 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800170c:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8001710:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8001714:	28ff      	cmp	r0, #255	; 0xff
 8001716:	d007      	beq.n	8001728 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	4621      	mov	r1, r4
 800171c:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8001720:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8001722:	23ff      	movs	r3, #255	; 0xff
 8001724:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8001728:	2000      	movs	r0, #0
 800172a:	bd10      	pop	{r4, pc}

0800172c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800172c:	2343      	movs	r3, #67	; 0x43
 800172e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8001730:	4800      	ldr	r0, [pc, #0]	; (8001734 <USBD_CDC_GetFSCfgDesc+0x8>)
 8001732:	4770      	bx	lr
 8001734:	2000004c 	.word	0x2000004c

08001738 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8001738:	2343      	movs	r3, #67	; 0x43
 800173a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 800173c:	4800      	ldr	r0, [pc, #0]	; (8001740 <USBD_CDC_GetHSCfgDesc+0x8>)
 800173e:	4770      	bx	lr
 8001740:	20000090 	.word	0x20000090

08001744 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8001744:	2343      	movs	r3, #67	; 0x43
 8001746:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8001748:	4800      	ldr	r0, [pc, #0]	; (800174c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800174a:	4770      	bx	lr
 800174c:	200000e0 	.word	0x200000e0

08001750 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8001750:	230a      	movs	r3, #10
 8001752:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8001754:	4800      	ldr	r0, [pc, #0]	; (8001758 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8001756:	4770      	bx	lr
 8001758:	200000d4 	.word	0x200000d4

0800175c <USBD_CDC_DataOut>:
{
 800175c:	b538      	push	{r3, r4, r5, lr}
 800175e:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8001760:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8001764:	f000 fa89 	bl	8001c7a <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8001768:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800176c:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8001770:	b14b      	cbz	r3, 8001786 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8001772:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8001776:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8001780:	4798      	blx	r3
    return USBD_OK;
 8001782:	2000      	movs	r0, #0
}
 8001784:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8001786:	2002      	movs	r0, #2
 8001788:	e7fc      	b.n	8001784 <USBD_CDC_DataOut+0x28>

0800178a <USBD_CDC_DataIn>:
{
 800178a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800178c:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 8001790:	b1d6      	cbz	r6, 80017c8 <USBD_CDC_DataIn+0x3e>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8001792:	2214      	movs	r2, #20
 8001794:	fb02 0201 	mla	r2, r2, r1, r0
 8001798:	69d4      	ldr	r4, [r2, #28]
 800179a:	b18c      	cbz	r4, 80017c0 <USBD_CDC_DataIn+0x36>
 800179c:	2728      	movs	r7, #40	; 0x28
 800179e:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 80017a2:	fb07 3501 	mla	r5, r7, r1, r3
 80017a6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80017a8:	fbb4 f5f3 	udiv	r5, r4, r3
 80017ac:	fb03 4415 	mls	r4, r3, r5, r4
 80017b0:	b934      	cbnz	r4, 80017c0 <USBD_CDC_DataIn+0x36>
      pdev->ep_in[epnum].total_length = 0U;
 80017b2:	61d4      	str	r4, [r2, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80017b4:	4623      	mov	r3, r4
 80017b6:	4622      	mov	r2, r4
 80017b8:	f000 fa4d 	bl	8001c56 <USBD_LL_Transmit>
    return USBD_OK;
 80017bc:	4620      	mov	r0, r4
}
 80017be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 80017c0:	2000      	movs	r0, #0
 80017c2:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 80017c6:	e7fa      	b.n	80017be <USBD_CDC_DataIn+0x34>
    return USBD_FAIL;
 80017c8:	2002      	movs	r0, #2
 80017ca:	e7f8      	b.n	80017be <USBD_CDC_DataIn+0x34>

080017cc <USBD_CDC_Setup>:
{
 80017cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t ifalt = 0U;
 80017d0:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80017d4:	780a      	ldrb	r2, [r1, #0]
{
 80017d6:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80017d8:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 80017dc:	460e      	mov	r6, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80017de:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 80017e2:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 80017e6:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80017ea:	d028      	beq.n	800183e <USBD_CDC_Setup+0x72>
 80017ec:	2c20      	cmp	r4, #32
 80017ee:	d142      	bne.n	8001876 <USBD_CDC_Setup+0xaa>
      if (req->wLength)
 80017f0:	88cc      	ldrh	r4, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80017f2:	784b      	ldrb	r3, [r1, #1]
      if (req->wLength)
 80017f4:	b1e4      	cbz	r4, 8001830 <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 80017f6:	0612      	lsls	r2, r2, #24
 80017f8:	d511      	bpl.n	800181e <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80017fa:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 80017fe:	4639      	mov	r1, r7
 8001800:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8001804:	4618      	mov	r0, r3
 8001806:	4622      	mov	r2, r4
 8001808:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800180a:	4639      	mov	r1, r7
 800180c:	4628      	mov	r0, r5
 800180e:	88f2      	ldrh	r2, [r6, #6]
 8001810:	f000 fe14 	bl	800243c <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8001814:	4644      	mov	r4, r8
}
 8001816:	4620      	mov	r0, r4
 8001818:	b003      	add	sp, #12
 800181a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800181e:	4622      	mov	r2, r4
 8001820:	4639      	mov	r1, r7
          hcdc->CmdOpCode = req->bRequest;
 8001822:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8001826:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800182a:	f000 fe1c 	bl	8002466 <USBD_CtlPrepareRx>
 800182e:	e7f1      	b.n	8001814 <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8001830:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8001834:	4618      	mov	r0, r3
 8001836:	6895      	ldr	r5, [r2, #8]
 8001838:	4622      	mov	r2, r4
 800183a:	47a8      	blx	r5
 800183c:	e7eb      	b.n	8001816 <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 800183e:	784b      	ldrb	r3, [r1, #1]
 8001840:	2b0a      	cmp	r3, #10
 8001842:	d00c      	beq.n	800185e <USBD_CDC_Setup+0x92>
 8001844:	2b0b      	cmp	r3, #11
 8001846:	d012      	beq.n	800186e <USBD_CDC_Setup+0xa2>
 8001848:	b9ab      	cbnz	r3, 8001876 <USBD_CDC_Setup+0xaa>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800184a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800184e:	2b03      	cmp	r3, #3
 8001850:	d111      	bne.n	8001876 <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8001852:	2202      	movs	r2, #2
 8001854:	f10d 0106 	add.w	r1, sp, #6
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8001858:	f000 fdf0 	bl	800243c <USBD_CtlSendData>
 800185c:	e7db      	b.n	8001816 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800185e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8001862:	2b03      	cmp	r3, #3
 8001864:	d107      	bne.n	8001876 <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8001866:	2201      	movs	r2, #1
 8001868:	f10d 0105 	add.w	r1, sp, #5
 800186c:	e7f4      	b.n	8001858 <USBD_CDC_Setup+0x8c>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800186e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8001872:	2b03      	cmp	r3, #3
 8001874:	d0cf      	beq.n	8001816 <USBD_CDC_Setup+0x4a>
          USBD_CtlError(pdev, req);
 8001876:	4631      	mov	r1, r6
 8001878:	4628      	mov	r0, r5
 800187a:	f000 fd3f 	bl	80022fc <USBD_CtlError>
          ret = USBD_FAIL;
 800187e:	2402      	movs	r4, #2
          break;
 8001880:	e7c9      	b.n	8001816 <USBD_CDC_Setup+0x4a>

08001882 <USBD_CDC_DeInit>:
{
 8001882:	b538      	push	{r3, r4, r5, lr}
 8001884:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8001886:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8001888:	2181      	movs	r1, #129	; 0x81
 800188a:	f000 f9ae 	bl	8001bea <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800188e:	2101      	movs	r1, #1
 8001890:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8001892:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8001894:	f000 f9a9 	bl	8001bea <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8001898:	2182      	movs	r1, #130	; 0x82
 800189a:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800189c:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80018a0:	f000 f9a3 	bl	8001bea <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 80018a4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80018a8:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 80018aa:	b14b      	cbz	r3, 80018c0 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80018ac:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80018b4:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 80018b8:	f000 f9e8 	bl	8001c8c <USBD_static_free>
    pdev->pClassData = NULL;
 80018bc:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 80018c0:	2000      	movs	r0, #0
 80018c2:	bd38      	pop	{r3, r4, r5, pc}

080018c4 <USBD_CDC_Init>:
{
 80018c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80018c8:	7c03      	ldrb	r3, [r0, #16]
{
 80018ca:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80018cc:	bbbb      	cbnz	r3, 800193e <USBD_CDC_Init+0x7a>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80018ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018d2:	2202      	movs	r2, #2
 80018d4:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80018d6:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80018d8:	f000 f97b 	bl	8001bd2 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80018dc:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80018e0:	62e5      	str	r5, [r4, #44]	; 0x2c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80018e2:	2701      	movs	r7, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80018e4:	4629      	mov	r1, r5
 80018e6:	2202      	movs	r2, #2
 80018e8:	4620      	mov	r0, r4
 80018ea:	f000 f972 	bl	8001bd2 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80018ee:	2308      	movs	r3, #8
 80018f0:	2203      	movs	r2, #3
 80018f2:	2182      	movs	r1, #130	; 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80018f4:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80018f8:	4620      	mov	r0, r4
 80018fa:	f000 f96a 	bl	8001bd2 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80018fe:	f44f 7007 	mov.w	r0, #540	; 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8001902:	6427      	str	r7, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8001904:	f000 f9be 	bl	8001c84 <USBD_static_malloc>
 8001908:	4605      	mov	r5, r0
 800190a:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 800190e:	b340      	cbz	r0, 8001962 <USBD_CDC_Init+0x9e>
    hcdc->TxState = 0U;
 8001910:	f04f 0800 	mov.w	r8, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8001914:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4798      	blx	r3
    hcdc->TxState = 0U;
 800191c:	f8c5 8214 	str.w	r8, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 8001920:	f8c5 8218 	str.w	r8, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8001924:	7c26      	ldrb	r6, [r4, #16]
 8001926:	b99e      	cbnz	r6, 8001950 <USBD_CDC_Init+0x8c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8001928:	f44f 7300 	mov.w	r3, #512	; 0x200
 800192c:	4639      	mov	r1, r7
 800192e:	4620      	mov	r0, r4
 8001930:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8001934:	f000 f998 	bl	8001c68 <USBD_LL_PrepareReceive>
}
 8001938:	4630      	mov	r0, r6
 800193a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800193e:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8001940:	2340      	movs	r3, #64	; 0x40
 8001942:	2202      	movs	r2, #2
 8001944:	2181      	movs	r1, #129	; 0x81
 8001946:	f000 f944 	bl	8001bd2 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800194a:	2340      	movs	r3, #64	; 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800194c:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800194e:	e7c8      	b.n	80018e2 <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8001950:	2340      	movs	r3, #64	; 0x40
 8001952:	4639      	mov	r1, r7
 8001954:	4620      	mov	r0, r4
 8001956:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800195a:	f000 f985 	bl	8001c68 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 800195e:	4646      	mov	r6, r8
 8001960:	e7ea      	b.n	8001938 <USBD_CDC_Init+0x74>
    ret = 1U;
 8001962:	463e      	mov	r6, r7
 8001964:	e7e8      	b.n	8001938 <USBD_CDC_Init+0x74>

08001966 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8001966:	b119      	cbz	r1, 8001970 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8001968:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 800196c:	2000      	movs	r0, #0
 800196e:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8001970:	2002      	movs	r0, #2
  }

  return ret;
}
 8001972:	4770      	bx	lr

08001974 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8001974:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8001978:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800197a:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800197e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8001982:	4770      	bx	lr

08001984 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8001984:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 8001988:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800198a:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800198e:	4770      	bx	lr

08001990 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8001990:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8001994:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 8001996:	b182      	cbz	r2, 80019ba <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 8001998:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 800199c:	2301      	movs	r3, #1
 800199e:	b974      	cbnz	r4, 80019be <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80019a0:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80019a4:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80019a8:	2181      	movs	r1, #129	; 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80019aa:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80019ac:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	f000 f950 	bl	8001c56 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 80019b6:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 80019b8:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 80019ba:	2002      	movs	r0, #2
 80019bc:	e7fc      	b.n	80019b8 <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 80019be:	4618      	mov	r0, r3
 80019c0:	e7fa      	b.n	80019b8 <USBD_CDC_TransmitPacket+0x28>

080019c2 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80019c2:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 80019c6:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80019c8:	b182      	cbz	r2, 80019ec <USBD_CDC_ReceivePacket+0x2a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80019ca:	7c04      	ldrb	r4, [r0, #16]
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80019cc:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80019d0:	b934      	cbnz	r4, 80019e0 <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
 80019d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019d6:	2101      	movs	r1, #1
 80019d8:	f000 f946 	bl	8001c68 <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 80019dc:	4620      	mov	r0, r4
 80019de:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 80019e0:	2340      	movs	r3, #64	; 0x40
 80019e2:	2101      	movs	r1, #1
 80019e4:	f000 f940 	bl	8001c68 <USBD_LL_PrepareReceive>
    return USBD_OK;
 80019e8:	2400      	movs	r4, #0
 80019ea:	e7f7      	b.n	80019dc <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 80019ec:	2402      	movs	r4, #2
 80019ee:	e7f5      	b.n	80019dc <USBD_CDC_ReceivePacket+0x1a>

080019f0 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80019f0:	2000      	movs	r0, #0
 80019f2:	4770      	bx	lr

080019f4 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80019f4:	2000      	movs	r0, #0
 80019f6:	4770      	bx	lr

080019f8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80019f8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80019fa:	4c05      	ldr	r4, [pc, #20]	; (8001a10 <CDC_Receive_FS+0x18>)
{
 80019fc:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80019fe:	4620      	mov	r0, r4
 8001a00:	f7ff ffc0 	bl	8001984 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8001a04:	4620      	mov	r0, r4
 8001a06:	f7ff ffdc 	bl	80019c2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	bd10      	pop	{r4, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000564 	.word	0x20000564

08001a14 <CDC_Init_FS>:
{
 8001a14:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8001a16:	4c06      	ldr	r4, [pc, #24]	; (8001a30 <CDC_Init_FS+0x1c>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	4620      	mov	r0, r4
 8001a1c:	4905      	ldr	r1, [pc, #20]	; (8001a34 <CDC_Init_FS+0x20>)
 8001a1e:	f7ff ffa9 	bl	8001974 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8001a22:	4620      	mov	r0, r4
 8001a24:	4904      	ldr	r1, [pc, #16]	; (8001a38 <CDC_Init_FS+0x24>)
 8001a26:	f7ff ffad 	bl	8001984 <USBD_CDC_SetRxBuffer>
}
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	bd10      	pop	{r4, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000564 	.word	0x20000564
 8001a34:	20000c10 	.word	0x20000c10
 8001a38:	20000828 	.word	0x20000828

08001a3c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8001a3c:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8001a3e:	4c09      	ldr	r4, [pc, #36]	; (8001a64 <CDC_Transmit_FS+0x28>)
{
 8001a40:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8001a42:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 8001a46:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001a4a:	b943      	cbnz	r3, 8001a5e <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8001a4c:	4601      	mov	r1, r0
 8001a4e:	4620      	mov	r0, r4
 8001a50:	f7ff ff90 	bl	8001974 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8001a54:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 8001a56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8001a5a:	f7ff bf99 	b.w	8001990 <USBD_CDC_TransmitPacket>
}
 8001a5e:	2001      	movs	r0, #1
 8001a60:	bd10      	pop	{r4, pc}
 8001a62:	bf00      	nop
 8001a64:	20000564 	.word	0x20000564

08001a68 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8001a68:	2803      	cmp	r0, #3
 8001a6a:	bf9a      	itte	ls
 8001a6c:	4b01      	ldrls	r3, [pc, #4]	; (8001a74 <USBD_Get_USB_Status+0xc>)
 8001a6e:	5c18      	ldrbls	r0, [r3, r0]
{
 8001a70:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8001a72:	4770      	bx	lr
 8001a74:	08009736 	.word	0x08009736

08001a78 <HAL_PCD_MspInit>:
{
 8001a78:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <HAL_PCD_MspInit+0x3c>)
 8001a7c:	6802      	ldr	r2, [r0, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d115      	bne.n	8001aae <HAL_PCD_MspInit+0x36>
    __HAL_RCC_USB_CLK_ENABLE();
 8001a82:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8001a86:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001a88:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8001a8a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001a8e:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001a90:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8001a92:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001a94:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8001a96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a9a:	9301      	str	r3, [sp, #4]
 8001a9c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001a9e:	f000 fec1 	bl	8002824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001aa2:	2014      	movs	r0, #20
}
 8001aa4:	b003      	add	sp, #12
 8001aa6:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001aaa:	f000 beed 	b.w	8002888 <HAL_NVIC_EnableIRQ>
}
 8001aae:	b003      	add	sp, #12
 8001ab0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ab4:	40005c00 	.word	0x40005c00

08001ab8 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8001ab8:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 8001abc:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8001ac0:	f000 b919 	b.w	8001cf6 <USBD_LL_SetupStage>

08001ac4 <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8001ac4:	2328      	movs	r3, #40	; 0x28
 8001ac6:	fb03 0301 	mla	r3, r3, r1, r0
 8001aca:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8001ace:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8001ad2:	f000 b93d 	b.w	8001d50 <USBD_LL_DataOutStage>

08001ad6 <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8001ad6:	2328      	movs	r3, #40	; 0x28
 8001ad8:	fb03 0301 	mla	r3, r3, r1, r0
 8001adc:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8001ae0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ae2:	f000 b96f 	b.w	8001dc4 <USBD_LL_DataInStage>

08001ae6 <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8001ae6:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8001aea:	f000 ba03 	b.w	8001ef4 <USBD_LL_SOF>

08001aee <HAL_PCD_ResetCallback>:
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8001aee:	6883      	ldr	r3, [r0, #8]
{
 8001af0:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8001af2:	2b02      	cmp	r3, #2
{
 8001af4:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8001af6:	d001      	beq.n	8001afc <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 8001af8:	f7ff fa0a 	bl	8000f10 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8001afc:	f8d4 02ec 	ldr.w	r0, [r4, #748]	; 0x2ec
 8001b00:	2101      	movs	r1, #1
 8001b02:	f000 f9e1 	bl	8001ec8 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8001b06:	f8d4 02ec 	ldr.w	r0, [r4, #748]	; 0x2ec
}
 8001b0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8001b0e:	f000 b9b4 	b.w	8001e7a <USBD_LL_Reset>
	...

08001b14 <HAL_PCD_SuspendCallback>:
{
 8001b14:	b510      	push	{r4, lr}
 8001b16:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8001b18:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8001b1c:	f000 f9d7 	bl	8001ece <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8001b20:	69a3      	ldr	r3, [r4, #24]
 8001b22:	b123      	cbz	r3, 8001b2e <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8001b24:	4a02      	ldr	r2, [pc, #8]	; (8001b30 <HAL_PCD_SuspendCallback+0x1c>)
 8001b26:	6913      	ldr	r3, [r2, #16]
 8001b28:	f043 0306 	orr.w	r3, r3, #6
 8001b2c:	6113      	str	r3, [r2, #16]
}
 8001b2e:	bd10      	pop	{r4, pc}
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <HAL_PCD_ResumeCallback>:
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8001b34:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8001b38:	f000 b9d2 	b.w	8001ee0 <USBD_LL_Resume>

08001b3c <USBD_LL_Init>:
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001b3c:	2308      	movs	r3, #8
{
 8001b3e:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001b40:	4a1d      	ldr	r2, [pc, #116]	; (8001bb8 <USBD_LL_Init+0x7c>)
{
 8001b42:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8001b44:	481d      	ldr	r0, [pc, #116]	; (8001bbc <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001b46:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001b4e:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8001b50:	f8c0 42ec 	str.w	r4, [r0, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8001b54:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001b58:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001b5c:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001b5e:	f001 fd37 	bl	80035d0 <HAL_PCD_Init>
 8001b62:	b108      	cbz	r0, 8001b68 <USBD_LL_Init+0x2c>
    Error_Handler( );
 8001b64:	f7ff f9d4 	bl	8000f10 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	2318      	movs	r3, #24
 8001b6c:	4611      	mov	r1, r2
 8001b6e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8001b72:	f002 fba6 	bl	80042c2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8001b76:	2358      	movs	r3, #88	; 0x58
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2180      	movs	r1, #128	; 0x80
 8001b7c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8001b80:	f002 fb9f 	bl	80042c2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8001b84:	23c0      	movs	r3, #192	; 0xc0
 8001b86:	2200      	movs	r2, #0
 8001b88:	2181      	movs	r1, #129	; 0x81
 8001b8a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8001b8e:	f002 fb98 	bl	80042c2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8001b92:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001b96:	2200      	movs	r2, #0
 8001b98:	2101      	movs	r1, #1
 8001b9a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8001b9e:	f002 fb90 	bl	80042c2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8001ba2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2182      	movs	r1, #130	; 0x82
 8001baa:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8001bae:	f002 fb88 	bl	80042c2 <HAL_PCDEx_PMAConfig>
}
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	bd10      	pop	{r4, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40005c00 	.word	0x40005c00
 8001bbc:	20000ff8 	.word	0x20000ff8

08001bc0 <USBD_LL_Start>:
{
 8001bc0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8001bc2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8001bc6:	f001 fd7b 	bl	80036c0 <HAL_PCD_Start>
}
 8001bca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8001bce:	f7ff bf4b 	b.w	8001a68 <USBD_Get_USB_Status>

08001bd2 <USBD_LL_OpenEP>:
{
 8001bd2:	b510      	push	{r4, lr}
 8001bd4:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8001bd6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
{
 8001bda:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8001bdc:	4623      	mov	r3, r4
 8001bde:	f002 fa7b 	bl	80040d8 <HAL_PCD_EP_Open>
}
 8001be2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8001be6:	f7ff bf3f 	b.w	8001a68 <USBD_Get_USB_Status>

08001bea <USBD_LL_CloseEP>:
{
 8001bea:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8001bec:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8001bf0:	f002 faa1 	bl	8004136 <HAL_PCD_EP_Close>
}
 8001bf4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8001bf8:	f7ff bf36 	b.w	8001a68 <USBD_Get_USB_Status>

08001bfc <USBD_LL_StallEP>:
{
 8001bfc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8001bfe:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8001c02:	f002 faf9 	bl	80041f8 <HAL_PCD_EP_SetStall>
}
 8001c06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8001c0a:	f7ff bf2d 	b.w	8001a68 <USBD_Get_USB_Status>

08001c0e <USBD_LL_ClearStallEP>:
{
 8001c0e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8001c10:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8001c14:	f002 fb24 	bl	8004260 <HAL_PCD_EP_ClrStall>
}
 8001c18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8001c1c:	f7ff bf24 	b.w	8001a68 <USBD_Get_USB_Status>

08001c20 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8001c20:	2228      	movs	r2, #40	; 0x28
  if((ep_addr & 0x80) == 0x80)
 8001c22:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8001c26:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8001c2a:	bf1b      	ittet	ne
 8001c2c:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8001c30:	fb01 2102 	mlane	r1, r1, r2, r2
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8001c34:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8001c38:	185b      	addne	r3, r3, r1
 8001c3a:	bf14      	ite	ne
 8001c3c:	7898      	ldrbne	r0, [r3, #2]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8001c3e:	f891 016a 	ldrbeq.w	r0, [r1, #362]	; 0x16a
}
 8001c42:	4770      	bx	lr

08001c44 <USBD_LL_SetUSBAddress>:
{
 8001c44:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8001c46:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8001c4a:	f001 fd52 	bl	80036f2 <HAL_PCD_SetAddress>
}
 8001c4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8001c52:	f7ff bf09 	b.w	8001a68 <USBD_Get_USB_Status>

08001c56 <USBD_LL_Transmit>:
{
 8001c56:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8001c58:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8001c5c:	f002 fab2 	bl	80041c4 <HAL_PCD_EP_Transmit>
}
 8001c60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8001c64:	f7ff bf00 	b.w	8001a68 <USBD_Get_USB_Status>

08001c68 <USBD_LL_PrepareReceive>:
{
 8001c68:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8001c6a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8001c6e:	f002 fa8a 	bl	8004186 <HAL_PCD_EP_Receive>
}
 8001c72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8001c76:	f7ff bef7 	b.w	8001a68 <USBD_Get_USB_Status>

08001c7a <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8001c7a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8001c7e:	f002 ba99 	b.w	80041b4 <HAL_PCD_EP_GetRxCount>
	...

08001c84 <USBD_static_malloc>:
}
 8001c84:	4800      	ldr	r0, [pc, #0]	; (8001c88 <USBD_static_malloc+0x4>)
 8001c86:	4770      	bx	lr
 8001c88:	200012e8 	.word	0x200012e8

08001c8c <USBD_static_free>:
}
 8001c8c:	4770      	bx	lr

08001c8e <HAL_PCDEx_SetConnectionState>:
}
 8001c8e:	4770      	bx	lr

08001c90 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8001c90:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8001c92:	b180      	cbz	r0, 8001cb6 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8001c94:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8001c98:	b113      	cbz	r3, 8001ca0 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8001ca0:	b109      	cbz	r1, 8001ca6 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8001ca2:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8001ca6:	2301      	movs	r3, #1
  pdev->id = id;
 8001ca8:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8001caa:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8001cae:	f7ff ff45 	bl	8001b3c <USBD_LL_Init>

  return USBD_OK;
 8001cb2:	2000      	movs	r0, #0
}
 8001cb4:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8001cb6:	2002      	movs	r0, #2
 8001cb8:	e7fc      	b.n	8001cb4 <USBD_Init+0x24>

08001cba <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8001cba:	b119      	cbz	r1, 8001cc4 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8001cbc:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8001cc0:	2000      	movs	r0, #0
 8001cc2:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8001cc4:	2002      	movs	r0, #2
  }

  return status;
}
 8001cc6:	4770      	bx	lr

08001cc8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8001cc8:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8001cca:	f7ff ff79 	bl	8001bc0 <USBD_LL_Start>

  return USBD_OK;
}
 8001cce:	2000      	movs	r0, #0
 8001cd0:	bd08      	pop	{r3, pc}

08001cd2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8001cd2:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8001cd4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8001cd8:	b90b      	cbnz	r3, 8001cde <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 8001cda:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 8001cdc:	bd08      	pop	{r3, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4798      	blx	r3
 8001ce2:	2800      	cmp	r0, #0
 8001ce4:	d0fa      	beq.n	8001cdc <USBD_SetClassConfig+0xa>
 8001ce6:	e7f8      	b.n	8001cda <USBD_SetClassConfig+0x8>

08001ce8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8001ce8:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8001cea:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	4798      	blx	r3

  return USBD_OK;
}
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	bd08      	pop	{r3, pc}

08001cf6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8001cf6:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8001cf8:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 8001cfc:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8001cfe:	4628      	mov	r0, r5
 8001d00:	f000 fae8 	bl	80022d4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8001d04:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8001d06:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8001d0a:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8001d0e:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8001d12:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8001d16:	f001 031f 	and.w	r3, r1, #31
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d008      	beq.n	8001d30 <USBD_LL_SetupStage+0x3a>
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d00b      	beq.n	8001d3a <USBD_LL_SetupStage+0x44>
 8001d22:	b97b      	cbnz	r3, 8001d44 <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8001d24:	4629      	mov	r1, r5
 8001d26:	4620      	mov	r0, r4
 8001d28:	f000 f8fc 	bl	8001f24 <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 8001d2c:	2000      	movs	r0, #0
 8001d2e:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8001d30:	4629      	mov	r1, r5
 8001d32:	4620      	mov	r0, r4
 8001d34:	f000 fa20 	bl	8002178 <USBD_StdItfReq>
      break;
 8001d38:	e7f8      	b.n	8001d2c <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 8001d3a:	4629      	mov	r1, r5
 8001d3c:	4620      	mov	r0, r4
 8001d3e:	f000 fa3f 	bl	80021c0 <USBD_StdEPReq>
      break;
 8001d42:	e7f3      	b.n	8001d2c <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8001d44:	4620      	mov	r0, r4
 8001d46:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8001d4a:	f7ff ff57 	bl	8001bfc <USBD_LL_StallEP>
      break;
 8001d4e:	e7ed      	b.n	8001d2c <USBD_LL_SetupStage+0x36>

08001d50 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8001d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d52:	4604      	mov	r4, r0
 8001d54:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8001d56:	460d      	mov	r5, r1
 8001d58:	bb39      	cbnz	r1, 8001daa <USBD_LL_DataOutStage+0x5a>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8001d5a:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8001d5e:	2b03      	cmp	r3, #3
 8001d60:	d11c      	bne.n	8001d9c <USBD_LL_DataOutStage+0x4c>
    {
      if (pep->rem_length > pep->maxpacket)
 8001d62:	e9d0 6258 	ldrd	r6, r2, [r0, #352]	; 0x160
 8001d66:	4296      	cmp	r6, r2
 8001d68:	d90b      	bls.n	8001d82 <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -= pep->maxpacket;
 8001d6a:	1ab6      	subs	r6, r6, r2

        USBD_CtlContinueRx(pdev, pdata,
 8001d6c:	42b2      	cmp	r2, r6
 8001d6e:	4639      	mov	r1, r7
        pep->rem_length -= pep->maxpacket;
 8001d70:	f8c0 6160 	str.w	r6, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8001d74:	bf8c      	ite	hi
 8001d76:	b2b2      	uxthhi	r2, r6
 8001d78:	b292      	uxthls	r2, r2
 8001d7a:	f000 fb81 	bl	8002480 <USBD_CtlContinueRx>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8001d7e:	4628      	mov	r0, r5
 8001d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8001d82:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	b123      	cbz	r3, 8001d94 <USBD_LL_DataOutStage+0x44>
 8001d8a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8001d8e:	2a03      	cmp	r2, #3
 8001d90:	d100      	bne.n	8001d94 <USBD_LL_DataOutStage+0x44>
          pdev->pClass->EP0_RxReady(pdev);
 8001d92:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8001d94:	4620      	mov	r0, r4
 8001d96:	f000 fb7b 	bl	8002490 <USBD_CtlSendStatus>
 8001d9a:	e7f0      	b.n	8001d7e <USBD_LL_DataOutStage+0x2e>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8001d9c:	2b05      	cmp	r3, #5
 8001d9e:	d1ee      	bne.n	8001d7e <USBD_LL_DataOutStage+0x2e>
        pdev->ep0_state = USBD_EP0_IDLE;
 8001da0:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8001da4:	f7ff ff2a 	bl	8001bfc <USBD_LL_StallEP>
 8001da8:	e7e9      	b.n	8001d7e <USBD_LL_DataOutStage+0x2e>
  else if ((pdev->pClass->DataOut != NULL) &&
 8001daa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	b133      	cbz	r3, 8001dc0 <USBD_LL_DataOutStage+0x70>
 8001db2:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8001db6:	2a03      	cmp	r2, #3
 8001db8:	d102      	bne.n	8001dc0 <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 8001dba:	4798      	blx	r3
  return USBD_OK;
 8001dbc:	2500      	movs	r5, #0
    pdev->pClass->DataOut(pdev, epnum);
 8001dbe:	e7de      	b.n	8001d7e <USBD_LL_DataOutStage+0x2e>
    return USBD_FAIL;
 8001dc0:	2502      	movs	r5, #2
 8001dc2:	e7dc      	b.n	8001d7e <USBD_LL_DataOutStage+0x2e>

08001dc4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8001dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dc6:	4604      	mov	r4, r0
 8001dc8:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8001dca:	460d      	mov	r5, r1
 8001dcc:	2900      	cmp	r1, #0
 8001dce:	d147      	bne.n	8001e60 <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8001dd0:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d13c      	bne.n	8001e52 <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 8001dd8:	e9d0 6308 	ldrd	r6, r3, [r0, #32]
 8001ddc:	429e      	cmp	r6, r3
 8001dde:	d914      	bls.n	8001e0a <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 8001de0:	1af3      	subs	r3, r6, r3

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8001de2:	4639      	mov	r1, r7
        pep->rem_length -= pep->maxpacket;
 8001de4:	6203      	str	r3, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	f000 fb35 	bl	8002456 <USBD_CtlContinueSendData>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8001dec:	462b      	mov	r3, r5
 8001dee:	462a      	mov	r2, r5
 8001df0:	4629      	mov	r1, r5
 8001df2:	4620      	mov	r0, r4
 8001df4:	f7ff ff38 	bl	8001c68 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8001df8:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d102      	bne.n	8001e06 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8001e06:	4628      	mov	r0, r5
 8001e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8001e0a:	69c2      	ldr	r2, [r0, #28]
 8001e0c:	fbb2 f6f3 	udiv	r6, r2, r3
 8001e10:	fb03 2616 	mls	r6, r3, r6, r2
 8001e14:	b95e      	cbnz	r6, 8001e2e <USBD_LL_DataInStage+0x6a>
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d809      	bhi.n	8001e2e <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 8001e1a:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d205      	bcs.n	8001e2e <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8001e22:	460a      	mov	r2, r1
 8001e24:	f000 fb17 	bl	8002456 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8001e28:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 8001e2c:	e7de      	b.n	8001dec <USBD_LL_DataInStage+0x28>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8001e2e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	b12b      	cbz	r3, 8001e42 <USBD_LL_DataInStage+0x7e>
 8001e36:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8001e3a:	2a03      	cmp	r2, #3
 8001e3c:	d101      	bne.n	8001e42 <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 8001e3e:	4620      	mov	r0, r4
 8001e40:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8001e42:	2180      	movs	r1, #128	; 0x80
 8001e44:	4620      	mov	r0, r4
 8001e46:	f7ff fed9 	bl	8001bfc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	f000 fb2b 	bl	80024a6 <USBD_CtlReceiveStatus>
 8001e50:	e7d2      	b.n	8001df8 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8001e52:	f033 0304 	bics.w	r3, r3, #4
 8001e56:	d1cf      	bne.n	8001df8 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8001e58:	2180      	movs	r1, #128	; 0x80
 8001e5a:	f7ff fecf 	bl	8001bfc <USBD_LL_StallEP>
 8001e5e:	e7cb      	b.n	8001df8 <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 8001e60:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	b133      	cbz	r3, 8001e76 <USBD_LL_DataInStage+0xb2>
 8001e68:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8001e6c:	2a03      	cmp	r2, #3
 8001e6e:	d102      	bne.n	8001e76 <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 8001e70:	4798      	blx	r3
  return USBD_OK;
 8001e72:	2500      	movs	r5, #0
    pdev->pClass->DataIn(pdev, epnum);
 8001e74:	e7c7      	b.n	8001e06 <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 8001e76:	2502      	movs	r5, #2
 8001e78:	e7c5      	b.n	8001e06 <USBD_LL_DataInStage+0x42>

08001e7a <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8001e7a:	2200      	movs	r2, #0
{
 8001e7c:	b570      	push	{r4, r5, r6, lr}
 8001e7e:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8001e80:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8001e82:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8001e84:	4611      	mov	r1, r2
 8001e86:	2340      	movs	r3, #64	; 0x40
 8001e88:	f7ff fea3 	bl	8001bd2 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8001e8c:	4633      	mov	r3, r6
 8001e8e:	2180      	movs	r1, #128	; 0x80
 8001e90:	2200      	movs	r2, #0
 8001e92:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8001e94:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8001e98:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8001e9c:	f7ff fe99 	bl	8001bd2 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8001ea0:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8001ea2:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8001ea6:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8001ea8:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8001eaa:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8001eae:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8001eb2:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8001eb4:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 8001eb8:	b123      	cbz	r3, 8001ec4 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8001eba:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	4798      	blx	r3
  }

  return USBD_OK;
}
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	bd70      	pop	{r4, r5, r6, pc}

08001ec8 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8001ec8:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8001eca:	2000      	movs	r0, #0
 8001ecc:	4770      	bx	lr

08001ece <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8001ece:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8001ed2:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8001ed6:	2304      	movs	r3, #4
 8001ed8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8001edc:	2000      	movs	r0, #0
 8001ede:	4770      	bx	lr

08001ee0 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8001ee0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8001ee4:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8001ee6:	bf04      	itt	eq
 8001ee8:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8001eec:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	4770      	bx	lr

08001ef4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8001ef4:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8001ef6:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8001efa:	2a03      	cmp	r2, #3
 8001efc:	d104      	bne.n	8001f08 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 8001efe:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	b103      	cbz	r3, 8001f08 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8001f06:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8001f08:	2000      	movs	r0, #0
 8001f0a:	bd08      	pop	{r3, pc}

08001f0c <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8001f0c:	b510      	push	{r4, lr}
 8001f0e:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8001f10:	2180      	movs	r1, #128	; 0x80
 8001f12:	f7ff fe73 	bl	8001bfc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8001f16:	4620      	mov	r0, r4
}
 8001f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	f7ff be6d 	b.w	8001bfc <USBD_LL_StallEP>
	...

08001f24 <USBD_StdDevReq>:
{
 8001f24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001f26:	780b      	ldrb	r3, [r1, #0]
 8001f28:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001f2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001f2e:	2b20      	cmp	r3, #32
{
 8001f30:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001f32:	d012      	beq.n	8001f5a <USBD_StdDevReq+0x36>
 8001f34:	2b40      	cmp	r3, #64	; 0x40
 8001f36:	d010      	beq.n	8001f5a <USBD_StdDevReq+0x36>
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d151      	bne.n	8001fe0 <USBD_StdDevReq+0xbc>
      switch (req->bRequest)
 8001f3c:	784b      	ldrb	r3, [r1, #1]
 8001f3e:	2b09      	cmp	r3, #9
 8001f40:	d84e      	bhi.n	8001fe0 <USBD_StdDevReq+0xbc>
 8001f42:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001f46:	00ee      	.short	0x00ee
 8001f48:	004d010a 	.word	0x004d010a
 8001f4c:	004d0103 	.word	0x004d0103
 8001f50:	00130087 	.word	0x00130087
 8001f54:	00d6004d 	.word	0x00d6004d
 8001f58:	00a3      	.short	0x00a3
      pdev->pClass->Setup(pdev, req);
 8001f5a:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8001f5e:	4629      	mov	r1, r5
 8001f60:	4620      	mov	r0, r4
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	4798      	blx	r3
}
 8001f66:	2000      	movs	r0, #0
 8001f68:	b003      	add	sp, #12
 8001f6a:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8001f72:	884b      	ldrh	r3, [r1, #2]
 8001f74:	0a1a      	lsrs	r2, r3, #8
 8001f76:	3a01      	subs	r2, #1
 8001f78:	2a06      	cmp	r2, #6
 8001f7a:	d831      	bhi.n	8001fe0 <USBD_StdDevReq+0xbc>
 8001f7c:	e8df f002 	tbb	[pc, r2]
 8001f80:	30231604 	.word	0x30231604
 8001f84:	4830      	.short	0x4830
 8001f86:	52          	.byte	0x52
 8001f87:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8001f88:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8001f8c:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8001f8e:	7c20      	ldrb	r0, [r4, #16]
 8001f90:	f10d 0106 	add.w	r1, sp, #6
 8001f94:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8001f96:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8001f9a:	2a00      	cmp	r2, #0
 8001f9c:	d056      	beq.n	800204c <USBD_StdDevReq+0x128>
 8001f9e:	88eb      	ldrh	r3, [r5, #6]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d14a      	bne.n	800203a <USBD_StdDevReq+0x116>
        USBD_CtlSendStatus(pdev);
 8001fa4:	4620      	mov	r0, r4
 8001fa6:	f000 fa73 	bl	8002490 <USBD_CtlSendStatus>
 8001faa:	e7dc      	b.n	8001f66 <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8001fac:	7c02      	ldrb	r2, [r0, #16]
      pdev->pClass->Setup(pdev, req);
 8001fae:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8001fb2:	b932      	cbnz	r2, 8001fc2 <USBD_StdDevReq+0x9e>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8001fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8001fb6:	f10d 0006 	add.w	r0, sp, #6
 8001fba:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8001fbc:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8001fbe:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8001fc0:	e7e9      	b.n	8001f96 <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8001fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc4:	e7f7      	b.n	8001fb6 <USBD_StdDevReq+0x92>
      switch ((uint8_t)(req->wValue))
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b05      	cmp	r3, #5
 8001fca:	d809      	bhi.n	8001fe0 <USBD_StdDevReq+0xbc>
 8001fcc:	e8df f003 	tbb	[pc, r3]
 8001fd0:	14100c03 	.word	0x14100c03
 8001fd4:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8001fd6:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8001fda:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1d6      	bne.n	8001f8e <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 8001fe0:	4620      	mov	r0, r4
 8001fe2:	f7ff ff93 	bl	8001f0c <USBD_CtlError.constprop.0>
        break;
 8001fe6:	e7be      	b.n	8001f66 <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8001fe8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	e7f5      	b.n	8001fdc <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8001ff0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	e7f1      	b.n	8001fdc <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8001ff8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	e7ed      	b.n	8001fdc <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8002000:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	e7e9      	b.n	8001fdc <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8002008:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	e7e5      	b.n	8001fdc <USBD_StdDevReq+0xb8>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002010:	7c03      	ldrb	r3, [r0, #16]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1e4      	bne.n	8001fe0 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002016:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800201a:	f10d 0006 	add.w	r0, sp, #6
 800201e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002020:	4798      	blx	r3
  if (err != 0U)
 8002022:	e7b8      	b.n	8001f96 <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002024:	7c03      	ldrb	r3, [r0, #16]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1da      	bne.n	8001fe0 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800202a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800202e:	f10d 0006 	add.w	r0, sp, #6
 8002032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002034:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002036:	2307      	movs	r3, #7
 8002038:	e7c1      	b.n	8001fbe <USBD_StdDevReq+0x9a>
      len = MIN(len, req->wLength);
 800203a:	429a      	cmp	r2, r3
 800203c:	bf28      	it	cs
 800203e:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8002040:	4601      	mov	r1, r0
 8002042:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8002044:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8002048:	f000 f9f8 	bl	800243c <USBD_CtlSendData>
    if (req->wLength == 0U)
 800204c:	88eb      	ldrh	r3, [r5, #6]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d189      	bne.n	8001f66 <USBD_StdDevReq+0x42>
 8002052:	e7a7      	b.n	8001fa4 <USBD_StdDevReq+0x80>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8002054:	888b      	ldrh	r3, [r1, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1c2      	bne.n	8001fe0 <USBD_StdDevReq+0xbc>
 800205a:	88cb      	ldrh	r3, [r1, #6]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1bf      	bne.n	8001fe0 <USBD_StdDevReq+0xbc>
 8002060:	884d      	ldrh	r5, [r1, #2]
 8002062:	2d7f      	cmp	r5, #127	; 0x7f
 8002064:	d8bc      	bhi.n	8001fe0 <USBD_StdDevReq+0xbc>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002066:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800206a:	2b03      	cmp	r3, #3
 800206c:	d0b8      	beq.n	8001fe0 <USBD_StdDevReq+0xbc>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800206e:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8002070:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8002074:	f7ff fde6 	bl	8001c44 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8002078:	4620      	mov	r0, r4
 800207a:	f000 fa09 	bl	8002490 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800207e:	b11d      	cbz	r5, 8002088 <USBD_StdDevReq+0x164>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002080:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8002082:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8002086:	e76e      	b.n	8001f66 <USBD_StdDevReq+0x42>
 8002088:	2301      	movs	r3, #1
 800208a:	e7fa      	b.n	8002082 <USBD_StdDevReq+0x15e>
  cfgidx = (uint8_t)(req->wValue);
 800208c:	7889      	ldrb	r1, [r1, #2]
 800208e:	4d39      	ldr	r5, [pc, #228]	; (8002174 <USBD_StdDevReq+0x250>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8002090:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8002092:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8002094:	d8a4      	bhi.n	8001fe0 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 8002096:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800209a:	2b02      	cmp	r3, #2
 800209c:	d008      	beq.n	80020b0 <USBD_StdDevReq+0x18c>
 800209e:	2b03      	cmp	r3, #3
 80020a0:	d015      	beq.n	80020ce <USBD_StdDevReq+0x1aa>
        USBD_CtlError(pdev, req);
 80020a2:	f7ff ff33 	bl	8001f0c <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 80020a6:	4620      	mov	r0, r4
 80020a8:	7829      	ldrb	r1, [r5, #0]
 80020aa:	f7ff fe1d 	bl	8001ce8 <USBD_ClrClassConfig>
        break;
 80020ae:	e75a      	b.n	8001f66 <USBD_StdDevReq+0x42>
        if (cfgidx)
 80020b0:	2900      	cmp	r1, #0
 80020b2:	f43f af77 	beq.w	8001fa4 <USBD_StdDevReq+0x80>
          pdev->dev_config = cfgidx;
 80020b6:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80020b8:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 80020ba:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80020bc:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80020c0:	4620      	mov	r0, r4
 80020c2:	f7ff fe06 	bl	8001cd2 <USBD_SetClassConfig>
 80020c6:	2802      	cmp	r0, #2
 80020c8:	f47f af6c 	bne.w	8001fa4 <USBD_StdDevReq+0x80>
 80020cc:	e788      	b.n	8001fe0 <USBD_StdDevReq+0xbc>
        if (cfgidx == 0U)
 80020ce:	b931      	cbnz	r1, 80020de <USBD_StdDevReq+0x1ba>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80020d0:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 80020d2:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80020d4:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 80020d8:	f7ff fe06 	bl	8001ce8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80020dc:	e762      	b.n	8001fa4 <USBD_StdDevReq+0x80>
        else if (cfgidx != pdev->dev_config)
 80020de:	6841      	ldr	r1, [r0, #4]
 80020e0:	2901      	cmp	r1, #1
 80020e2:	f43f af5f 	beq.w	8001fa4 <USBD_StdDevReq+0x80>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80020e6:	b2c9      	uxtb	r1, r1
 80020e8:	f7ff fdfe 	bl	8001ce8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80020ec:	7829      	ldrb	r1, [r5, #0]
 80020ee:	6061      	str	r1, [r4, #4]
 80020f0:	e7e6      	b.n	80020c0 <USBD_StdDevReq+0x19c>
  if (req->wLength != 1U)
 80020f2:	88ca      	ldrh	r2, [r1, #6]
 80020f4:	2a01      	cmp	r2, #1
 80020f6:	f47f af73 	bne.w	8001fe0 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 80020fa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d80a      	bhi.n	8002118 <USBD_StdDevReq+0x1f4>
 8002102:	2b00      	cmp	r3, #0
 8002104:	f43f af6c 	beq.w	8001fe0 <USBD_StdDevReq+0xbc>
        pdev->dev_default_config = 0U;
 8002108:	4601      	mov	r1, r0
 800210a:	2300      	movs	r3, #0
 800210c:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8002110:	4620      	mov	r0, r4
 8002112:	f000 f993 	bl	800243c <USBD_CtlSendData>
      break;
 8002116:	e726      	b.n	8001f66 <USBD_StdDevReq+0x42>
    switch (pdev->dev_state)
 8002118:	2b03      	cmp	r3, #3
 800211a:	f47f af61 	bne.w	8001fe0 <USBD_StdDevReq+0xbc>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800211e:	1d01      	adds	r1, r0, #4
 8002120:	e7f6      	b.n	8002110 <USBD_StdDevReq+0x1ec>
  switch (pdev->dev_state)
 8002122:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002126:	3b01      	subs	r3, #1
 8002128:	2b02      	cmp	r3, #2
 800212a:	f63f af59 	bhi.w	8001fe0 <USBD_StdDevReq+0xbc>
      if (req->wLength != 0x2U)
 800212e:	88cb      	ldrh	r3, [r1, #6]
 8002130:	2b02      	cmp	r3, #2
 8002132:	f47f af55 	bne.w	8001fe0 <USBD_StdDevReq+0xbc>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8002136:	2301      	movs	r3, #1
 8002138:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 800213a:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 800213e:	b10b      	cbz	r3, 8002144 <USBD_StdDevReq+0x220>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8002140:	2303      	movs	r3, #3
 8002142:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8002144:	2202      	movs	r2, #2
 8002146:	f104 010c 	add.w	r1, r4, #12
 800214a:	e7e1      	b.n	8002110 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800214c:	884b      	ldrh	r3, [r1, #2]
 800214e:	2b01      	cmp	r3, #1
 8002150:	f47f af09 	bne.w	8001f66 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8002154:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 8002158:	e724      	b.n	8001fa4 <USBD_StdDevReq+0x80>
  switch (pdev->dev_state)
 800215a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800215e:	3b01      	subs	r3, #1
 8002160:	2b02      	cmp	r3, #2
 8002162:	f63f af3d 	bhi.w	8001fe0 <USBD_StdDevReq+0xbc>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002166:	884b      	ldrh	r3, [r1, #2]
 8002168:	2b01      	cmp	r3, #1
 800216a:	f47f aefc 	bne.w	8001f66 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 800216e:	2300      	movs	r3, #0
 8002170:	e7f0      	b.n	8002154 <USBD_StdDevReq+0x230>
 8002172:	bf00      	nop
 8002174:	20001508 	.word	0x20001508

08002178 <USBD_StdItfReq>:
{
 8002178:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800217a:	780b      	ldrb	r3, [r1, #0]
{
 800217c:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800217e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002182:	2a40      	cmp	r2, #64	; 0x40
{
 8002184:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002186:	d001      	beq.n	800218c <USBD_StdItfReq+0x14>
 8002188:	065b      	lsls	r3, r3, #25
 800218a:	d415      	bmi.n	80021b8 <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 800218c:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8002190:	3b01      	subs	r3, #1
 8002192:	2b02      	cmp	r3, #2
 8002194:	d810      	bhi.n	80021b8 <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8002196:	792b      	ldrb	r3, [r5, #4]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d80d      	bhi.n	80021b8 <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800219c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80021a0:	4629      	mov	r1, r5
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	4620      	mov	r0, r4
 80021a6:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80021a8:	88eb      	ldrh	r3, [r5, #6]
 80021aa:	b91b      	cbnz	r3, 80021b4 <USBD_StdItfReq+0x3c>
 80021ac:	b910      	cbnz	r0, 80021b4 <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 80021ae:	4620      	mov	r0, r4
 80021b0:	f000 f96e 	bl	8002490 <USBD_CtlSendStatus>
}
 80021b4:	2000      	movs	r0, #0
 80021b6:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 80021b8:	4620      	mov	r0, r4
 80021ba:	f7ff fea7 	bl	8001f0c <USBD_CtlError.constprop.0>
          break;
 80021be:	e7f9      	b.n	80021b4 <USBD_StdItfReq+0x3c>

080021c0 <USBD_StdEPReq>:
{
 80021c0:	b538      	push	{r3, r4, r5, lr}
 80021c2:	780a      	ldrb	r2, [r1, #0]
 80021c4:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80021c6:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80021ca:	2a20      	cmp	r2, #32
{
 80021cc:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80021ce:	d027      	beq.n	8002220 <USBD_StdEPReq+0x60>
 80021d0:	2a40      	cmp	r2, #64	; 0x40
 80021d2:	d025      	beq.n	8002220 <USBD_StdEPReq+0x60>
 80021d4:	bb92      	cbnz	r2, 800223c <USBD_StdEPReq+0x7c>
      switch (req->bRequest)
 80021d6:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 80021d8:	888d      	ldrh	r5, [r1, #4]
 80021da:	2a01      	cmp	r2, #1
 80021dc:	7909      	ldrb	r1, [r1, #4]
      switch (req->bRequest)
 80021de:	d03d      	beq.n	800225c <USBD_StdEPReq+0x9c>
 80021e0:	2a03      	cmp	r2, #3
 80021e2:	d025      	beq.n	8002230 <USBD_StdEPReq+0x70>
 80021e4:	bb52      	cbnz	r2, 800223c <USBD_StdEPReq+0x7c>
          switch (pdev->dev_state)
 80021e6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d04d      	beq.n	800228a <USBD_StdEPReq+0xca>
 80021ee:	2b03      	cmp	r3, #3
 80021f0:	d124      	bne.n	800223c <USBD_StdEPReq+0x7c>
              if ((ep_addr & 0x80U) == 0x80U)
 80021f2:	2214      	movs	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80021f4:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 80021f8:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80021fc:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 8002200:	d054      	beq.n	80022ac <USBD_StdEPReq+0xec>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	b1d3      	cbz	r3, 800223c <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8002206:	2314      	movs	r3, #20
 8002208:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800220c:	fb05 3303 	mla	r3, r5, r3, r3
 8002210:	18c5      	adds	r5, r0, r3
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8002212:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8002216:	d155      	bne.n	80022c4 <USBD_StdEPReq+0x104>
                pep->status = 0x0001U;
 8002218:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800221a:	2202      	movs	r2, #2
 800221c:	4629      	mov	r1, r5
 800221e:	e041      	b.n	80022a4 <USBD_StdEPReq+0xe4>
      pdev->pClass->Setup(pdev, req);
 8002220:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 8002224:	4619      	mov	r1, r3
 8002226:	4620      	mov	r0, r4
 8002228:	6892      	ldr	r2, [r2, #8]
 800222a:	4790      	blx	r2
}
 800222c:	2000      	movs	r0, #0
 800222e:	bd38      	pop	{r3, r4, r5, pc}
          switch (pdev->dev_state)
 8002230:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002234:	2a02      	cmp	r2, #2
 8002236:	d01f      	beq.n	8002278 <USBD_StdEPReq+0xb8>
 8002238:	2a03      	cmp	r2, #3
 800223a:	d003      	beq.n	8002244 <USBD_StdEPReq+0x84>
              USBD_CtlError(pdev, req);
 800223c:	4620      	mov	r0, r4
 800223e:	f7ff fe65 	bl	8001f0c <USBD_CtlError.constprop.0>
              break;
 8002242:	e7f3      	b.n	800222c <USBD_StdEPReq+0x6c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8002244:	885a      	ldrh	r2, [r3, #2]
 8002246:	b92a      	cbnz	r2, 8002254 <USBD_StdEPReq+0x94>
                if ((ep_addr != 0x00U) &&
 8002248:	064a      	lsls	r2, r1, #25
 800224a:	d003      	beq.n	8002254 <USBD_StdEPReq+0x94>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800224c:	88db      	ldrh	r3, [r3, #6]
 800224e:	b90b      	cbnz	r3, 8002254 <USBD_StdEPReq+0x94>
                  USBD_LL_StallEP(pdev, ep_addr);
 8002250:	f7ff fcd4 	bl	8001bfc <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8002254:	4620      	mov	r0, r4
 8002256:	f000 f91b 	bl	8002490 <USBD_CtlSendStatus>
              break;
 800225a:	e7e7      	b.n	800222c <USBD_StdEPReq+0x6c>
          switch (pdev->dev_state)
 800225c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002260:	2a02      	cmp	r2, #2
 8002262:	d009      	beq.n	8002278 <USBD_StdEPReq+0xb8>
 8002264:	2a03      	cmp	r2, #3
 8002266:	d1e9      	bne.n	800223c <USBD_StdEPReq+0x7c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8002268:	885b      	ldrh	r3, [r3, #2]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1de      	bne.n	800222c <USBD_StdEPReq+0x6c>
                if ((ep_addr & 0x7FU) != 0x00U)
 800226e:	064d      	lsls	r5, r1, #25
 8002270:	d0f0      	beq.n	8002254 <USBD_StdEPReq+0x94>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8002272:	f7ff fccc 	bl	8001c0e <USBD_LL_ClearStallEP>
 8002276:	e7ed      	b.n	8002254 <USBD_StdEPReq+0x94>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8002278:	064b      	lsls	r3, r1, #25
 800227a:	d0df      	beq.n	800223c <USBD_StdEPReq+0x7c>
                USBD_LL_StallEP(pdev, ep_addr);
 800227c:	f7ff fcbe 	bl	8001bfc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8002280:	2180      	movs	r1, #128	; 0x80
 8002282:	4620      	mov	r0, r4
 8002284:	f7ff fcba 	bl	8001bfc <USBD_LL_StallEP>
 8002288:	e7d0      	b.n	800222c <USBD_StdEPReq+0x6c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800228a:	064a      	lsls	r2, r1, #25
 800228c:	d1d6      	bne.n	800223c <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800228e:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 8002290:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8002294:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8002298:	bf4c      	ite	mi
 800229a:	f100 0114 	addmi.w	r1, r0, #20
 800229e:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 80022a2:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80022a4:	4620      	mov	r0, r4
 80022a6:	f000 f8c9 	bl	800243c <USBD_CtlSendData>
              break;
 80022aa:	e7bf      	b.n	800222c <USBD_StdEPReq+0x6c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80022ac:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0c3      	beq.n	800223c <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80022b4:	2314      	movs	r3, #20
                    &pdev->ep_out[ep_addr & 0x7FU];
 80022b6:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80022ba:	fb03 0505 	mla	r5, r3, r5, r0
 80022be:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 80022c2:	e7a6      	b.n	8002212 <USBD_StdEPReq+0x52>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80022c4:	4620      	mov	r0, r4
 80022c6:	f7ff fcab 	bl	8001c20 <USBD_LL_IsStallEP>
 80022ca:	b108      	cbz	r0, 80022d0 <USBD_StdEPReq+0x110>
                pep->status = 0x0001U;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e7a3      	b.n	8002218 <USBD_StdEPReq+0x58>
                pep->status = 0x0000U;
 80022d0:	6028      	str	r0, [r5, #0]
 80022d2:	e7a2      	b.n	800221a <USBD_StdEPReq+0x5a>

080022d4 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 80022d4:	780b      	ldrb	r3, [r1, #0]
 80022d6:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80022d8:	784b      	ldrb	r3, [r1, #1]
 80022da:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80022dc:	78ca      	ldrb	r2, [r1, #3]
 80022de:	788b      	ldrb	r3, [r1, #2]
 80022e0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80022e4:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80022e6:	794a      	ldrb	r2, [r1, #5]
 80022e8:	790b      	ldrb	r3, [r1, #4]
 80022ea:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80022ee:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80022f0:	79ca      	ldrb	r2, [r1, #7]
 80022f2:	798b      	ldrb	r3, [r1, #6]
 80022f4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80022f8:	80c3      	strh	r3, [r0, #6]
}
 80022fa:	4770      	bx	lr

080022fc <USBD_CtlError>:
{
 80022fc:	b510      	push	{r4, lr}
 80022fe:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8002300:	2180      	movs	r1, #128	; 0x80
 8002302:	f7ff fc7b 	bl	8001bfc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8002306:	4620      	mov	r0, r4
}
 8002308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 800230c:	2100      	movs	r1, #0
 800230e:	f7ff bc75 	b.w	8001bfc <USBD_LL_StallEP>

08002312 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8002312:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8002314:	b188      	cbz	r0, 800233a <USBD_GetString+0x28>
 8002316:	2400      	movs	r4, #0
 8002318:	3801      	subs	r0, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 800231a:	4623      	mov	r3, r4
 800231c:	3401      	adds	r4, #1
 800231e:	5d05      	ldrb	r5, [r0, r4]
 8002320:	2d00      	cmp	r5, #0
 8002322:	d1fa      	bne.n	800231a <USBD_GetString+0x8>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8002324:	b2db      	uxtb	r3, r3
 8002326:	3301      	adds	r3, #1
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800232c:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800232e:	2303      	movs	r3, #3
 8002330:	704b      	strb	r3, [r1, #1]
 8002332:	2302      	movs	r3, #2
    while (*desc != '\0')
 8002334:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8002338:	b904      	cbnz	r4, 800233c <USBD_GetString+0x2a>
}
 800233a:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 800233c:	1c5a      	adds	r2, r3, #1
 800233e:	54cc      	strb	r4, [r1, r3]
 8002340:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8002342:	3302      	adds	r3, #2
 8002344:	b2db      	uxtb	r3, r3
 8002346:	548d      	strb	r5, [r1, r2]
 8002348:	e7f4      	b.n	8002334 <USBD_GetString+0x22>
	...

0800234c <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800234c:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800234e:	4801      	ldr	r0, [pc, #4]	; (8002354 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8002350:	800b      	strh	r3, [r1, #0]
}
 8002352:	4770      	bx	lr
 8002354:	20000150 	.word	0x20000150

08002358 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8002358:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800235a:	4801      	ldr	r0, [pc, #4]	; (8002360 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 800235c:	800b      	strh	r3, [r1, #0]
}
 800235e:	4770      	bx	lr
 8002360:	20000164 	.word	0x20000164

08002364 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8002364:	2300      	movs	r3, #0
 8002366:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8002368:	461e      	mov	r6, r3
 800236a:	1c4d      	adds	r5, r1, #1
      pbuf[2 * idx] = (value >> 28) + '0';
 800236c:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 800236e:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 8002372:	bf34      	ite	cc
 8002374:	3430      	addcc	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8002376:	3437      	addcs	r4, #55	; 0x37
 8002378:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 800237c:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 8002380:	3301      	adds	r3, #1
 8002382:	b2dc      	uxtb	r4, r3
 8002384:	42a2      	cmp	r2, r4
    value = value << 4;
 8002386:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 800238a:	d8ef      	bhi.n	800236c <IntToUnicode+0x8>
  }
}
 800238c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002390 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8002390:	231a      	movs	r3, #26
{
 8002392:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8002394:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8002396:	4b0a      	ldr	r3, [pc, #40]	; (80023c0 <USBD_FS_SerialStrDescriptor+0x30>)
 8002398:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	; 0x7e8
  deviceserial0 += deviceserial2;
 800239c:	f8d3 27f0 	ldr.w	r2, [r3, #2032]	; 0x7f0
  if (deviceserial0 != 0)
 80023a0:	1880      	adds	r0, r0, r2
 80023a2:	d00a      	beq.n	80023ba <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80023a4:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	; 0x7ec
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80023a8:	4906      	ldr	r1, [pc, #24]	; (80023c4 <USBD_FS_SerialStrDescriptor+0x34>)
 80023aa:	2208      	movs	r2, #8
 80023ac:	f7ff ffda 	bl	8002364 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80023b0:	2204      	movs	r2, #4
 80023b2:	4620      	mov	r0, r4
 80023b4:	3110      	adds	r1, #16
 80023b6:	f7ff ffd5 	bl	8002364 <IntToUnicode>
}
 80023ba:	4803      	ldr	r0, [pc, #12]	; (80023c8 <USBD_FS_SerialStrDescriptor+0x38>)
 80023bc:	bd10      	pop	{r4, pc}
 80023be:	bf00      	nop
 80023c0:	1ffff000 	.word	0x1ffff000
 80023c4:	2000016a 	.word	0x2000016a
 80023c8:	20000168 	.word	0x20000168

080023cc <USBD_FS_ManufacturerStrDescriptor>:
{
 80023cc:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80023ce:	4c04      	ldr	r4, [pc, #16]	; (80023e0 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 80023d0:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80023d2:	4804      	ldr	r0, [pc, #16]	; (80023e4 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80023d4:	4621      	mov	r1, r4
 80023d6:	f7ff ff9c 	bl	8002312 <USBD_GetString>
}
 80023da:	4620      	mov	r0, r4
 80023dc:	bd10      	pop	{r4, pc}
 80023de:	bf00      	nop
 80023e0:	2000150c 	.word	0x2000150c
 80023e4:	0800973a 	.word	0x0800973a

080023e8 <USBD_FS_ProductStrDescriptor>:
{
 80023e8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80023ea:	4c04      	ldr	r4, [pc, #16]	; (80023fc <USBD_FS_ProductStrDescriptor+0x14>)
{
 80023ec:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80023ee:	4804      	ldr	r0, [pc, #16]	; (8002400 <USBD_FS_ProductStrDescriptor+0x18>)
 80023f0:	4621      	mov	r1, r4
 80023f2:	f7ff ff8e 	bl	8002312 <USBD_GetString>
}
 80023f6:	4620      	mov	r0, r4
 80023f8:	bd10      	pop	{r4, pc}
 80023fa:	bf00      	nop
 80023fc:	2000150c 	.word	0x2000150c
 8002400:	0800974d 	.word	0x0800974d

08002404 <USBD_FS_ConfigStrDescriptor>:
{
 8002404:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8002406:	4c04      	ldr	r4, [pc, #16]	; (8002418 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8002408:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800240a:	4804      	ldr	r0, [pc, #16]	; (800241c <USBD_FS_ConfigStrDescriptor+0x18>)
 800240c:	4621      	mov	r1, r4
 800240e:	f7ff ff80 	bl	8002312 <USBD_GetString>
}
 8002412:	4620      	mov	r0, r4
 8002414:	bd10      	pop	{r4, pc}
 8002416:	bf00      	nop
 8002418:	2000150c 	.word	0x2000150c
 800241c:	08009763 	.word	0x08009763

08002420 <USBD_FS_InterfaceStrDescriptor>:
{
 8002420:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8002422:	4c04      	ldr	r4, [pc, #16]	; (8002434 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8002424:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8002426:	4804      	ldr	r0, [pc, #16]	; (8002438 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8002428:	4621      	mov	r1, r4
 800242a:	f7ff ff72 	bl	8002312 <USBD_GetString>
}
 800242e:	4620      	mov	r0, r4
 8002430:	bd10      	pop	{r4, pc}
 8002432:	bf00      	nop
 8002434:	2000150c 	.word	0x2000150c
 8002438:	0800976e 	.word	0x0800976e

0800243c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800243c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800243e:	2202      	movs	r2, #2
{
 8002440:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 8002442:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8002446:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800244a:	460a      	mov	r2, r1
 800244c:	2100      	movs	r1, #0
 800244e:	f7ff fc02 	bl	8001c56 <USBD_LL_Transmit>

  return USBD_OK;
}
 8002452:	2000      	movs	r0, #0
 8002454:	bd10      	pop	{r4, pc}

08002456 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8002456:	b508      	push	{r3, lr}
 8002458:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800245a:	460a      	mov	r2, r1
 800245c:	2100      	movs	r1, #0
 800245e:	f7ff fbfa 	bl	8001c56 <USBD_LL_Transmit>

  return USBD_OK;
}
 8002462:	2000      	movs	r0, #0
 8002464:	bd08      	pop	{r3, pc}

08002466 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8002466:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8002468:	2203      	movs	r2, #3
{
 800246a:	b510      	push	{r4, lr}
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 800246c:	e9c0 3357 	strd	r3, r3, [r0, #348]	; 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8002470:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8002474:	460a      	mov	r2, r1
 8002476:	2100      	movs	r1, #0
 8002478:	f7ff fbf6 	bl	8001c68 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800247c:	2000      	movs	r0, #0
 800247e:	bd10      	pop	{r4, pc}

08002480 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8002480:	b508      	push	{r3, lr}
 8002482:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8002484:	460a      	mov	r2, r1
 8002486:	2100      	movs	r1, #0
 8002488:	f7ff fbee 	bl	8001c68 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800248c:	2000      	movs	r0, #0
 800248e:	bd08      	pop	{r3, pc}

08002490 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8002490:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8002492:	2304      	movs	r3, #4
 8002494:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8002498:	2300      	movs	r3, #0
 800249a:	461a      	mov	r2, r3
 800249c:	4619      	mov	r1, r3
 800249e:	f7ff fbda 	bl	8001c56 <USBD_LL_Transmit>

  return USBD_OK;
}
 80024a2:	2000      	movs	r0, #0
 80024a4:	bd08      	pop	{r3, pc}

080024a6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80024a6:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80024a8:	2305      	movs	r3, #5
 80024aa:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80024ae:	2300      	movs	r3, #0
 80024b0:	461a      	mov	r2, r3
 80024b2:	4619      	mov	r1, r3
 80024b4:	f7ff fbd8 	bl	8001c68 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80024b8:	2000      	movs	r0, #0
 80024ba:	bd08      	pop	{r3, pc}

080024bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024bc:	f7ff f8f8 	bl	80016b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024c0:	480b      	ldr	r0, [pc, #44]	; (80024f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80024c2:	490c      	ldr	r1, [pc, #48]	; (80024f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80024c4:	4a0c      	ldr	r2, [pc, #48]	; (80024f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80024c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024c8:	e002      	b.n	80024d0 <LoopCopyDataInit>

080024ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ce:	3304      	adds	r3, #4

080024d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024d4:	d3f9      	bcc.n	80024ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024d6:	4a09      	ldr	r2, [pc, #36]	; (80024fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80024d8:	4c09      	ldr	r4, [pc, #36]	; (8002500 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024dc:	e001      	b.n	80024e2 <LoopFillZerobss>

080024de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024e0:	3204      	adds	r2, #4

080024e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024e4:	d3fb      	bcc.n	80024de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024e6:	f003 fb13 	bl	8005b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024ea:	f7fe fbb1 	bl	8000c50 <main>
  bx lr
 80024ee:	4770      	bx	lr
  ldr r0, =_sdata
 80024f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024f4:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 80024f8:	08009b74 	.word	0x08009b74
  ldr r2, =_sbss
 80024fc:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 8002500:	20001720 	.word	0x20001720

08002504 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002504:	e7fe      	b.n	8002504 <ADC1_2_IRQHandler>
	...

08002508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002508:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800250a:	4b0e      	ldr	r3, [pc, #56]	; (8002544 <HAL_InitTick+0x3c>)
{
 800250c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800250e:	7818      	ldrb	r0, [r3, #0]
 8002510:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002514:	fbb3 f3f0 	udiv	r3, r3, r0
 8002518:	4a0b      	ldr	r2, [pc, #44]	; (8002548 <HAL_InitTick+0x40>)
 800251a:	6810      	ldr	r0, [r2, #0]
 800251c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002520:	f000 f9c0 	bl	80028a4 <HAL_SYSTICK_Config>
 8002524:	4604      	mov	r4, r0
 8002526:	b958      	cbnz	r0, 8002540 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002528:	2d0f      	cmp	r5, #15
 800252a:	d809      	bhi.n	8002540 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800252c:	4602      	mov	r2, r0
 800252e:	4629      	mov	r1, r5
 8002530:	f04f 30ff 	mov.w	r0, #4294967295
 8002534:	f000 f976 	bl	8002824 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002538:	4620      	mov	r0, r4
 800253a:	4b04      	ldr	r3, [pc, #16]	; (800254c <HAL_InitTick+0x44>)
 800253c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800253e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002540:	2001      	movs	r0, #1
 8002542:	e7fc      	b.n	800253e <HAL_InitTick+0x36>
 8002544:	20000182 	.word	0x20000182
 8002548:	20000010 	.word	0x20000010
 800254c:	20000184 	.word	0x20000184

08002550 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002550:	4a07      	ldr	r2, [pc, #28]	; (8002570 <HAL_Init+0x20>)
{
 8002552:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002554:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002556:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002558:	f043 0310 	orr.w	r3, r3, #16
 800255c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800255e:	f000 f94f 	bl	8002800 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002562:	200f      	movs	r0, #15
 8002564:	f7ff ffd0 	bl	8002508 <HAL_InitTick>
  HAL_MspInit();
 8002568:	f7fe fef4 	bl	8001354 <HAL_MspInit>
}
 800256c:	2000      	movs	r0, #0
 800256e:	bd08      	pop	{r3, pc}
 8002570:	40022000 	.word	0x40022000

08002574 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002574:	4a03      	ldr	r2, [pc, #12]	; (8002584 <HAL_IncTick+0x10>)
 8002576:	4b04      	ldr	r3, [pc, #16]	; (8002588 <HAL_IncTick+0x14>)
 8002578:	6811      	ldr	r1, [r2, #0]
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	440b      	add	r3, r1
 800257e:	6013      	str	r3, [r2, #0]
}
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	2000170c 	.word	0x2000170c
 8002588:	20000182 	.word	0x20000182

0800258c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800258c:	4b01      	ldr	r3, [pc, #4]	; (8002594 <HAL_GetTick+0x8>)
 800258e:	6818      	ldr	r0, [r3, #0]
}
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	2000170c 	.word	0x2000170c

08002598 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002598:	b538      	push	{r3, r4, r5, lr}
 800259a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800259c:	f7ff fff6 	bl	800258c <HAL_GetTick>
 80025a0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025a2:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80025a4:	bf1e      	ittt	ne
 80025a6:	4b04      	ldrne	r3, [pc, #16]	; (80025b8 <HAL_Delay+0x20>)
 80025a8:	781b      	ldrbne	r3, [r3, #0]
 80025aa:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025ac:	f7ff ffee 	bl	800258c <HAL_GetTick>
 80025b0:	1b43      	subs	r3, r0, r5
 80025b2:	42a3      	cmp	r3, r4
 80025b4:	d3fa      	bcc.n	80025ac <HAL_Delay+0x14>
  {
  }
}
 80025b6:	bd38      	pop	{r3, r4, r5, pc}
 80025b8:	20000182 	.word	0x20000182

080025bc <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80025bc:	2300      	movs	r3, #0
{ 
 80025be:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80025c0:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025c2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 80025c6:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d06c      	beq.n	80026a6 <HAL_ADC_ConfigChannel+0xea>
 80025cc:	2301      	movs	r3, #1
 80025ce:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025d2:	684d      	ldr	r5, [r1, #4]
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80025d4:	6802      	ldr	r2, [r0, #0]
  if (sConfig->Rank < 7U)
 80025d6:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80025d8:	6808      	ldr	r0, [r1, #0]
 80025da:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7U)
 80025de:	d822      	bhi.n	8002626 <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80025e0:	261f      	movs	r6, #31
 80025e2:	6b55      	ldr	r5, [r2, #52]	; 0x34
 80025e4:	3b05      	subs	r3, #5
 80025e6:	409e      	lsls	r6, r3
 80025e8:	ea25 0506 	bic.w	r5, r5, r6
 80025ec:	fa00 f303 	lsl.w	r3, r0, r3
 80025f0:	432b      	orrs	r3, r5
 80025f2:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80025f4:	2809      	cmp	r0, #9
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80025f6:	688b      	ldr	r3, [r1, #8]
 80025f8:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 80025fc:	f04f 0107 	mov.w	r1, #7
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002600:	d929      	bls.n	8002656 <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002602:	68d6      	ldr	r6, [r2, #12]
 8002604:	3d1e      	subs	r5, #30
 8002606:	40a9      	lsls	r1, r5
 8002608:	ea26 0101 	bic.w	r1, r6, r1
 800260c:	40ab      	lsls	r3, r5
 800260e:	430b      	orrs	r3, r1
 8002610:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002612:	f1a0 0310 	sub.w	r3, r0, #16
 8002616:	2b01      	cmp	r3, #1
 8002618:	d925      	bls.n	8002666 <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800261a:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800261c:	2300      	movs	r3, #0
 800261e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8002622:	b002      	add	sp, #8
 8002624:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8002626:	2d0c      	cmp	r5, #12
 8002628:	f04f 051f 	mov.w	r5, #31
 800262c:	d809      	bhi.n	8002642 <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800262e:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8002630:	3b23      	subs	r3, #35	; 0x23
 8002632:	409d      	lsls	r5, r3
 8002634:	ea26 0505 	bic.w	r5, r6, r5
 8002638:	fa00 f303 	lsl.w	r3, r0, r3
 800263c:	432b      	orrs	r3, r5
 800263e:	6313      	str	r3, [r2, #48]	; 0x30
 8002640:	e7d8      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002642:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8002644:	3b41      	subs	r3, #65	; 0x41
 8002646:	409d      	lsls	r5, r3
 8002648:	ea26 0505 	bic.w	r5, r6, r5
 800264c:	fa00 f303 	lsl.w	r3, r0, r3
 8002650:	432b      	orrs	r3, r5
 8002652:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002654:	e7ce      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002656:	6910      	ldr	r0, [r2, #16]
 8002658:	40a9      	lsls	r1, r5
 800265a:	ea20 0101 	bic.w	r1, r0, r1
 800265e:	40ab      	lsls	r3, r5
 8002660:	430b      	orrs	r3, r1
 8002662:	6113      	str	r3, [r2, #16]
 8002664:	e7d9      	b.n	800261a <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 8002666:	4b11      	ldr	r3, [pc, #68]	; (80026ac <HAL_ADC_ConfigChannel+0xf0>)
 8002668:	429a      	cmp	r2, r3
 800266a:	d116      	bne.n	800269a <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800266c:	6893      	ldr	r3, [r2, #8]
 800266e:	021b      	lsls	r3, r3, #8
 8002670:	d4d3      	bmi.n	800261a <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002672:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002674:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002676:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800267a:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800267c:	d1cd      	bne.n	800261a <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800267e:	4b0c      	ldr	r3, [pc, #48]	; (80026b0 <HAL_ADC_ConfigChannel+0xf4>)
 8002680:	4a0c      	ldr	r2, [pc, #48]	; (80026b4 <HAL_ADC_ConfigChannel+0xf8>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	fbb3 f3f2 	udiv	r3, r3, r2
 8002688:	220a      	movs	r2, #10
 800268a:	4353      	muls	r3, r2
            wait_loop_index--;
 800268c:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800268e:	9b01      	ldr	r3, [sp, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0c2      	beq.n	800261a <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 8002694:	9b01      	ldr	r3, [sp, #4]
 8002696:	3b01      	subs	r3, #1
 8002698:	e7f8      	b.n	800268c <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800269a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 800269c:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800269e:	f043 0320 	orr.w	r3, r3, #32
 80026a2:	62a3      	str	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80026a4:	e7ba      	b.n	800261c <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 80026a6:	2002      	movs	r0, #2
 80026a8:	e7bb      	b.n	8002622 <HAL_ADC_ConfigChannel+0x66>
 80026aa:	bf00      	nop
 80026ac:	40012400 	.word	0x40012400
 80026b0:	20000010 	.word	0x20000010
 80026b4:	000f4240 	.word	0x000f4240

080026b8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80026b8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80026ba:	6803      	ldr	r3, [r0, #0]
{
 80026bc:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	07d1      	lsls	r1, r2, #31
 80026c2:	d401      	bmi.n	80026c8 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80026c4:	2000      	movs	r0, #0
}
 80026c6:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	f022 0201 	bic.w	r2, r2, #1
 80026ce:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80026d0:	f7ff ff5c 	bl	800258c <HAL_GetTick>
 80026d4:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026d6:	6823      	ldr	r3, [r4, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	07db      	lsls	r3, r3, #31
 80026dc:	d5f2      	bpl.n	80026c4 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026de:	f7ff ff55 	bl	800258c <HAL_GetTick>
 80026e2:	1b40      	subs	r0, r0, r5
 80026e4:	2802      	cmp	r0, #2
 80026e6:	d9f6      	bls.n	80026d6 <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 80026e8:	6823      	ldr	r3, [r4, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	07da      	lsls	r2, r3, #31
 80026ee:	d5f2      	bpl.n	80026d6 <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_ERROR;
 80026f2:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026f4:	f043 0310 	orr.w	r3, r3, #16
 80026f8:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8002702:	e7e0      	b.n	80026c6 <ADC_ConversionStop_Disable+0xe>

08002704 <HAL_ADC_Init>:
{
 8002704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 8002706:	4604      	mov	r4, r0
 8002708:	2800      	cmp	r0, #0
 800270a:	d06e      	beq.n	80027ea <HAL_ADC_Init+0xe6>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800270c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800270e:	b923      	cbnz	r3, 800271a <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8002710:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8002712:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8002716:	f7fe fe3f 	bl	8001398 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800271a:	4620      	mov	r0, r4
 800271c:	f7ff ffcc 	bl	80026b8 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002720:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002722:	f013 0310 	ands.w	r3, r3, #16
 8002726:	d162      	bne.n	80027ee <HAL_ADC_Init+0xea>
 8002728:	2800      	cmp	r0, #0
 800272a:	d160      	bne.n	80027ee <HAL_ADC_Init+0xea>
    ADC_STATE_CLR_SET(hadc->State,
 800272c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800272e:	69e5      	ldr	r5, [r4, #28]
 8002730:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8002732:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8002736:	f022 0202 	bic.w	r2, r2, #2
 800273a:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800273e:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002740:	68a5      	ldr	r5, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8002742:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002744:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002746:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800274a:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800274e:	d037      	beq.n	80027c0 <HAL_ADC_Init+0xbc>
 8002750:	2d01      	cmp	r5, #1
 8002752:	bf14      	ite	ne
 8002754:	2700      	movne	r7, #0
 8002756:	f44f 7780 	moveq.w	r7, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800275a:	7d26      	ldrb	r6, [r4, #20]
 800275c:	2e01      	cmp	r6, #1
 800275e:	d106      	bne.n	800276e <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002760:	bb82      	cbnz	r2, 80027c4 <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002762:	69a2      	ldr	r2, [r4, #24]
 8002764:	3a01      	subs	r2, #1
 8002766:	ea47 3642 	orr.w	r6, r7, r2, lsl #13
 800276a:	f446 6700 	orr.w	r7, r6, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 800276e:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002770:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8002774:	6856      	ldr	r6, [r2, #4]
 8002776:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 800277a:	ea46 0607 	orr.w	r6, r6, r7
 800277e:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002780:	6897      	ldr	r7, [r2, #8]
 8002782:	4e1d      	ldr	r6, [pc, #116]	; (80027f8 <HAL_ADC_Init+0xf4>)
 8002784:	ea06 0607 	and.w	r6, r6, r7
 8002788:	ea46 0601 	orr.w	r6, r6, r1
 800278c:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800278e:	d001      	beq.n	8002794 <HAL_ADC_Init+0x90>
 8002790:	2d01      	cmp	r5, #1
 8002792:	d102      	bne.n	800279a <HAL_ADC_Init+0x96>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002794:	6923      	ldr	r3, [r4, #16]
 8002796:	3b01      	subs	r3, #1
 8002798:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 800279a:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 800279c:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80027a0:	432b      	orrs	r3, r5
 80027a2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80027a4:	6892      	ldr	r2, [r2, #8]
 80027a6:	4b15      	ldr	r3, [pc, #84]	; (80027fc <HAL_ADC_Init+0xf8>)
 80027a8:	4013      	ands	r3, r2
 80027aa:	4299      	cmp	r1, r3
 80027ac:	d113      	bne.n	80027d6 <HAL_ADC_Init+0xd2>
      ADC_CLEAR_ERRORCODE(hadc);
 80027ae:	2300      	movs	r3, #0
 80027b0:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80027b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80027b4:	f023 0303 	bic.w	r3, r3, #3
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80027be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80027c0:	462f      	mov	r7, r5
 80027c2:	e7ca      	b.n	800275a <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027c4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80027c6:	f042 0220 	orr.w	r2, r2, #32
 80027ca:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027cc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80027ce:	f042 0201 	orr.w	r2, r2, #1
 80027d2:	62e2      	str	r2, [r4, #44]	; 0x2c
 80027d4:	e7cb      	b.n	800276e <HAL_ADC_Init+0x6a>
      ADC_STATE_CLR_SET(hadc->State,
 80027d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80027d8:	f023 0312 	bic.w	r3, r3, #18
 80027dc:	f043 0310 	orr.w	r3, r3, #16
 80027e0:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 80027ea:	2001      	movs	r0, #1
 80027ec:	e7e7      	b.n	80027be <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80027f0:	f043 0310 	orr.w	r3, r3, #16
 80027f4:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 80027f6:	e7f8      	b.n	80027ea <HAL_ADC_Init+0xe6>
 80027f8:	ffe1f7fd 	.word	0xffe1f7fd
 80027fc:	ff1f0efe 	.word	0xff1f0efe

08002800 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002800:	4907      	ldr	r1, [pc, #28]	; (8002820 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002802:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002804:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002806:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800280a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800280e:	0412      	lsls	r2, r2, #16
 8002810:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002814:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800281c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800281e:	4770      	bx	lr
 8002820:	e000ed00 	.word	0xe000ed00

08002824 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002824:	4b16      	ldr	r3, [pc, #88]	; (8002880 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002826:	b530      	push	{r4, r5, lr}
 8002828:	68dc      	ldr	r4, [r3, #12]
 800282a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800282e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002832:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002834:	2b04      	cmp	r3, #4
 8002836:	bf28      	it	cs
 8002838:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800283a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800283c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002840:	bf98      	it	ls
 8002842:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002844:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002848:	bf88      	it	hi
 800284a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800284c:	ea21 0303 	bic.w	r3, r1, r3
 8002850:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002852:	fa05 f404 	lsl.w	r4, r5, r4
 8002856:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 800285a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800285c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002860:	bfac      	ite	ge
 8002862:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002866:	4a07      	ldrlt	r2, [pc, #28]	; (8002884 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002868:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800286c:	b2db      	uxtb	r3, r3
 800286e:	bfab      	itete	ge
 8002870:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002874:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002878:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800287c:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800287e:	bd30      	pop	{r4, r5, pc}
 8002880:	e000ed00 	.word	0xe000ed00
 8002884:	e000ed14 	.word	0xe000ed14

08002888 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002888:	2800      	cmp	r0, #0
 800288a:	db08      	blt.n	800289e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800288c:	2301      	movs	r3, #1
 800288e:	0942      	lsrs	r2, r0, #5
 8002890:	f000 001f 	and.w	r0, r0, #31
 8002894:	fa03 f000 	lsl.w	r0, r3, r0
 8002898:	4b01      	ldr	r3, [pc, #4]	; (80028a0 <HAL_NVIC_EnableIRQ+0x18>)
 800289a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800289e:	4770      	bx	lr
 80028a0:	e000e100 	.word	0xe000e100

080028a4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028a4:	3801      	subs	r0, #1
 80028a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80028aa:	d20b      	bcs.n	80028c4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b0:	21f0      	movs	r1, #240	; 0xf0
 80028b2:	4a05      	ldr	r2, [pc, #20]	; (80028c8 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028b4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028ba:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028bc:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028be:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028c0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028c2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80028c4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80028c6:	4770      	bx	lr
 80028c8:	e000ed00 	.word	0xe000ed00

080028cc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028cc:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80028ce:	b348      	cbz	r0, 8002924 <HAL_DMA_Init+0x58>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80028d0:	2214      	movs	r2, #20
 80028d2:	6801      	ldr	r1, [r0, #0]
 80028d4:	4b14      	ldr	r3, [pc, #80]	; (8002928 <HAL_DMA_Init+0x5c>)
 80028d6:	440b      	add	r3, r1
 80028d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80028e0:	4b12      	ldr	r3, [pc, #72]	; (800292c <HAL_DMA_Init+0x60>)
 80028e2:	63c3      	str	r3, [r0, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028e4:	2302      	movs	r3, #2
 80028e6:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028ea:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80028ee:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028f0:	68c4      	ldr	r4, [r0, #12]
  tmp = hdma->Instance->CCR;
 80028f2:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028f4:	4323      	orrs	r3, r4
 80028f6:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80028f8:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028fc:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028fe:	6944      	ldr	r4, [r0, #20]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002900:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002904:	4323      	orrs	r3, r4
 8002906:	6984      	ldr	r4, [r0, #24]
 8002908:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800290a:	69c4      	ldr	r4, [r0, #28]
 800290c:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 800290e:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002910:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002912:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002914:	2300      	movs	r3, #0
 8002916:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002918:	f880 3020 	strb.w	r3, [r0, #32]
  hdma->State = HAL_DMA_STATE_READY;
 800291c:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21

  return HAL_OK;
 8002920:	4618      	mov	r0, r3
}
 8002922:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002924:	2001      	movs	r0, #1
 8002926:	e7fc      	b.n	8002922 <HAL_DMA_Init+0x56>
 8002928:	bffdfff8 	.word	0xbffdfff8
 800292c:	40020000 	.word	0x40020000

08002930 <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002930:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002934:	2b02      	cmp	r3, #2
 8002936:	d006      	beq.n	8002946 <HAL_DMA_Abort+0x16>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002938:	2304      	movs	r3, #4
 800293a:	6383      	str	r3, [r0, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800293c:	2300      	movs	r3, #0
 800293e:	f880 3020 	strb.w	r3, [r0, #32]
    
    return HAL_ERROR;
 8002942:	2001      	movs	r0, #1
 8002944:	4770      	bx	lr
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002946:	6803      	ldr	r3, [r0, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002948:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	f022 020e 	bic.w	r2, r2, #14
 8002950:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	f022 0201 	bic.w	r2, r2, #1
 8002958:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800295a:	2201      	movs	r2, #1
 800295c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	604b      	str	r3, [r1, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002964:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002966:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  __HAL_UNLOCK(hdma);      
 800296a:	f880 3020 	strb.w	r3, [r0, #32]
  
  return status; 
 800296e:	4618      	mov	r0, r3
}
 8002970:	4770      	bx	lr
	...

08002974 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002974:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002976:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800297a:	2b02      	cmp	r3, #2
 800297c:	d003      	beq.n	8002986 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800297e:	2304      	movs	r3, #4
 8002980:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8002982:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8002984:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002986:	6803      	ldr	r3, [r0, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	f022 020e 	bic.w	r2, r2, #14
 800298e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	f022 0201 	bic.w	r2, r2, #1
 8002996:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002998:	4a18      	ldr	r2, [pc, #96]	; (80029fc <HAL_DMA_Abort_IT+0x88>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d01f      	beq.n	80029de <HAL_DMA_Abort_IT+0x6a>
 800299e:	3214      	adds	r2, #20
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d01e      	beq.n	80029e2 <HAL_DMA_Abort_IT+0x6e>
 80029a4:	3214      	adds	r2, #20
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d01d      	beq.n	80029e6 <HAL_DMA_Abort_IT+0x72>
 80029aa:	3214      	adds	r2, #20
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d01d      	beq.n	80029ec <HAL_DMA_Abort_IT+0x78>
 80029b0:	3214      	adds	r2, #20
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d01d      	beq.n	80029f2 <HAL_DMA_Abort_IT+0x7e>
 80029b6:	3214      	adds	r2, #20
 80029b8:	4293      	cmp	r3, r2
 80029ba:	bf0c      	ite	eq
 80029bc:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80029c0:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80029c4:	4a0e      	ldr	r2, [pc, #56]	; (8002a00 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 80029c6:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80029c8:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80029ca:	2301      	movs	r3, #1
 80029cc:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 80029d0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 80029d2:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80029d6:	b17b      	cbz	r3, 80029f8 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 80029d8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80029da:	4620      	mov	r0, r4
 80029dc:	e7d2      	b.n	8002984 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80029de:	2301      	movs	r3, #1
 80029e0:	e7f0      	b.n	80029c4 <HAL_DMA_Abort_IT+0x50>
 80029e2:	2310      	movs	r3, #16
 80029e4:	e7ee      	b.n	80029c4 <HAL_DMA_Abort_IT+0x50>
 80029e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029ea:	e7eb      	b.n	80029c4 <HAL_DMA_Abort_IT+0x50>
 80029ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029f0:	e7e8      	b.n	80029c4 <HAL_DMA_Abort_IT+0x50>
 80029f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029f6:	e7e5      	b.n	80029c4 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 80029f8:	4618      	mov	r0, r3
 80029fa:	e7c3      	b.n	8002984 <HAL_DMA_Abort_IT+0x10>
 80029fc:	40020008 	.word	0x40020008
 8002a00:	40020000 	.word	0x40020000

08002a04 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a04:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002a06:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a08:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002a0a:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a0c:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002a0e:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002a10:	4095      	lsls	r5, r2
 8002a12:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8002a14:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002a16:	d032      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x7a>
 8002a18:	074d      	lsls	r5, r1, #29
 8002a1a:	d530      	bpl.n	8002a7e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	0696      	lsls	r6, r2, #26
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a20:	bf5e      	ittt	pl
 8002a22:	681a      	ldrpl	r2, [r3, #0]
 8002a24:	f022 0204 	bicpl.w	r2, r2, #4
 8002a28:	601a      	strpl	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a2a:	4a3e      	ldr	r2, [pc, #248]	; (8002b24 <HAL_DMA_IRQHandler+0x120>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d019      	beq.n	8002a64 <HAL_DMA_IRQHandler+0x60>
 8002a30:	3214      	adds	r2, #20
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d018      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x64>
 8002a36:	3214      	adds	r2, #20
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d017      	beq.n	8002a6c <HAL_DMA_IRQHandler+0x68>
 8002a3c:	3214      	adds	r2, #20
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d017      	beq.n	8002a72 <HAL_DMA_IRQHandler+0x6e>
 8002a42:	3214      	adds	r2, #20
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d017      	beq.n	8002a78 <HAL_DMA_IRQHandler+0x74>
 8002a48:	3214      	adds	r2, #20
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	bf0c      	ite	eq
 8002a4e:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8002a52:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8002a56:	4a34      	ldr	r2, [pc, #208]	; (8002b28 <HAL_DMA_IRQHandler+0x124>)
 8002a58:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002a5a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d05e      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x11a>
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
    }
  }
  return;
}
 8002a60:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8002a62:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a64:	2304      	movs	r3, #4
 8002a66:	e7f6      	b.n	8002a56 <HAL_DMA_IRQHandler+0x52>
 8002a68:	2340      	movs	r3, #64	; 0x40
 8002a6a:	e7f4      	b.n	8002a56 <HAL_DMA_IRQHandler+0x52>
 8002a6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a70:	e7f1      	b.n	8002a56 <HAL_DMA_IRQHandler+0x52>
 8002a72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a76:	e7ee      	b.n	8002a56 <HAL_DMA_IRQHandler+0x52>
 8002a78:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a7c:	e7eb      	b.n	8002a56 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002a7e:	2502      	movs	r5, #2
 8002a80:	4095      	lsls	r5, r2
 8002a82:	4225      	tst	r5, r4
 8002a84:	d035      	beq.n	8002af2 <HAL_DMA_IRQHandler+0xee>
 8002a86:	078d      	lsls	r5, r1, #30
 8002a88:	d533      	bpl.n	8002af2 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	0694      	lsls	r4, r2, #26
 8002a8e:	d406      	bmi.n	8002a9e <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	f022 020a 	bic.w	r2, r2, #10
 8002a96:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a9e:	4a21      	ldr	r2, [pc, #132]	; (8002b24 <HAL_DMA_IRQHandler+0x120>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d019      	beq.n	8002ad8 <HAL_DMA_IRQHandler+0xd4>
 8002aa4:	3214      	adds	r2, #20
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d018      	beq.n	8002adc <HAL_DMA_IRQHandler+0xd8>
 8002aaa:	3214      	adds	r2, #20
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d017      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0xdc>
 8002ab0:	3214      	adds	r2, #20
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d017      	beq.n	8002ae6 <HAL_DMA_IRQHandler+0xe2>
 8002ab6:	3214      	adds	r2, #20
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d017      	beq.n	8002aec <HAL_DMA_IRQHandler+0xe8>
 8002abc:	3214      	adds	r2, #20
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	bf0c      	ite	eq
 8002ac2:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8002ac6:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8002aca:	4a17      	ldr	r2, [pc, #92]	; (8002b28 <HAL_DMA_IRQHandler+0x124>)
 8002acc:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8002ace:	2300      	movs	r3, #0
 8002ad0:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8002ad4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002ad6:	e7c1      	b.n	8002a5c <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002ad8:	2302      	movs	r3, #2
 8002ada:	e7f6      	b.n	8002aca <HAL_DMA_IRQHandler+0xc6>
 8002adc:	2320      	movs	r3, #32
 8002ade:	e7f4      	b.n	8002aca <HAL_DMA_IRQHandler+0xc6>
 8002ae0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ae4:	e7f1      	b.n	8002aca <HAL_DMA_IRQHandler+0xc6>
 8002ae6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002aea:	e7ee      	b.n	8002aca <HAL_DMA_IRQHandler+0xc6>
 8002aec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002af0:	e7eb      	b.n	8002aca <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002af2:	2508      	movs	r5, #8
 8002af4:	4095      	lsls	r5, r2
 8002af6:	4225      	tst	r5, r4
 8002af8:	d011      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x11a>
 8002afa:	0709      	lsls	r1, r1, #28
 8002afc:	d50f      	bpl.n	8002b1e <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002afe:	6819      	ldr	r1, [r3, #0]
 8002b00:	f021 010e 	bic.w	r1, r1, #14
 8002b04:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b06:	2301      	movs	r3, #1
 8002b08:	fa03 f202 	lsl.w	r2, r3, r2
 8002b0c:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b0e:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8002b10:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002b14:	2300      	movs	r3, #0
 8002b16:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8002b1a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002b1c:	e79e      	b.n	8002a5c <HAL_DMA_IRQHandler+0x58>
}
 8002b1e:	bc70      	pop	{r4, r5, r6}
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	40020008 	.word	0x40020008
 8002b28:	40020000 	.word	0x40020000

08002b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b30:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8002b32:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b34:	4f64      	ldr	r7, [pc, #400]	; (8002cc8 <HAL_GPIO_Init+0x19c>)
 8002b36:	4b65      	ldr	r3, [pc, #404]	; (8002ccc <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 8002b38:	f8df c194 	ldr.w	ip, [pc, #404]	; 8002cd0 <HAL_GPIO_Init+0x1a4>
 8002b3c:	f8df e194 	ldr.w	lr, [pc, #404]	; 8002cd4 <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b40:	680d      	ldr	r5, [r1, #0]
 8002b42:	fa35 f406 	lsrs.w	r4, r5, r6
 8002b46:	d102      	bne.n	8002b4e <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8002b48:	b003      	add	sp, #12
 8002b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8002b4e:	f04f 0801 	mov.w	r8, #1
 8002b52:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b56:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8002b5a:	ea38 0505 	bics.w	r5, r8, r5
 8002b5e:	d17b      	bne.n	8002c58 <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 8002b60:	684d      	ldr	r5, [r1, #4]
 8002b62:	2d03      	cmp	r5, #3
 8002b64:	d807      	bhi.n	8002b76 <HAL_GPIO_Init+0x4a>
 8002b66:	3d01      	subs	r5, #1
 8002b68:	2d02      	cmp	r5, #2
 8002b6a:	f200 8088 	bhi.w	8002c7e <HAL_GPIO_Init+0x152>
 8002b6e:	e8df f005 	tbb	[pc, r5]
 8002b72:	9b96      	.short	0x9b96
 8002b74:	a1          	.byte	0xa1
 8002b75:	00          	.byte	0x00
 8002b76:	2d12      	cmp	r5, #18
 8002b78:	f000 8099 	beq.w	8002cae <HAL_GPIO_Init+0x182>
 8002b7c:	d86e      	bhi.n	8002c5c <HAL_GPIO_Init+0x130>
 8002b7e:	2d11      	cmp	r5, #17
 8002b80:	f000 808f 	beq.w	8002ca2 <HAL_GPIO_Init+0x176>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b84:	2cff      	cmp	r4, #255	; 0xff
 8002b86:	bf98      	it	ls
 8002b88:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b8a:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b8e:	bf88      	it	hi
 8002b90:	f100 0a04 	addhi.w	sl, r0, #4
 8002b94:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b98:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b9c:	bf88      	it	hi
 8002b9e:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ba0:	fa09 fb05 	lsl.w	fp, r9, r5
 8002ba4:	ea28 080b 	bic.w	r8, r8, fp
 8002ba8:	fa02 f505 	lsl.w	r5, r2, r5
 8002bac:	ea48 0505 	orr.w	r5, r8, r5
 8002bb0:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bb4:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8002bb8:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8002bbc:	d04c      	beq.n	8002c58 <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002bbe:	69bd      	ldr	r5, [r7, #24]
 8002bc0:	f026 0803 	bic.w	r8, r6, #3
 8002bc4:	f045 0501 	orr.w	r5, r5, #1
 8002bc8:	61bd      	str	r5, [r7, #24]
 8002bca:	69bd      	ldr	r5, [r7, #24]
 8002bcc:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8002bd0:	f005 0501 	and.w	r5, r5, #1
 8002bd4:	9501      	str	r5, [sp, #4]
 8002bd6:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bda:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002bde:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002be0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8002be4:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002be8:	fa09 f90b 	lsl.w	r9, r9, fp
 8002bec:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002bf0:	4d39      	ldr	r5, [pc, #228]	; (8002cd8 <HAL_GPIO_Init+0x1ac>)
 8002bf2:	42a8      	cmp	r0, r5
 8002bf4:	d062      	beq.n	8002cbc <HAL_GPIO_Init+0x190>
 8002bf6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002bfa:	42a8      	cmp	r0, r5
 8002bfc:	d060      	beq.n	8002cc0 <HAL_GPIO_Init+0x194>
 8002bfe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002c02:	42a8      	cmp	r0, r5
 8002c04:	d05e      	beq.n	8002cc4 <HAL_GPIO_Init+0x198>
 8002c06:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002c0a:	42a8      	cmp	r0, r5
 8002c0c:	bf0c      	ite	eq
 8002c0e:	2503      	moveq	r5, #3
 8002c10:	2504      	movne	r5, #4
 8002c12:	fa05 f50b 	lsl.w	r5, r5, fp
 8002c16:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8002c1a:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c1e:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c20:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c24:	bf14      	ite	ne
 8002c26:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c28:	43a5      	biceq	r5, r4
 8002c2a:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c2c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c2e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c32:	bf14      	ite	ne
 8002c34:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c36:	43a5      	biceq	r5, r4
 8002c38:	60dd      	str	r5, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8002c3a:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c3c:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002c40:	bf14      	ite	ne
 8002c42:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c44:	43a5      	biceq	r5, r4
 8002c46:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8002c48:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c4a:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002c4e:	bf14      	ite	ne
 8002c50:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c52:	ea25 0404 	biceq.w	r4, r5, r4
 8002c56:	601c      	str	r4, [r3, #0]
	position++;
 8002c58:	3601      	adds	r6, #1
 8002c5a:	e771      	b.n	8002b40 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8002c5c:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8002cdc <HAL_GPIO_Init+0x1b0>
 8002c60:	454d      	cmp	r5, r9
 8002c62:	d00c      	beq.n	8002c7e <HAL_GPIO_Init+0x152>
 8002c64:	d817      	bhi.n	8002c96 <HAL_GPIO_Init+0x16a>
 8002c66:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8002c6a:	454d      	cmp	r5, r9
 8002c6c:	d007      	beq.n	8002c7e <HAL_GPIO_Init+0x152>
 8002c6e:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8002c72:	454d      	cmp	r5, r9
 8002c74:	d003      	beq.n	8002c7e <HAL_GPIO_Init+0x152>
 8002c76:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8002c7a:	454d      	cmp	r5, r9
 8002c7c:	d182      	bne.n	8002b84 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c7e:	688a      	ldr	r2, [r1, #8]
 8002c80:	b1d2      	cbz	r2, 8002cb8 <HAL_GPIO_Init+0x18c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c82:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8002c84:	bf08      	it	eq
 8002c86:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c8a:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8002c8e:	bf18      	it	ne
 8002c90:	f8c0 8014 	strne.w	r8, [r0, #20]
 8002c94:	e776      	b.n	8002b84 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8002c96:	4565      	cmp	r5, ip
 8002c98:	d0f1      	beq.n	8002c7e <HAL_GPIO_Init+0x152>
 8002c9a:	4575      	cmp	r5, lr
 8002c9c:	e7ee      	b.n	8002c7c <HAL_GPIO_Init+0x150>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c9e:	68ca      	ldr	r2, [r1, #12]
          break;
 8002ca0:	e770      	b.n	8002b84 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ca2:	68ca      	ldr	r2, [r1, #12]
 8002ca4:	3204      	adds	r2, #4
          break;
 8002ca6:	e76d      	b.n	8002b84 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ca8:	68ca      	ldr	r2, [r1, #12]
 8002caa:	3208      	adds	r2, #8
          break;
 8002cac:	e76a      	b.n	8002b84 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002cae:	68ca      	ldr	r2, [r1, #12]
 8002cb0:	320c      	adds	r2, #12
          break;
 8002cb2:	e767      	b.n	8002b84 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	e765      	b.n	8002b84 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002cb8:	2204      	movs	r2, #4
 8002cba:	e763      	b.n	8002b84 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002cbc:	2500      	movs	r5, #0
 8002cbe:	e7a8      	b.n	8002c12 <HAL_GPIO_Init+0xe6>
 8002cc0:	2501      	movs	r5, #1
 8002cc2:	e7a6      	b.n	8002c12 <HAL_GPIO_Init+0xe6>
 8002cc4:	2502      	movs	r5, #2
 8002cc6:	e7a4      	b.n	8002c12 <HAL_GPIO_Init+0xe6>
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	40010400 	.word	0x40010400
 8002cd0:	10310000 	.word	0x10310000
 8002cd4:	10320000 	.word	0x10320000
 8002cd8:	40010800 	.word	0x40010800
 8002cdc:	10220000 	.word	0x10220000

08002ce0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ce0:	b10a      	cbz	r2, 8002ce6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ce2:	6101      	str	r1, [r0, #16]
  }
}
 8002ce4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ce6:	0409      	lsls	r1, r1, #16
 8002ce8:	e7fb      	b.n	8002ce2 <HAL_GPIO_WritePin+0x2>

08002cea <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cea:	6801      	ldr	r1, [r0, #0]
 8002cec:	2200      	movs	r2, #0
 8002cee:	694b      	ldr	r3, [r1, #20]
 8002cf0:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8002cf4:	d010      	beq.n	8002d18 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cf6:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8002cfa:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8002cfc:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002cfe:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d00:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d04:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d08:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d0a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d0e:	f043 0304 	orr.w	r3, r3, #4
 8002d12:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8002d14:	2001      	movs	r0, #1
 8002d16:	4770      	bx	lr
  }
  return HAL_OK;
 8002d18:	4618      	mov	r0, r3
}
 8002d1a:	4770      	bx	lr

08002d1c <I2C_WaitOnFlagUntilTimeout>:
{
 8002d1c:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8002d20:	4606      	mov	r6, r0
 8002d22:	460f      	mov	r7, r1
 8002d24:	4691      	mov	r9, r2
 8002d26:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d28:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8002d2c:	6833      	ldr	r3, [r6, #0]
 8002d2e:	f1ba 0f01 	cmp.w	sl, #1
 8002d32:	bf0c      	ite	eq
 8002d34:	695c      	ldreq	r4, [r3, #20]
 8002d36:	699c      	ldrne	r4, [r3, #24]
 8002d38:	ea27 0404 	bic.w	r4, r7, r4
 8002d3c:	b2a4      	uxth	r4, r4
 8002d3e:	fab4 f484 	clz	r4, r4
 8002d42:	0964      	lsrs	r4, r4, #5
 8002d44:	45a1      	cmp	r9, r4
 8002d46:	d001      	beq.n	8002d4c <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8002d48:	2000      	movs	r0, #0
 8002d4a:	e025      	b.n	8002d98 <I2C_WaitOnFlagUntilTimeout+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 8002d4c:	1c6a      	adds	r2, r5, #1
 8002d4e:	d0ee      	beq.n	8002d2e <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d50:	f7ff fc1c 	bl	800258c <HAL_GetTick>
 8002d54:	9b08      	ldr	r3, [sp, #32]
 8002d56:	1ac0      	subs	r0, r0, r3
 8002d58:	42a8      	cmp	r0, r5
 8002d5a:	d801      	bhi.n	8002d60 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002d5c:	2d00      	cmp	r5, #0
 8002d5e:	d1e5      	bne.n	8002d2c <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d60:	6833      	ldr	r3, [r6, #0]
 8002d62:	f1ba 0f01 	cmp.w	sl, #1
 8002d66:	bf0c      	ite	eq
 8002d68:	695b      	ldreq	r3, [r3, #20]
 8002d6a:	699b      	ldrne	r3, [r3, #24]
 8002d6c:	ea27 0303 	bic.w	r3, r7, r3
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	fab3 f383 	clz	r3, r3
 8002d76:	095b      	lsrs	r3, r3, #5
 8002d78:	4599      	cmp	r9, r3
 8002d7a:	d1d7      	bne.n	8002d2c <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002d7c:	2300      	movs	r3, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8002d7e:	2220      	movs	r2, #32
          return HAL_ERROR;
 8002d80:	2001      	movs	r0, #1
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002d82:	6333      	str	r3, [r6, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002d84:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d88:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d8c:	6c32      	ldr	r2, [r6, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8002d8e:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d92:	f042 0220 	orr.w	r2, r2, #32
 8002d96:	6432      	str	r2, [r6, #64]	; 0x40
}
 8002d98:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08002d9c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002da0:	4604      	mov	r4, r0
 8002da2:	460f      	mov	r7, r1
 8002da4:	4616      	mov	r6, r2
 8002da6:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002da8:	6825      	ldr	r5, [r4, #0]
 8002daa:	6968      	ldr	r0, [r5, #20]
 8002dac:	ea27 0000 	bic.w	r0, r7, r0
 8002db0:	b280      	uxth	r0, r0
 8002db2:	b1b8      	cbz	r0, 8002de4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002db4:	696b      	ldr	r3, [r5, #20]
 8002db6:	055a      	lsls	r2, r3, #21
 8002db8:	d516      	bpl.n	8002de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dba:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dbc:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dc2:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dc4:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8002dc8:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dce:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dd2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dd6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002dd8:	f042 0204 	orr.w	r2, r2, #4
          return HAL_ERROR;
 8002ddc:	2001      	movs	r0, #1
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dde:	6422      	str	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8002de0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002de8:	1c73      	adds	r3, r6, #1
 8002dea:	d0de      	beq.n	8002daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dec:	f7ff fbce 	bl	800258c <HAL_GetTick>
 8002df0:	eba0 0008 	sub.w	r0, r0, r8
 8002df4:	42b0      	cmp	r0, r6
 8002df6:	d801      	bhi.n	8002dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 8002df8:	2e00      	cmp	r6, #0
 8002dfa:	d1d5      	bne.n	8002da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002dfc:	6823      	ldr	r3, [r4, #0]
 8002dfe:	695a      	ldr	r2, [r3, #20]
 8002e00:	ea27 0202 	bic.w	r2, r7, r2
 8002e04:	b292      	uxth	r2, r2
 8002e06:	2a00      	cmp	r2, #0
 8002e08:	d0ce      	beq.n	8002da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e0a:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e0c:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e0e:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e10:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e14:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e18:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002e1a:	f042 0220 	orr.w	r2, r2, #32
 8002e1e:	e7dd      	b.n	8002ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08002e20 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8002e20:	b570      	push	{r4, r5, r6, lr}
 8002e22:	4604      	mov	r4, r0
 8002e24:	460d      	mov	r5, r1
 8002e26:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e28:	6823      	ldr	r3, [r4, #0]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	061b      	lsls	r3, r3, #24
 8002e2e:	d501      	bpl.n	8002e34 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8002e30:	2000      	movs	r0, #0
}
 8002e32:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e34:	4620      	mov	r0, r4
 8002e36:	f7ff ff58 	bl	8002cea <I2C_IsAcknowledgeFailed>
 8002e3a:	b9c8      	cbnz	r0, 8002e70 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8002e3c:	1c6a      	adds	r2, r5, #1
 8002e3e:	d0f3      	beq.n	8002e28 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e40:	f7ff fba4 	bl	800258c <HAL_GetTick>
 8002e44:	1b80      	subs	r0, r0, r6
 8002e46:	42a8      	cmp	r0, r5
 8002e48:	d801      	bhi.n	8002e4e <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8002e4a:	2d00      	cmp	r5, #0
 8002e4c:	d1ec      	bne.n	8002e28 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002e4e:	6823      	ldr	r3, [r4, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8002e56:	d1e7      	bne.n	8002e28 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e58:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e5a:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e5c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e60:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e64:	6c22      	ldr	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8002e66:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e6a:	f042 0220 	orr.w	r2, r2, #32
 8002e6e:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002e70:	2001      	movs	r0, #1
 8002e72:	e7de      	b.n	8002e32 <I2C_WaitOnTXEFlagUntilTimeout+0x12>

08002e74 <I2C_RequestMemoryWrite>:
{
 8002e74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e78:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e7a:	6802      	ldr	r2, [r0, #0]
{
 8002e7c:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e7e:	6813      	ldr	r3, [r2, #0]
{
 8002e80:	b085      	sub	sp, #20
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e86:	6013      	str	r3, [r2, #0]
{
 8002e88:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8002e8c:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e8e:	463b      	mov	r3, r7
 8002e90:	2200      	movs	r2, #0
 8002e92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e96:	f8cd 8000 	str.w	r8, [sp]
{
 8002e9a:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e9c:	f7ff ff3e 	bl	8002d1c <I2C_WaitOnFlagUntilTimeout>
 8002ea0:	6823      	ldr	r3, [r4, #0]
 8002ea2:	b138      	cbz	r0, 8002eb4 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	05db      	lsls	r3, r3, #23
 8002ea8:	d502      	bpl.n	8002eb0 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002eaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002eae:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8002eb0:	2003      	movs	r0, #3
 8002eb2:	e00a      	b.n	8002eca <I2C_RequestMemoryWrite+0x56>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002eb4:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8002eb8:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002eba:	463a      	mov	r2, r7
 8002ebc:	4643      	mov	r3, r8
 8002ebe:	4620      	mov	r0, r4
 8002ec0:	4917      	ldr	r1, [pc, #92]	; (8002f20 <I2C_RequestMemoryWrite+0xac>)
 8002ec2:	f7ff ff6b 	bl	8002d9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ec6:	b118      	cbz	r0, 8002ed0 <I2C_RequestMemoryWrite+0x5c>
      return HAL_ERROR;
 8002ec8:	2001      	movs	r0, #1
}
 8002eca:	b005      	add	sp, #20
 8002ecc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ed0:	6823      	ldr	r3, [r4, #0]
 8002ed2:	9003      	str	r0, [sp, #12]
 8002ed4:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ed6:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ed8:	9203      	str	r2, [sp, #12]
 8002eda:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002edc:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ede:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ee0:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ee2:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ee4:	f7ff ff9c 	bl	8002e20 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ee8:	b140      	cbz	r0, 8002efc <I2C_RequestMemoryWrite+0x88>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002eec:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eee:	bf01      	itttt	eq
 8002ef0:	6822      	ldreq	r2, [r4, #0]
 8002ef2:	6813      	ldreq	r3, [r2, #0]
 8002ef4:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8002ef8:	6013      	streq	r3, [r2, #0]
 8002efa:	e7e5      	b.n	8002ec8 <I2C_RequestMemoryWrite+0x54>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002efc:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f00:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f02:	d102      	bne.n	8002f0a <I2C_RequestMemoryWrite+0x96>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f04:	b2ed      	uxtb	r5, r5
 8002f06:	611d      	str	r5, [r3, #16]
 8002f08:	e7df      	b.n	8002eca <I2C_RequestMemoryWrite+0x56>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f0a:	0a2a      	lsrs	r2, r5, #8
 8002f0c:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f0e:	4639      	mov	r1, r7
 8002f10:	4642      	mov	r2, r8
 8002f12:	4620      	mov	r0, r4
 8002f14:	f7ff ff84 	bl	8002e20 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f18:	2800      	cmp	r0, #0
 8002f1a:	d1e6      	bne.n	8002eea <I2C_RequestMemoryWrite+0x76>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f1c:	6823      	ldr	r3, [r4, #0]
 8002f1e:	e7f1      	b.n	8002f04 <I2C_RequestMemoryWrite+0x90>
 8002f20:	00010002 	.word	0x00010002

08002f24 <I2C_RequestMemoryRead>:
{
 8002f24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f28:	469a      	mov	sl, r3
 8002f2a:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f2e:	6803      	ldr	r3, [r0, #0]
{
 8002f30:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f32:	681a      	ldr	r2, [r3, #0]
{
 8002f34:	460e      	mov	r6, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f3a:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f3c:	681a      	ldr	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f46:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f48:	463b      	mov	r3, r7
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f8cd 8000 	str.w	r8, [sp]
{
 8002f50:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f52:	f7ff fee3 	bl	8002d1c <I2C_WaitOnFlagUntilTimeout>
 8002f56:	6823      	ldr	r3, [r4, #0]
 8002f58:	b148      	cbz	r0, 8002f6e <I2C_RequestMemoryRead+0x4a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f5a:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f5c:	05db      	lsls	r3, r3, #23
 8002f5e:	d502      	bpl.n	8002f66 <I2C_RequestMemoryRead+0x42>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f64:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8002f66:	2003      	movs	r0, #3
}
 8002f68:	b004      	add	sp, #16
 8002f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f6e:	fa5f f986 	uxtb.w	r9, r6
 8002f72:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8002f76:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f78:	463a      	mov	r2, r7
 8002f7a:	4643      	mov	r3, r8
 8002f7c:	4620      	mov	r0, r4
 8002f7e:	4929      	ldr	r1, [pc, #164]	; (8003024 <I2C_RequestMemoryRead+0x100>)
 8002f80:	f7ff ff0c 	bl	8002d9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f84:	b108      	cbz	r0, 8002f8a <I2C_RequestMemoryRead+0x66>
    return HAL_ERROR;
 8002f86:	2001      	movs	r0, #1
 8002f88:	e7ee      	b.n	8002f68 <I2C_RequestMemoryRead+0x44>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f8a:	6823      	ldr	r3, [r4, #0]
 8002f8c:	9003      	str	r0, [sp, #12]
 8002f8e:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f90:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f92:	9203      	str	r2, [sp, #12]
 8002f94:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f96:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f98:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f9a:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f9c:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f9e:	f7ff ff3f 	bl	8002e20 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fa2:	b140      	cbz	r0, 8002fb6 <I2C_RequestMemoryRead+0x92>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fa4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fa6:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa8:	bf01      	itttt	eq
 8002faa:	6822      	ldreq	r2, [r4, #0]
 8002fac:	6813      	ldreq	r3, [r2, #0]
 8002fae:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8002fb2:	6013      	streq	r3, [r2, #0]
 8002fb4:	e7e7      	b.n	8002f86 <I2C_RequestMemoryRead+0x62>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fb6:	f1ba 0f01 	cmp.w	sl, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fba:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fbc:	d11a      	bne.n	8002ff4 <I2C_RequestMemoryRead+0xd0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fbe:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fc0:	4642      	mov	r2, r8
 8002fc2:	4639      	mov	r1, r7
 8002fc4:	4620      	mov	r0, r4
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fc6:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fc8:	f7ff ff2a 	bl	8002e20 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	2800      	cmp	r0, #0
 8002fd0:	d1e8      	bne.n	8002fa4 <I2C_RequestMemoryRead+0x80>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fd2:	6821      	ldr	r1, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fd4:	4620      	mov	r0, r4
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fd6:	680b      	ldr	r3, [r1, #0]
 8002fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fdc:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fde:	463b      	mov	r3, r7
 8002fe0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fe4:	f8cd 8000 	str.w	r8, [sp]
 8002fe8:	f7ff fe98 	bl	8002d1c <I2C_WaitOnFlagUntilTimeout>
 8002fec:	6822      	ldr	r2, [r4, #0]
 8002fee:	b160      	cbz	r0, 800300a <I2C_RequestMemoryRead+0xe6>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ff0:	6813      	ldr	r3, [r2, #0]
 8002ff2:	e7b3      	b.n	8002f5c <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ff4:	0a2a      	lsrs	r2, r5, #8
 8002ff6:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ff8:	4639      	mov	r1, r7
 8002ffa:	4642      	mov	r2, r8
 8002ffc:	4620      	mov	r0, r4
 8002ffe:	f7ff ff0f 	bl	8002e20 <I2C_WaitOnTXEFlagUntilTimeout>
 8003002:	2800      	cmp	r0, #0
 8003004:	d1ce      	bne.n	8002fa4 <I2C_RequestMemoryRead+0x80>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003006:	6823      	ldr	r3, [r4, #0]
 8003008:	e7d9      	b.n	8002fbe <I2C_RequestMemoryRead+0x9a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800300a:	f049 0301 	orr.w	r3, r9, #1
 800300e:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003010:	4620      	mov	r0, r4
 8003012:	4643      	mov	r3, r8
 8003014:	463a      	mov	r2, r7
 8003016:	4903      	ldr	r1, [pc, #12]	; (8003024 <I2C_RequestMemoryRead+0x100>)
 8003018:	f7ff fec0 	bl	8002d9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 800301c:	3800      	subs	r0, #0
 800301e:	bf18      	it	ne
 8003020:	2001      	movne	r0, #1
 8003022:	e7a1      	b.n	8002f68 <I2C_RequestMemoryRead+0x44>
 8003024:	00010002 	.word	0x00010002

08003028 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8003028:	b570      	push	{r4, r5, r6, lr}
 800302a:	4604      	mov	r4, r0
 800302c:	460d      	mov	r5, r1
 800302e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003030:	6823      	ldr	r3, [r4, #0]
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	075b      	lsls	r3, r3, #29
 8003036:	d501      	bpl.n	800303c <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8003038:	2000      	movs	r0, #0
}
 800303a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800303c:	4620      	mov	r0, r4
 800303e:	f7ff fe54 	bl	8002cea <I2C_IsAcknowledgeFailed>
 8003042:	b9c8      	cbnz	r0, 8003078 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8003044:	1c6a      	adds	r2, r5, #1
 8003046:	d0f3      	beq.n	8003030 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003048:	f7ff faa0 	bl	800258c <HAL_GetTick>
 800304c:	1b80      	subs	r0, r0, r6
 800304e:	42a8      	cmp	r0, r5
 8003050:	d801      	bhi.n	8003056 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8003052:	2d00      	cmp	r5, #0
 8003054:	d1ec      	bne.n	8003030 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003056:	6823      	ldr	r3, [r4, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	f013 0304 	ands.w	r3, r3, #4
 800305e:	d1e7      	bne.n	8003030 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 8003060:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003062:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003064:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003068:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800306c:	6c22      	ldr	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 800306e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003072:	f042 0220 	orr.w	r2, r2, #32
 8003076:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003078:	2001      	movs	r0, #1
 800307a:	e7de      	b.n	800303a <I2C_WaitOnBTFFlagUntilTimeout+0x12>

0800307c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800307c:	b570      	push	{r4, r5, r6, lr}
 800307e:	4604      	mov	r4, r0
 8003080:	460d      	mov	r5, r1
 8003082:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003084:	6821      	ldr	r1, [r4, #0]
 8003086:	694b      	ldr	r3, [r1, #20]
 8003088:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800308c:	d001      	beq.n	8003092 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 800308e:	2000      	movs	r0, #0
 8003090:	e010      	b.n	80030b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003092:	694a      	ldr	r2, [r1, #20]
 8003094:	06d2      	lsls	r2, r2, #27
 8003096:	d50e      	bpl.n	80030b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003098:	f06f 0210 	mvn.w	r2, #16
 800309c:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 800309e:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80030a0:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030a2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030a6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80030aa:	6c22      	ldr	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 80030ac:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030ae:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80030b0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80030b4:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b6:	f7ff fa69 	bl	800258c <HAL_GetTick>
 80030ba:	1b80      	subs	r0, r0, r6
 80030bc:	42a8      	cmp	r0, r5
 80030be:	d801      	bhi.n	80030c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 80030c0:	2d00      	cmp	r5, #0
 80030c2:	d1df      	bne.n	8003084 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80030c4:	6823      	ldr	r3, [r4, #0]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80030cc:	d1da      	bne.n	8003084 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->State               = HAL_I2C_STATE_READY;
 80030ce:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030d0:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030d2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030d6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030da:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80030dc:	f042 0220 	orr.w	r2, r2, #32
 80030e0:	e7e4      	b.n	80030ac <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
	...

080030e4 <HAL_I2C_Init>:
{
 80030e4:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 80030e6:	4604      	mov	r4, r0
 80030e8:	b908      	cbnz	r0, 80030ee <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 80030ea:	2001      	movs	r0, #1
}
 80030ec:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030ee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80030f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80030f6:	b91b      	cbnz	r3, 8003100 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 80030f8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80030fc:	f7fe f97a 	bl	80013f4 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003100:	2324      	movs	r3, #36	; 0x24
 8003102:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003106:	6823      	ldr	r3, [r4, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	f022 0201 	bic.w	r2, r2, #1
 800310e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003116:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800311e:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003120:	f001 fb4c 	bl	80047bc <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003124:	4a3f      	ldr	r2, [pc, #252]	; (8003224 <HAL_I2C_Init+0x140>)
 8003126:	6863      	ldr	r3, [r4, #4]
 8003128:	4293      	cmp	r3, r2
 800312a:	bf94      	ite	ls
 800312c:	4a3e      	ldrls	r2, [pc, #248]	; (8003228 <HAL_I2C_Init+0x144>)
 800312e:	4a3f      	ldrhi	r2, [pc, #252]	; (800322c <HAL_I2C_Init+0x148>)
 8003130:	4290      	cmp	r0, r2
 8003132:	bf8c      	ite	hi
 8003134:	2200      	movhi	r2, #0
 8003136:	2201      	movls	r2, #1
 8003138:	2a00      	cmp	r2, #0
 800313a:	d1d6      	bne.n	80030ea <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800313c:	4e39      	ldr	r6, [pc, #228]	; (8003224 <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 800313e:	493c      	ldr	r1, [pc, #240]	; (8003230 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003140:	42b3      	cmp	r3, r6
  freqrange = I2C_FREQRANGE(pclk1);
 8003142:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003146:	bf88      	it	hi
 8003148:	f44f 7696 	movhi.w	r6, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800314c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800314e:	f100 30ff 	add.w	r0, r0, #4294967295
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003152:	6855      	ldr	r5, [r2, #4]
 8003154:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8003158:	ea45 0501 	orr.w	r5, r5, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800315c:	bf82      	ittt	hi
 800315e:	4371      	mulhi	r1, r6
 8003160:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 8003164:	fbb1 f1f6 	udivhi	r1, r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003168:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800316a:	6a15      	ldr	r5, [r2, #32]
 800316c:	3101      	adds	r1, #1
 800316e:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8003172:	4329      	orrs	r1, r5
 8003174:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003176:	69d1      	ldr	r1, [r2, #28]
 8003178:	4d2a      	ldr	r5, [pc, #168]	; (8003224 <HAL_I2C_Init+0x140>)
 800317a:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800317e:	42ab      	cmp	r3, r5
 8003180:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003184:	d832      	bhi.n	80031ec <HAL_I2C_Init+0x108>
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	fbb0 f0f3 	udiv	r0, r0, r3
 800318c:	1c43      	adds	r3, r0, #1
 800318e:	f640 70fc 	movw	r0, #4092	; 0xffc
 8003192:	4203      	tst	r3, r0
 8003194:	d042      	beq.n	800321c <HAL_I2C_Init+0x138>
 8003196:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800319a:	430b      	orrs	r3, r1
 800319c:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800319e:	6811      	ldr	r1, [r2, #0]
 80031a0:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80031a4:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80031a8:	4303      	orrs	r3, r0
 80031aa:	430b      	orrs	r3, r1
 80031ac:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031ae:	6891      	ldr	r1, [r2, #8]
 80031b0:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80031b4:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80031b8:	4303      	orrs	r3, r0
 80031ba:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80031be:	430b      	orrs	r3, r1
 80031c0:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031c2:	68d1      	ldr	r1, [r2, #12]
 80031c4:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80031c8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80031cc:	4303      	orrs	r3, r0
 80031ce:	430b      	orrs	r3, r1
 80031d0:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80031d2:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031d4:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 80031d6:	f043 0301 	orr.w	r3, r3, #1
 80031da:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80031dc:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031de:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031e0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031e4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e6:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80031ea:	e77f      	b.n	80030ec <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031ec:	68a5      	ldr	r5, [r4, #8]
 80031ee:	b955      	cbnz	r5, 8003206 <HAL_I2C_Init+0x122>
 80031f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80031f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80031f8:	3301      	adds	r3, #1
 80031fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031fe:	b17b      	cbz	r3, 8003220 <HAL_I2C_Init+0x13c>
 8003200:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003204:	e7c9      	b.n	800319a <HAL_I2C_Init+0xb6>
 8003206:	2519      	movs	r5, #25
 8003208:	436b      	muls	r3, r5
 800320a:	fbb0 f3f3 	udiv	r3, r0, r3
 800320e:	3301      	adds	r3, #1
 8003210:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003214:	b123      	cbz	r3, 8003220 <HAL_I2C_Init+0x13c>
 8003216:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800321a:	e7be      	b.n	800319a <HAL_I2C_Init+0xb6>
 800321c:	2304      	movs	r3, #4
 800321e:	e7bc      	b.n	800319a <HAL_I2C_Init+0xb6>
 8003220:	2301      	movs	r3, #1
 8003222:	e7ba      	b.n	800319a <HAL_I2C_Init+0xb6>
 8003224:	000186a0 	.word	0x000186a0
 8003228:	001e847f 	.word	0x001e847f
 800322c:	003d08ff 	.word	0x003d08ff
 8003230:	000f4240 	.word	0x000f4240

08003234 <HAL_I2C_Mem_Write>:
{
 8003234:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003238:	4604      	mov	r4, r0
 800323a:	4699      	mov	r9, r3
 800323c:	460f      	mov	r7, r1
 800323e:	4690      	mov	r8, r2
 8003240:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8003242:	f7ff f9a3 	bl	800258c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003246:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 800324a:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800324c:	2b20      	cmp	r3, #32
 800324e:	d003      	beq.n	8003258 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8003250:	2002      	movs	r0, #2
}
 8003252:	b003      	add	sp, #12
 8003254:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003258:	9000      	str	r0, [sp, #0]
 800325a:	2319      	movs	r3, #25
 800325c:	2201      	movs	r2, #1
 800325e:	4620      	mov	r0, r4
 8003260:	493a      	ldr	r1, [pc, #232]	; (800334c <HAL_I2C_Mem_Write+0x118>)
 8003262:	f7ff fd5b 	bl	8002d1c <I2C_WaitOnFlagUntilTimeout>
 8003266:	2800      	cmp	r0, #0
 8003268:	d1f2      	bne.n	8003250 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 800326a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800326e:	2b01      	cmp	r3, #1
 8003270:	d0ee      	beq.n	8003250 <HAL_I2C_Mem_Write+0x1c>
 8003272:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003274:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8003276:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800327a:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800327c:	4642      	mov	r2, r8
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800327e:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8003280:	bf58      	it	pl
 8003282:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003284:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 8003286:	bf5c      	itt	pl
 8003288:	f043 0301 	orrpl.w	r3, r3, #1
 800328c:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800328e:	6803      	ldr	r3, [r0, #0]
 8003290:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003294:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003296:	2321      	movs	r3, #33	; 0x21
 8003298:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800329c:	2340      	movs	r3, #64	; 0x40
 800329e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032a2:	2300      	movs	r3, #0
 80032a4:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80032a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032a8:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 80032aa:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032ac:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032b0:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->XferCount   = Size;
 80032b4:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032b6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80032b8:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032ba:	4b25      	ldr	r3, [pc, #148]	; (8003350 <HAL_I2C_Mem_Write+0x11c>)
 80032bc:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032be:	464b      	mov	r3, r9
 80032c0:	f7ff fdd8 	bl	8002e74 <I2C_RequestMemoryWrite>
 80032c4:	2800      	cmp	r0, #0
 80032c6:	d02a      	beq.n	800331e <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 80032c8:	2001      	movs	r0, #1
 80032ca:	e7c2      	b.n	8003252 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032cc:	f7ff fda8 	bl	8002e20 <I2C_WaitOnTXEFlagUntilTimeout>
 80032d0:	b140      	cbz	r0, 80032e4 <HAL_I2C_Mem_Write+0xb0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80032d4:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d6:	bf01      	itttt	eq
 80032d8:	6822      	ldreq	r2, [r4, #0]
 80032da:	6813      	ldreq	r3, [r2, #0]
 80032dc:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80032e0:	6013      	streq	r3, [r2, #0]
 80032e2:	e7f1      	b.n	80032c8 <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032e6:	6827      	ldr	r7, [r4, #0]
 80032e8:	461a      	mov	r2, r3
 80032ea:	f812 1b01 	ldrb.w	r1, [r2], #1
 80032ee:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 80032f0:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80032f2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80032f4:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80032f6:	3a01      	subs	r2, #1
 80032f8:	b292      	uxth	r2, r2
 80032fa:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032fc:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 80032fe:	1e48      	subs	r0, r1, #1
 8003300:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003302:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8003304:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003306:	d50a      	bpl.n	800331e <HAL_I2C_Mem_Write+0xea>
 8003308:	b148      	cbz	r0, 800331e <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800330a:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 800330c:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800330e:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8003310:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003312:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8003314:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8003316:	3b01      	subs	r3, #1
 8003318:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 800331a:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800331c:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800331e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003320:	462a      	mov	r2, r5
 8003322:	4631      	mov	r1, r6
 8003324:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1d0      	bne.n	80032cc <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800332a:	f7ff fe7d 	bl	8003028 <I2C_WaitOnBTFFlagUntilTimeout>
 800332e:	2800      	cmp	r0, #0
 8003330:	d1cf      	bne.n	80032d2 <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003332:	6822      	ldr	r2, [r4, #0]
 8003334:	6813      	ldr	r3, [r2, #0]
 8003336:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800333a:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800333c:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 800333e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8003342:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003346:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 800334a:	e782      	b.n	8003252 <HAL_I2C_Mem_Write+0x1e>
 800334c:	00100002 	.word	0x00100002
 8003350:	ffff0000 	.word	0xffff0000

08003354 <HAL_I2C_Mem_Read>:
{
 8003354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003358:	4699      	mov	r9, r3
  __IO uint32_t count = 0U;
 800335a:	2300      	movs	r3, #0
{
 800335c:	4604      	mov	r4, r0
 800335e:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t count = 0U;
 8003360:	9303      	str	r3, [sp, #12]
{
 8003362:	460d      	mov	r5, r1
 8003364:	4690      	mov	r8, r2
 8003366:	9f12      	ldr	r7, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 8003368:	f7ff f910 	bl	800258c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800336c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8003370:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003372:	2b20      	cmp	r3, #32
 8003374:	d004      	beq.n	8003380 <HAL_I2C_Mem_Read+0x2c>
    return HAL_BUSY;
 8003376:	2502      	movs	r5, #2
}
 8003378:	4628      	mov	r0, r5
 800337a:	b009      	add	sp, #36	; 0x24
 800337c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003380:	9000      	str	r0, [sp, #0]
 8003382:	2319      	movs	r3, #25
 8003384:	2201      	movs	r2, #1
 8003386:	4620      	mov	r0, r4
 8003388:	498d      	ldr	r1, [pc, #564]	; (80035c0 <HAL_I2C_Mem_Read+0x26c>)
 800338a:	f7ff fcc7 	bl	8002d1c <I2C_WaitOnFlagUntilTimeout>
 800338e:	2800      	cmp	r0, #0
 8003390:	d1f1      	bne.n	8003376 <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 8003392:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003396:	2b01      	cmp	r3, #1
 8003398:	d0ed      	beq.n	8003376 <HAL_I2C_Mem_Read+0x22>
 800339a:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800339c:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 800339e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033a2:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033a4:	4629      	mov	r1, r5
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033a6:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 80033a8:	bf58      	it	pl
 80033aa:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033ac:	4642      	mov	r2, r8
      __HAL_I2C_ENABLE(hi2c);
 80033ae:	bf5c      	itt	pl
 80033b0:	f043 0301 	orrpl.w	r3, r3, #1
 80033b4:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033b6:	6803      	ldr	r3, [r0, #0]
 80033b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033bc:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80033be:	2322      	movs	r3, #34	; 0x22
 80033c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033c4:	2340      	movs	r3, #64	; 0x40
 80033c6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033ca:	2300      	movs	r3, #0
 80033cc:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80033ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033d0:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 80033d2:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033d4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033d8:	e9cd 7600 	strd	r7, r6, [sp]
    hi2c->XferCount   = Size;
 80033dc:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80033e0:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033e2:	4b78      	ldr	r3, [pc, #480]	; (80035c4 <HAL_I2C_Mem_Read+0x270>)
 80033e4:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033e6:	464b      	mov	r3, r9
 80033e8:	f7ff fd9c 	bl	8002f24 <I2C_RequestMemoryRead>
 80033ec:	4605      	mov	r5, r0
 80033ee:	b108      	cbz	r0, 80033f4 <HAL_I2C_Mem_Read+0xa0>
              return HAL_ERROR;
 80033f0:	2501      	movs	r5, #1
 80033f2:	e7c1      	b.n	8003378 <HAL_I2C_Mem_Read+0x24>
    if (hi2c->XferSize == 0U)
 80033f4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033f6:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 80033f8:	b9c2      	cbnz	r2, 800342c <HAL_I2C_Mem_Read+0xd8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033fa:	9004      	str	r0, [sp, #16]
 80033fc:	695a      	ldr	r2, [r3, #20]
 80033fe:	9204      	str	r2, [sp, #16]
 8003400:	699a      	ldr	r2, [r3, #24]
 8003402:	9204      	str	r2, [sp, #16]
 8003404:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800340c:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800340e:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 80035c8 <HAL_I2C_Mem_Read+0x274>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003412:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 80035cc <HAL_I2C_Mem_Read+0x278>
    while (hi2c->XferSize > 0U)
 8003416:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003418:	2b00      	cmp	r3, #0
 800341a:	d137      	bne.n	800348c <HAL_I2C_Mem_Read+0x138>
    hi2c->State = HAL_I2C_STATE_READY;
 800341c:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 800341e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8003422:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003426:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800342a:	e7a5      	b.n	8003378 <HAL_I2C_Mem_Read+0x24>
    else if (hi2c->XferSize == 1U)
 800342c:	2a01      	cmp	r2, #1
 800342e:	d111      	bne.n	8003454 <HAL_I2C_Mem_Read+0x100>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800343a:	6823      	ldr	r3, [r4, #0]
 800343c:	9005      	str	r0, [sp, #20]
 800343e:	695a      	ldr	r2, [r3, #20]
 8003440:	9205      	str	r2, [sp, #20]
 8003442:	699a      	ldr	r2, [r3, #24]
 8003444:	9205      	str	r2, [sp, #20]
 8003446:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800344e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003450:	b662      	cpsie	i
}
 8003452:	e7dc      	b.n	800340e <HAL_I2C_Mem_Read+0xba>
    else if (hi2c->XferSize == 2U)
 8003454:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003456:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 8003458:	d10e      	bne.n	8003478 <HAL_I2C_Mem_Read+0x124>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800345a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800345e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003460:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003462:	6823      	ldr	r3, [r4, #0]
 8003464:	9006      	str	r0, [sp, #24]
 8003466:	695a      	ldr	r2, [r3, #20]
 8003468:	9206      	str	r2, [sp, #24]
 800346a:	699a      	ldr	r2, [r3, #24]
 800346c:	9206      	str	r2, [sp, #24]
 800346e:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003476:	e7ea      	b.n	800344e <HAL_I2C_Mem_Read+0xfa>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003478:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800347c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800347e:	9007      	str	r0, [sp, #28]
 8003480:	695a      	ldr	r2, [r3, #20]
 8003482:	9207      	str	r2, [sp, #28]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	9307      	str	r3, [sp, #28]
 8003488:	9b07      	ldr	r3, [sp, #28]
 800348a:	e7c0      	b.n	800340e <HAL_I2C_Mem_Read+0xba>
      if (hi2c->XferSize <= 3U)
 800348c:	2b03      	cmp	r3, #3
 800348e:	d878      	bhi.n	8003582 <HAL_I2C_Mem_Read+0x22e>
        if (hi2c->XferSize == 1U)
 8003490:	2b01      	cmp	r3, #1
 8003492:	d115      	bne.n	80034c0 <HAL_I2C_Mem_Read+0x16c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003494:	4632      	mov	r2, r6
 8003496:	4639      	mov	r1, r7
 8003498:	4620      	mov	r0, r4
 800349a:	f7ff fdef 	bl	800307c <I2C_WaitOnRXNEFlagUntilTimeout>
 800349e:	2800      	cmp	r0, #0
 80034a0:	d1a6      	bne.n	80033f0 <HAL_I2C_Mem_Read+0x9c>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034a2:	6823      	ldr	r3, [r4, #0]
 80034a4:	691a      	ldr	r2, [r3, #16]
 80034a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034a8:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80034aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034ac:	3301      	adds	r3, #1
 80034ae:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80034b0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80034b2:	3b01      	subs	r3, #1
 80034b4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80034b6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80034b8:	3b01      	subs	r3, #1
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	8563      	strh	r3, [r4, #42]	; 0x2a
 80034be:	e7aa      	b.n	8003416 <HAL_I2C_Mem_Read+0xc2>
        else if (hi2c->XferSize == 2U)
 80034c0:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034c2:	f04f 0200 	mov.w	r2, #0
 80034c6:	463b      	mov	r3, r7
 80034c8:	4641      	mov	r1, r8
 80034ca:	4620      	mov	r0, r4
 80034cc:	9600      	str	r6, [sp, #0]
        else if (hi2c->XferSize == 2U)
 80034ce:	d118      	bne.n	8003502 <HAL_I2C_Mem_Read+0x1ae>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034d0:	f7ff fc24 	bl	8002d1c <I2C_WaitOnFlagUntilTimeout>
 80034d4:	2800      	cmp	r0, #0
 80034d6:	d18b      	bne.n	80033f0 <HAL_I2C_Mem_Read+0x9c>
 80034d8:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034da:	6823      	ldr	r3, [r4, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034e2:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034e4:	691a      	ldr	r2, [r3, #16]
 80034e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034e8:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80034ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034ec:	3301      	adds	r3, #1
 80034ee:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80034f0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80034f2:	3b01      	subs	r3, #1
 80034f4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80034f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80034f8:	3b01      	subs	r3, #1
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80034fe:	b662      	cpsie	i
 8003500:	e7cf      	b.n	80034a2 <HAL_I2C_Mem_Read+0x14e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003502:	f7ff fc0b 	bl	8002d1c <I2C_WaitOnFlagUntilTimeout>
 8003506:	2800      	cmp	r0, #0
 8003508:	f47f af72 	bne.w	80033f0 <HAL_I2C_Mem_Read+0x9c>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800350c:	6822      	ldr	r2, [r4, #0]
 800350e:	6813      	ldr	r3, [r2, #0]
 8003510:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003514:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003516:	b672      	cpsid	i
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003518:	f246 11a8 	movw	r1, #25000	; 0x61a8
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800351c:	6823      	ldr	r3, [r4, #0]
 800351e:	691a      	ldr	r2, [r3, #16]
 8003520:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003522:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003524:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003526:	1c53      	adds	r3, r2, #1
 8003528:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800352a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800352c:	3b01      	subs	r3, #1
 800352e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003530:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003532:	3b01      	subs	r3, #1
 8003534:	b29b      	uxth	r3, r3
 8003536:	8563      	strh	r3, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003538:	f8d9 3000 	ldr.w	r3, [r9]
 800353c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003540:	2123      	movs	r1, #35	; 0x23
 8003542:	434b      	muls	r3, r1
 8003544:	9303      	str	r3, [sp, #12]
            count--;
 8003546:	9b03      	ldr	r3, [sp, #12]
 8003548:	3b01      	subs	r3, #1
 800354a:	9303      	str	r3, [sp, #12]
            if (count == 0U)
 800354c:	9b03      	ldr	r3, [sp, #12]
 800354e:	b96b      	cbnz	r3, 800356c <HAL_I2C_Mem_Read+0x218>
              hi2c->State               = HAL_I2C_STATE_READY;
 8003550:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003552:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003554:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003558:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800355c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800355e:	f042 0220 	orr.w	r2, r2, #32
 8003562:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003564:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8003566:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800356a:	e741      	b.n	80033f0 <HAL_I2C_Mem_Read+0x9c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800356c:	6823      	ldr	r3, [r4, #0]
 800356e:	6959      	ldr	r1, [r3, #20]
 8003570:	0748      	lsls	r0, r1, #29
 8003572:	d5e8      	bpl.n	8003546 <HAL_I2C_Mem_Read+0x1f2>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003574:	6819      	ldr	r1, [r3, #0]
 8003576:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800357a:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	7053      	strb	r3, [r2, #1]
 8003580:	e7b3      	b.n	80034ea <HAL_I2C_Mem_Read+0x196>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003582:	4632      	mov	r2, r6
 8003584:	4639      	mov	r1, r7
 8003586:	4620      	mov	r0, r4
 8003588:	f7ff fd78 	bl	800307c <I2C_WaitOnRXNEFlagUntilTimeout>
 800358c:	2800      	cmp	r0, #0
 800358e:	f47f af2f 	bne.w	80033f0 <HAL_I2C_Mem_Read+0x9c>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003592:	6823      	ldr	r3, [r4, #0]
 8003594:	691a      	ldr	r2, [r3, #16]
 8003596:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003598:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800359a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800359c:	1c53      	adds	r3, r2, #1
 800359e:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80035a0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80035a2:	3b01      	subs	r3, #1
 80035a4:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80035a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80035a8:	3b01      	subs	r3, #1
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035ae:	6823      	ldr	r3, [r4, #0]
 80035b0:	6959      	ldr	r1, [r3, #20]
 80035b2:	0749      	lsls	r1, r1, #29
 80035b4:	f57f af2f 	bpl.w	8003416 <HAL_I2C_Mem_Read+0xc2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	7053      	strb	r3, [r2, #1]
 80035bc:	e775      	b.n	80034aa <HAL_I2C_Mem_Read+0x156>
 80035be:	bf00      	nop
 80035c0:	00100002 	.word	0x00100002
 80035c4:	ffff0000 	.word	0xffff0000
 80035c8:	00010004 	.word	0x00010004
 80035cc:	20000010 	.word	0x20000010

080035d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80035d2:	4604      	mov	r4, r0
{
 80035d4:	b087      	sub	sp, #28
  if (hpcd == NULL)
 80035d6:	b310      	cbz	r0, 800361e <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80035d8:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 80035dc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80035e0:	b91b      	cbnz	r3, 80035ea <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80035e2:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80035e6:	f7fe fa47 	bl	8001a78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80035ea:	2303      	movs	r3, #3
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80035ec:	4625      	mov	r5, r4

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035ee:	466e      	mov	r6, sp
  hpcd->State = HAL_PCD_STATE_BUSY;
 80035f0:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 80035f4:	f855 0b10 	ldr.w	r0, [r5], #16
 80035f8:	f001 fd54 	bl	80050a4 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035fe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003600:	682b      	ldr	r3, [r5, #0]
 8003602:	1d27      	adds	r7, r4, #4
 8003604:	6033      	str	r3, [r6, #0]
 8003606:	4626      	mov	r6, r4
 8003608:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800360c:	f856 0b10 	ldr.w	r0, [r6], #16
 8003610:	f001 fd38 	bl	8005084 <USB_CoreInit>
 8003614:	4605      	mov	r5, r0
 8003616:	b120      	cbz	r0, 8003622 <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003618:	2302      	movs	r3, #2
 800361a:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 800361e:	2501      	movs	r5, #1
 8003620:	e04b      	b.n	80036ba <HAL_PCD_Init+0xea>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003622:	4601      	mov	r1, r0
 8003624:	6820      	ldr	r0, [r4, #0]
 8003626:	f001 fd47 	bl	80050b8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800362a:	4629      	mov	r1, r5
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800362c:	f04f 0e01 	mov.w	lr, #1
 8003630:	2528      	movs	r5, #40	; 0x28
    hpcd->IN_ep[i].num = i;
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003632:	460a      	mov	r2, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003634:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8003638:	b2c8      	uxtb	r0, r1
 800363a:	4584      	cmp	ip, r0
 800363c:	f101 0101 	add.w	r1, r1, #1
 8003640:	d81b      	bhi.n	800367a <HAL_PCD_Init+0xaa>
 8003642:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003644:	2528      	movs	r5, #40	; 0x28
 8003646:	4619      	mov	r1, r3
 8003648:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800364a:	4584      	cmp	ip, r0
 800364c:	f103 0301 	add.w	r3, r3, #1
 8003650:	d81f      	bhi.n	8003692 <HAL_PCD_Init+0xc2>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003652:	46ec      	mov	ip, sp
 8003654:	4635      	mov	r5, r6
 8003656:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003658:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800365c:	682b      	ldr	r3, [r5, #0]
 800365e:	f8cc 3000 	str.w	r3, [ip]
 8003662:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8003666:	6820      	ldr	r0, [r4, #0]
 8003668:	f001 fd28 	bl	80050bc <USB_DevInit>
 800366c:	2301      	movs	r3, #1
 800366e:	4605      	mov	r5, r0
 8003670:	b1e0      	cbz	r0, 80036ac <HAL_PCD_Init+0xdc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003672:	2202      	movs	r2, #2
 8003674:	f884 22a9 	strb.w	r2, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8003678:	e7d1      	b.n	800361e <HAL_PCD_Init+0x4e>
    hpcd->IN_ep[i].is_in = 1U;
 800367a:	fb05 4300 	mla	r3, r5, r0, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 800367e:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 8003682:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8003686:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800368a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 800368e:	641a      	str	r2, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003690:	e7d2      	b.n	8003638 <HAL_PCD_Init+0x68>
    hpcd->OUT_ep[i].is_in = 0U;
 8003692:	fb05 4200 	mla	r2, r5, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003696:	e9c2 115e 	strd	r1, r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 800369a:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 800369e:	f882 0168 	strb.w	r0, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036a2:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036a6:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036aa:	e7cd      	b.n	8003648 <HAL_PCD_Init+0x78>
  }

  hpcd->USB_Address = 0U;
 80036ac:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);
 80036b0:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 80036b2:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80036b6:	f001 ffb9 	bl	800562c <USB_DevDisconnect>

  return HAL_OK;
}
 80036ba:	4628      	mov	r0, r5
 80036bc:	b007      	add	sp, #28
 80036be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036c0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80036c0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 80036c2:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
{
 80036c6:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d010      	beq.n	80036ee <HAL_PCD_Start+0x2e>
 80036cc:	2501      	movs	r5, #1
 80036ce:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80036d2:	6800      	ldr	r0, [r0, #0]
 80036d4:	f001 fcdd 	bl	8005092 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80036d8:	4629      	mov	r1, r5
 80036da:	4620      	mov	r0, r4
 80036dc:	f7fe fad7 	bl	8001c8e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80036e0:	6820      	ldr	r0, [r4, #0]
 80036e2:	f001 ffa1 	bl	8005628 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80036e6:	2000      	movs	r0, #0
 80036e8:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 80036ec:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80036ee:	2002      	movs	r0, #2
 80036f0:	e7fc      	b.n	80036ec <HAL_PCD_Start+0x2c>

080036f2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80036f2:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80036f4:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
{
 80036f8:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80036fa:	2a01      	cmp	r2, #1
 80036fc:	d00b      	beq.n	8003716 <HAL_PCD_SetAddress+0x24>
 80036fe:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 8003700:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  __HAL_LOCK(hpcd);
 8003704:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003708:	6800      	ldr	r0, [r0, #0]
 800370a:	f001 ff87 	bl	800561c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800370e:	2000      	movs	r0, #0
 8003710:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8003714:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003716:	2002      	movs	r0, #2
 8003718:	e7fc      	b.n	8003714 <HAL_PCD_SetAddress+0x22>
	...

0800371c <HAL_PCD_IRQHandler>:
{
 800371c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003720:	4604      	mov	r4, r0
 8003722:	b085      	sub	sp, #20
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003724:	6800      	ldr	r0, [r0, #0]
 8003726:	f001 ff83 	bl	8005630 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800372a:	f410 4500 	ands.w	r5, r0, #32768	; 0x8000
 800372e:	f000 8428 	beq.w	8003f82 <HAL_PCD_IRQHandler+0x866>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003732:	f8df 9320 	ldr.w	r9, [pc, #800]	; 8003a54 <HAL_PCD_IRQHandler+0x338>
 8003736:	f8df 8320 	ldr.w	r8, [pc, #800]	; 8003a58 <HAL_PCD_IRQHandler+0x33c>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800373a:	6820      	ldr	r0, [r4, #0]
 800373c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8003740:	041f      	lsls	r7, r3, #16
 8003742:	d402      	bmi.n	800374a <HAL_PCD_IRQHandler+0x2e>
}
 8003744:	b005      	add	sp, #20
 8003746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 800374a:	f8b0 6044 	ldrh.w	r6, [r0, #68]	; 0x44
 800374e:	b2b1      	uxth	r1, r6
    if (epindex == 0U)
 8003750:	f016 060f 	ands.w	r6, r6, #15
 8003754:	f040 80c6 	bne.w	80038e4 <HAL_PCD_IRQHandler+0x1c8>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003758:	f011 0110 	ands.w	r1, r1, #16
 800375c:	d12b      	bne.n	80037b6 <HAL_PCD_IRQHandler+0x9a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800375e:	8803      	ldrh	r3, [r0, #0]
 8003760:	b29b      	uxth	r3, r3
 8003762:	ea03 0309 	and.w	r3, r3, r9
 8003766:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800376a:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800376c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003770:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8003774:	b29b      	uxth	r3, r3
 8003776:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800377a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800377e:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8003782:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003784:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003788:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 800378a:	4413      	add	r3, r2
 800378c:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800378e:	4620      	mov	r0, r4
 8003790:	f7fe f9a1 	bl	8001ad6 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003794:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8003798:	2b00      	cmp	r3, #0
 800379a:	d0ce      	beq.n	800373a <HAL_PCD_IRQHandler+0x1e>
 800379c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800379e:	2a00      	cmp	r2, #0
 80037a0:	d1cb      	bne.n	800373a <HAL_PCD_IRQHandler+0x1e>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80037a2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80037a6:	6821      	ldr	r1, [r4, #0]
 80037a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037ac:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80037b0:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 80037b4:	e7c1      	b.n	800373a <HAL_PCD_IRQHandler+0x1e>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80037b6:	8805      	ldrh	r5, [r0, #0]
 80037b8:	b2ab      	uxth	r3, r5
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80037ba:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
 80037be:	d021      	beq.n	8003804 <HAL_PCD_IRQHandler+0xe8>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80037c0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80037c4:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80037ce:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80037d2:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80037d6:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 80037da:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80037de:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80037e2:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 80037e6:	f002 f971 	bl	8005acc <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80037ea:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80037ec:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80037ee:	8813      	ldrh	r3, [r2, #0]
 80037f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037f4:	051b      	lsls	r3, r3, #20
 80037f6:	0d1b      	lsrs	r3, r3, #20
 80037f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037fc:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80037fe:	f7fe f95b 	bl	8001ab8 <HAL_PCD_SetupStageCallback>
 8003802:	e79a      	b.n	800373a <HAL_PCD_IRQHandler+0x1e>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003804:	0419      	lsls	r1, r3, #16
 8003806:	d598      	bpl.n	800373a <HAL_PCD_IRQHandler+0x1e>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003808:	8803      	ldrh	r3, [r0, #0]
 800380a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800380e:	051b      	lsls	r3, r3, #20
 8003810:	0d1b      	lsrs	r3, r3, #20
 8003812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003816:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003818:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800381c:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8003820:	b29b      	uxth	r3, r3
 8003822:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003826:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800382a:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 800382e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003832:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003836:	b18b      	cbz	r3, 800385c <HAL_PCD_IRQHandler+0x140>
 8003838:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 800383c:	b171      	cbz	r1, 800385c <HAL_PCD_IRQHandler+0x140>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800383e:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8003842:	f002 f943 	bl	8005acc <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8003846:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800384a:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800384e:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8003850:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003852:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8003854:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003858:	f7fe f934 	bl	8001ac4 <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800385c:	6821      	ldr	r1, [r4, #0]
 800385e:	880a      	ldrh	r2, [r1, #0]
 8003860:	b293      	uxth	r3, r2
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003862:	0512      	lsls	r2, r2, #20
 8003864:	f53f af69 	bmi.w	800373a <HAL_PCD_IRQHandler+0x1e>
 8003868:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800386c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003870:	f43f af63 	beq.w	800373a <HAL_PCD_IRQHandler+0x1e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003874:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8003878:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 800387c:	b29b      	uxth	r3, r3
 800387e:	5ac2      	ldrh	r2, [r0, r3]
 8003880:	f8d4 5178 	ldr.w	r5, [r4, #376]	; 0x178
 8003884:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003888:	2d3e      	cmp	r5, #62	; 0x3e
 800388a:	52c2      	strh	r2, [r0, r3]
 800388c:	d90c      	bls.n	80038a8 <HAL_PCD_IRQHandler+0x18c>
 800388e:	5ac2      	ldrh	r2, [r0, r3]
 8003890:	096e      	lsrs	r6, r5, #5
 8003892:	06ef      	lsls	r7, r5, #27
 8003894:	bf08      	it	eq
 8003896:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800389a:	b292      	uxth	r2, r2
 800389c:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 80038a0:	ea42 0208 	orr.w	r2, r2, r8
 80038a4:	b292      	uxth	r2, r2
 80038a6:	e004      	b.n	80038b2 <HAL_PCD_IRQHandler+0x196>
 80038a8:	b99d      	cbnz	r5, 80038d2 <HAL_PCD_IRQHandler+0x1b6>
 80038aa:	5ac2      	ldrh	r2, [r0, r3]
 80038ac:	b292      	uxth	r2, r2
 80038ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038b2:	52c2      	strh	r2, [r0, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80038b4:	880b      	ldrh	r3, [r1, #0]
 80038b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038be:	041b      	lsls	r3, r3, #16
 80038c0:	0c1b      	lsrs	r3, r3, #16
 80038c2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80038c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038ce:	800b      	strh	r3, [r1, #0]
 80038d0:	e733      	b.n	800373a <HAL_PCD_IRQHandler+0x1e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80038d2:	5ac2      	ldrh	r2, [r0, r3]
 80038d4:	086e      	lsrs	r6, r5, #1
 80038d6:	07ed      	lsls	r5, r5, #31
 80038d8:	bf48      	it	mi
 80038da:	3601      	addmi	r6, #1
 80038dc:	b292      	uxth	r2, r2
 80038de:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 80038e2:	e7df      	b.n	80038a4 <HAL_PCD_IRQHandler+0x188>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80038e4:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80038e8:	041a      	lsls	r2, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80038ea:	b29f      	uxth	r7, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80038ec:	f140 80f4 	bpl.w	8003ad8 <HAL_PCD_IRQHandler+0x3bc>
        if (ep->doublebuffer == 0U)
 80038f0:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80038f2:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 80038f6:	fb01 4106 	mla	r1, r1, r6, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80038fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038fe:	051b      	lsls	r3, r3, #20
 8003900:	0d1b      	lsrs	r3, r3, #20
 8003902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003906:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 800390a:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 800390e:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 8003912:	b9b3      	cbnz	r3, 8003942 <HAL_PCD_IRQHandler+0x226>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003914:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003918:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 800391c:	b29b      	uxth	r3, r3
 800391e:	3306      	adds	r3, #6
 8003920:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003924:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8003928:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 800392c:	2d00      	cmp	r5, #0
 800392e:	f000 80b7 	beq.w	8003aa0 <HAL_PCD_IRQHandler+0x384>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003932:	462b      	mov	r3, r5
 8003934:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003938:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800393c:	f002 f8c6 	bl	8005acc <USB_ReadPMA>
 8003940:	e0ae      	b.n	8003aa0 <HAL_PCD_IRQHandler+0x384>
          if (ep->type == EP_TYPE_BULK)
 8003942:	f891 216b 	ldrb.w	r2, [r1, #363]	; 0x16b
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003946:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
          if (ep->type == EP_TYPE_BULK)
 800394a:	2a02      	cmp	r2, #2
 800394c:	f040 8086 	bne.w	8003a5c <HAL_PCD_IRQHandler+0x340>

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003950:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003954:	f417 4a80 	ands.w	sl, r7, #16384	; 0x4000

    if (ep->xfer_len >= count)
 8003958:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800395c:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003960:	b2ad      	uxth	r5, r5
 8003962:	f007 0e40 	and.w	lr, r7, #64	; 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003966:	d03b      	beq.n	80039e0 <HAL_PCD_IRQHandler+0x2c4>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003968:	44ab      	add	fp, r5
 800396a:	f10b 0b02 	add.w	fp, fp, #2
 800396e:	f83c 501b 	ldrh.w	r5, [ip, fp, lsl #1]
 8003972:	f3c5 0509 	ubfx	r5, r5, #0, #10
    if (ep->xfer_len >= count)
 8003976:	4295      	cmp	r5, r2
 8003978:	d913      	bls.n	80039a2 <HAL_PCD_IRQHandler+0x286>
 800397a:	2200      	movs	r2, #0
 800397c:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003980:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003984:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003988:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800398c:	0412      	lsls	r2, r2, #16
 800398e:	0c12      	lsrs	r2, r2, #16
 8003990:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8003994:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003998:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800399c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 80039a0:	e004      	b.n	80039ac <HAL_PCD_IRQHandler+0x290>
      ep->xfer_len -= count;
 80039a2:	1b52      	subs	r2, r2, r5
 80039a4:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 80039a8:	2a00      	cmp	r2, #0
 80039aa:	d0e9      	beq.n	8003980 <HAL_PCD_IRQHandler+0x264>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80039ac:	f1be 0f00 	cmp.w	lr, #0
 80039b0:	d00d      	beq.n	80039ce <HAL_PCD_IRQHandler+0x2b2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80039b2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80039b6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80039ba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80039be:	0412      	lsls	r2, r2, #16
 80039c0:	0c12      	lsrs	r2, r2, #16
 80039c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039c6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80039ca:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 80039ce:	2d00      	cmp	r5, #0
 80039d0:	d066      	beq.n	8003aa0 <HAL_PCD_IRQHandler+0x384>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80039d2:	2128      	movs	r1, #40	; 0x28
 80039d4:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80039d8:	462b      	mov	r3, r5
 80039da:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 80039de:	e7ab      	b.n	8003938 <HAL_PCD_IRQHandler+0x21c>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80039e0:	445d      	add	r5, fp
 80039e2:	3506      	adds	r5, #6
 80039e4:	f83c 5015 	ldrh.w	r5, [ip, r5, lsl #1]
 80039e8:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 80039ec:	4295      	cmp	r5, r2
 80039ee:	d912      	bls.n	8003a16 <HAL_PCD_IRQHandler+0x2fa>
 80039f0:	f8c1 a180 	str.w	sl, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80039f4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80039f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80039fc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a00:	0412      	lsls	r2, r2, #16
 8003a02:	0c12      	lsrs	r2, r2, #16
 8003a04:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8003a08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a10:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8003a14:	e004      	b.n	8003a20 <HAL_PCD_IRQHandler+0x304>
      ep->xfer_len -= count;
 8003a16:	1b52      	subs	r2, r2, r5
 8003a18:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8003a1c:	2a00      	cmp	r2, #0
 8003a1e:	d0e9      	beq.n	80039f4 <HAL_PCD_IRQHandler+0x2d8>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003a20:	f1be 0f00 	cmp.w	lr, #0
 8003a24:	d10d      	bne.n	8003a42 <HAL_PCD_IRQHandler+0x326>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003a26:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003a2a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003a2e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a32:	0412      	lsls	r2, r2, #16
 8003a34:	0c12      	lsrs	r2, r2, #16
 8003a36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a3a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003a3e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 8003a42:	b36d      	cbz	r5, 8003aa0 <HAL_PCD_IRQHandler+0x384>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003a44:	2128      	movs	r1, #40	; 0x28
 8003a46:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003a4a:	462b      	mov	r3, r5
 8003a4c:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8003a50:	e772      	b.n	8003938 <HAL_PCD_IRQHandler+0x21c>
 8003a52:	bf00      	nop
 8003a54:	ffff8f0f 	.word	0xffff8f0f
 8003a58:	ffff8000 	.word	0xffff8000
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003a5c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003a60:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003a64:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a68:	0412      	lsls	r2, r2, #16
 8003a6a:	0c12      	lsrs	r2, r2, #16
 8003a6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a70:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003a74:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003a78:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
 8003a7c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003a80:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8003a84:	ea4f 02c3 	mov.w	r2, r3, lsl #3
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a88:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003a8c:	b29b      	uxth	r3, r3
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003a8e:	d056      	beq.n	8003b3e <HAL_PCD_IRQHandler+0x422>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a90:	3302      	adds	r3, #2
 8003a92:	4413      	add	r3, r2
 8003a94:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8003a98:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 8003a9c:	2d00      	cmp	r5, #0
 8003a9e:	d19b      	bne.n	80039d8 <HAL_PCD_IRQHandler+0x2bc>
        ep->xfer_count += count;
 8003aa0:	2128      	movs	r1, #40	; 0x28
 8003aa2:	4371      	muls	r1, r6
 8003aa4:	1863      	adds	r3, r4, r1
 8003aa6:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8003aaa:	442a      	add	r2, r5
 8003aac:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8003ab0:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8003ab4:	442a      	add	r2, r5
 8003ab6:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003aba:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8003abe:	b11a      	cbz	r2, 8003ac8 <HAL_PCD_IRQHandler+0x3ac>
 8003ac0:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8003ac4:	429d      	cmp	r5, r3
 8003ac6:	d243      	bcs.n	8003b50 <HAL_PCD_IRQHandler+0x434>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003ac8:	2328      	movs	r3, #40	; 0x28
 8003aca:	fb03 4306 	mla	r3, r3, r6, r4
 8003ace:	4620      	mov	r0, r4
 8003ad0:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8003ad4:	f7fd fff6 	bl	8001ac4 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003ad8:	063b      	lsls	r3, r7, #24
 8003ada:	f57f ae2e 	bpl.w	800373a <HAL_PCD_IRQHandler+0x1e>
 8003ade:	f04f 0c28 	mov.w	ip, #40	; 0x28
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003ae2:	6820      	ldr	r0, [r4, #0]
 8003ae4:	fb0c 4506 	mla	r5, ip, r6, r4
 8003ae8:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	ea03 0309 	and.w	r3, r3, r9
 8003af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003af6:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8003afa:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d150      	bne.n	8003ba4 <HAL_PCD_IRQHandler+0x488>
          ep->xfer_len = 0U;
 8003b02:	2100      	movs	r1, #0
          if (ep->doublebuffer != 0U)
 8003b04:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
          ep->xfer_len = 0U;
 8003b08:	6429      	str	r1, [r5, #64]	; 0x40
          if (ep->doublebuffer != 0U)
 8003b0a:	b393      	cbz	r3, 8003b72 <HAL_PCD_IRQHandler+0x456>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003b0c:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 8003b10:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8003b14:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8003b18:	d031      	beq.n	8003b7e <HAL_PCD_IRQHandler+0x462>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b1a:	bb02      	cbnz	r2, 8003b5e <HAL_PCD_IRQHandler+0x442>
 8003b1c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	b292      	uxth	r2, r2
 8003b24:	f200 4004 	addw	r0, r0, #1028	; 0x404
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b28:	4410      	add	r0, r2
 8003b2a:	5a1a      	ldrh	r2, [r3, r0]
 8003b2c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003b30:	521a      	strh	r2, [r3, r0]
 8003b32:	5a1a      	ldrh	r2, [r3, r0]
 8003b34:	b292      	uxth	r2, r2
 8003b36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b3a:	521a      	strh	r2, [r3, r0]
 8003b3c:	e019      	b.n	8003b72 <HAL_PCD_IRQHandler+0x456>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b3e:	3306      	adds	r3, #6
 8003b40:	4413      	add	r3, r2
 8003b42:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8003b46:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 8003b4a:	2d00      	cmp	r5, #0
 8003b4c:	d0a8      	beq.n	8003aa0 <HAL_PCD_IRQHandler+0x384>
 8003b4e:	e77c      	b.n	8003a4a <HAL_PCD_IRQHandler+0x32e>
        ep = &hpcd->OUT_ep[epindex];
 8003b50:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b54:	6820      	ldr	r0, [r4, #0]
 8003b56:	4421      	add	r1, r4
 8003b58:	f001 fd80 	bl	800565c <USB_EPStartXfer>
 8003b5c:	e7bc      	b.n	8003ad8 <HAL_PCD_IRQHandler+0x3bc>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b5e:	2a01      	cmp	r2, #1
 8003b60:	d107      	bne.n	8003b72 <HAL_PCD_IRQHandler+0x456>
 8003b62:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003b66:	f200 4004 	addw	r0, r0, #1028	; 0x404
 8003b6a:	b292      	uxth	r2, r2
 8003b6c:	011b      	lsls	r3, r3, #4
 8003b6e:	4410      	add	r0, r2
 8003b70:	5219      	strh	r1, [r3, r0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b72:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b76:	4620      	mov	r0, r4
 8003b78:	f7fd ffad 	bl	8001ad6 <HAL_PCD_DataInStageCallback>
 8003b7c:	e5dd      	b.n	800373a <HAL_PCD_IRQHandler+0x1e>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b7e:	b932      	cbnz	r2, 8003b8e <HAL_PCD_IRQHandler+0x472>
 8003b80:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003b84:	011b      	lsls	r3, r3, #4
 8003b86:	b292      	uxth	r2, r2
 8003b88:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8003b8c:	e7cc      	b.n	8003b28 <HAL_PCD_IRQHandler+0x40c>
 8003b8e:	2a01      	cmp	r2, #1
 8003b90:	d1ef      	bne.n	8003b72 <HAL_PCD_IRQHandler+0x456>
 8003b92:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003b96:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8003b9a:	b292      	uxth	r2, r2
 8003b9c:	011b      	lsls	r3, r3, #4
 8003b9e:	4410      	add	r0, r2
 8003ba0:	521f      	strh	r7, [r3, r0]
 8003ba2:	e7e6      	b.n	8003b72 <HAL_PCD_IRQHandler+0x456>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003ba4:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003ba8:	f417 7280 	ands.w	r2, r7, #256	; 0x100
            if (ep->xfer_len > TxPctSize)
 8003bac:	6c2b      	ldr	r3, [r5, #64]	; 0x40
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003bae:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 8003bb2:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003bb6:	d11c      	bne.n	8003bf2 <HAL_PCD_IRQHandler+0x4d6>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003bb8:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 8003bbc:	b2bf      	uxth	r7, r7
 8003bbe:	44ba      	add	sl, r7
 8003bc0:	f10a 0a02 	add.w	sl, sl, #2
 8003bc4:	f83e 701a 	ldrh.w	r7, [lr, sl, lsl #1]
            if (ep->xfer_len > TxPctSize)
 8003bc8:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8003bcc:	429f      	cmp	r7, r3
 8003bce:	d301      	bcc.n	8003bd4 <HAL_PCD_IRQHandler+0x4b8>
 8003bd0:	642a      	str	r2, [r5, #64]	; 0x40
 8003bd2:	e7d0      	b.n	8003b76 <HAL_PCD_IRQHandler+0x45a>
              ep->xfer_len -= TxPctSize;
 8003bd4:	1bdb      	subs	r3, r3, r7
 8003bd6:	642b      	str	r3, [r5, #64]	; 0x40
              ep->xfer_buff += TxPctSize;
 8003bd8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
        ep = &hpcd->IN_ep[epindex];
 8003bda:	fb06 cc0c 	mla	ip, r6, ip, ip
              ep->xfer_buff += TxPctSize;
 8003bde:	443b      	add	r3, r7
 8003be0:	63eb      	str	r3, [r5, #60]	; 0x3c
              ep->xfer_count += TxPctSize;
 8003be2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003be4:	eb04 010c 	add.w	r1, r4, ip
              ep->xfer_count += TxPctSize;
 8003be8:	443b      	add	r3, r7
 8003bea:	646b      	str	r3, [r5, #68]	; 0x44
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003bec:	f001 fd36 	bl	800565c <USB_EPStartXfer>
 8003bf0:	e5a3      	b.n	800373a <HAL_PCD_IRQHandler+0x1e>

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003bf2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003bf6:	f017 0c40 	ands.w	ip, r7, #64	; 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003bfa:	b292      	uxth	r2, r2
 8003bfc:	4452      	add	r2, sl
 8003bfe:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c02:	f000 80dc 	beq.w	8003dbe <HAL_PCD_IRQHandler+0x6a2>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c06:	3202      	adds	r2, #2
 8003c08:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 8003c0c:	f04f 0c28 	mov.w	ip, #40	; 0x28

    if (ep->xfer_len > TxPctSize)
 8003c10:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003c14:	429a      	cmp	r2, r3
    {
      ep->xfer_len -= TxPctSize;
    }
    else
    {
      ep->xfer_len = 0U;
 8003c16:	bf28      	it	cs
 8003c18:	2300      	movcs	r3, #0
 8003c1a:	fb0c 4c06 	mla	ip, ip, r6, r4
      ep->xfer_len -= TxPctSize;
 8003c1e:	bf38      	it	cc
 8003c20:	1a9b      	subcc	r3, r3, r2
 8003c22:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003c26:	b2bf      	uxth	r7, r7
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d14d      	bne.n	8003cc8 <HAL_PCD_IRQHandler+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c2c:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8003c30:	2a00      	cmp	r2, #0
 8003c32:	d136      	bne.n	8003ca2 <HAL_PCD_IRQHandler+0x586>
 8003c34:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8003c38:	010b      	lsls	r3, r1, #4
 8003c3a:	b2b2      	uxth	r2, r6
 8003c3c:	f200 4604 	addw	r6, r0, #1028	; 0x404
 8003c40:	4416      	add	r6, r2
 8003c42:	5af2      	ldrh	r2, [r6, r3]
 8003c44:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003c48:	52f2      	strh	r2, [r6, r3]
 8003c4a:	5af2      	ldrh	r2, [r6, r3]
 8003c4c:	b292      	uxth	r2, r2
 8003c4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c52:	52f2      	strh	r2, [r6, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c54:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003c58:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8003c5c:	b292      	uxth	r2, r2
 8003c5e:	4410      	add	r0, r2
 8003c60:	5ac2      	ldrh	r2, [r0, r3]
 8003c62:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003c66:	52c2      	strh	r2, [r0, r3]
 8003c68:	5ac2      	ldrh	r2, [r0, r3]
 8003c6a:	b292      	uxth	r2, r2
 8003c6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c70:	52c2      	strh	r2, [r0, r3]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c72:	4620      	mov	r0, r4
 8003c74:	f7fd ff2f 	bl	8001ad6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c78:	2f00      	cmp	r7, #0
 8003c7a:	f000 80dc 	beq.w	8003e36 <HAL_PCD_IRQHandler+0x71a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c7e:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8003c82:	6822      	ldr	r2, [r4, #0]
 8003c84:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003c88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c90:	041b      	lsls	r3, r3, #16
 8003c92:	0c1b      	lsrs	r3, r3, #16
 8003c94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c9c:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8003ca0:	e0c9      	b.n	8003e36 <HAL_PCD_IRQHandler+0x71a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ca2:	2a01      	cmp	r2, #1
 8003ca4:	d1e5      	bne.n	8003c72 <HAL_PCD_IRQHandler+0x556>
 8003ca6:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8003caa:	010a      	lsls	r2, r1, #4
 8003cac:	fa1f fc86 	uxth.w	ip, r6
 8003cb0:	f200 4604 	addw	r6, r0, #1028	; 0x404
 8003cb4:	4466      	add	r6, ip
 8003cb6:	52b3      	strh	r3, [r6, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003cb8:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8003cbc:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8003cc0:	b2b6      	uxth	r6, r6
 8003cc2:	4430      	add	r0, r6
 8003cc4:	5283      	strh	r3, [r0, r2]
 8003cc6:	e7d4      	b.n	8003c72 <HAL_PCD_IRQHandler+0x556>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003cc8:	b16f      	cbz	r7, 8003ce6 <HAL_PCD_IRQHandler+0x5ca>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003cca:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd6:	041b      	lsls	r3, r3, #16
 8003cd8:	0c1b      	lsrs	r3, r3, #16
 8003cda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ce2:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8003ce6:	2728      	movs	r7, #40	; 0x28
 8003ce8:	fb07 4706 	mla	r7, r7, r6, r4
 8003cec:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	f040 80a0 	bne.w	8003e36 <HAL_PCD_IRQHandler+0x71a>
        ep->xfer_buff += TxPctSize;
 8003cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8003cf8:	f8d7 e048 	ldr.w	lr, [r7, #72]	; 0x48
        ep->xfer_buff += TxPctSize;
 8003cfc:	eb03 0c02 	add.w	ip, r3, r2
        ep->xfer_count += TxPctSize;
 8003d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
        ep->xfer_buff += TxPctSize;
 8003d02:	f8c7 c03c 	str.w	ip, [r7, #60]	; 0x3c
        ep->xfer_count += TxPctSize;
 8003d06:	4413      	add	r3, r2
 8003d08:	647b      	str	r3, [r7, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8003d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0c:	459e      	cmp	lr, r3
 8003d0e:	d32c      	bcc.n	8003d6a <HAL_PCD_IRQHandler+0x64e>
          ep->xfer_len_db -= len;
 8003d10:	ebae 0203 	sub.w	r2, lr, r3
 8003d14:	64ba      	str	r2, [r7, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003d16:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8003d1a:	fa1f fe83 	uxth.w	lr, r3
 8003d1e:	2a00      	cmp	r2, #0
 8003d20:	d141      	bne.n	8003da6 <HAL_PCD_IRQHandler+0x68a>
 8003d22:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003d26:	f200 4704 	addw	r7, r0, #1028	; 0x404
 8003d2a:	b292      	uxth	r2, r2
 8003d2c:	443a      	add	r2, r7
 8003d2e:	0109      	lsls	r1, r1, #4
 8003d30:	5a57      	ldrh	r7, [r2, r1]
 8003d32:	2b3e      	cmp	r3, #62	; 0x3e
 8003d34:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8003d38:	5257      	strh	r7, [r2, r1]
 8003d3a:	d923      	bls.n	8003d84 <HAL_PCD_IRQHandler+0x668>
 8003d3c:	06df      	lsls	r7, r3, #27
 8003d3e:	5a57      	ldrh	r7, [r2, r1]
 8003d40:	ea4f 1a53 	mov.w	sl, r3, lsr #5
 8003d44:	bf08      	it	eq
 8003d46:	f10a 3aff 	addeq.w	sl, sl, #4294967295
 8003d4a:	b2bf      	uxth	r7, r7
 8003d4c:	ea47 278a 	orr.w	r7, r7, sl, lsl #10
 8003d50:	ea47 0708 	orr.w	r7, r7, r8
 8003d54:	b2bf      	uxth	r7, r7
 8003d56:	5257      	strh	r7, [r2, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003d58:	2128      	movs	r1, #40	; 0x28
 8003d5a:	4673      	mov	r3, lr
 8003d5c:	fb01 4606 	mla	r6, r1, r6, r4
 8003d60:	4661      	mov	r1, ip
 8003d62:	8e32      	ldrh	r2, [r6, #48]	; 0x30

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003d64:	f001 fc6a 	bl	800563c <USB_WritePMA>
 8003d68:	e065      	b.n	8003e36 <HAL_PCD_IRQHandler+0x71a>
        else if (ep->xfer_len_db == 0U)
 8003d6a:	f1be 0f00 	cmp.w	lr, #0
 8003d6e:	d103      	bne.n	8003d78 <HAL_PCD_IRQHandler+0x65c>
    if (ep->xfer_len > TxPctSize)
 8003d70:	4613      	mov	r3, r2
          ep->xfer_fill_db = 0U;
 8003d72:	f887 e04c 	strb.w	lr, [r7, #76]	; 0x4c
 8003d76:	e7ce      	b.n	8003d16 <HAL_PCD_IRQHandler+0x5fa>
          ep->xfer_fill_db = 0U;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 8003d7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d80:	4673      	mov	r3, lr
 8003d82:	e7c8      	b.n	8003d16 <HAL_PCD_IRQHandler+0x5fa>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003d84:	b92b      	cbnz	r3, 8003d92 <HAL_PCD_IRQHandler+0x676>
 8003d86:	5a53      	ldrh	r3, [r2, r1]
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d8e:	5253      	strh	r3, [r2, r1]
 8003d90:	e7e2      	b.n	8003d58 <HAL_PCD_IRQHandler+0x63c>
 8003d92:	085f      	lsrs	r7, r3, #1
 8003d94:	07db      	lsls	r3, r3, #31
 8003d96:	5a53      	ldrh	r3, [r2, r1]
 8003d98:	bf48      	it	mi
 8003d9a:	3701      	addmi	r7, #1
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	e7f3      	b.n	8003d8e <HAL_PCD_IRQHandler+0x672>
 8003da6:	2a01      	cmp	r2, #1
 8003da8:	d1d6      	bne.n	8003d58 <HAL_PCD_IRQHandler+0x63c>
 8003daa:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003dae:	0109      	lsls	r1, r1, #4
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	f200 4304 	addw	r3, r0, #1028	; 0x404
 8003db6:	4413      	add	r3, r2
 8003db8:	f823 e001 	strh.w	lr, [r3, r1]
 8003dbc:	e7cc      	b.n	8003d58 <HAL_PCD_IRQHandler+0x63c>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003dbe:	3206      	adds	r2, #6
 8003dc0:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 8003dc4:	b2bf      	uxth	r7, r7
    if (ep->xfer_len >= TxPctSize)
 8003dc6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003dca:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8003dcc:	bf88      	it	hi
 8003dce:	4663      	movhi	r3, ip
 8003dd0:	f04f 0c28 	mov.w	ip, #40	; 0x28
 8003dd4:	fb0c 4c06 	mla	ip, ip, r6, r4
      ep->xfer_len -= TxPctSize;
 8003dd8:	bf98      	it	ls
 8003dda:	1a9b      	subls	r3, r3, r2
 8003ddc:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d14e      	bne.n	8003e82 <HAL_PCD_IRQHandler+0x766>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003de4:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8003de8:	2a00      	cmp	r2, #0
 8003dea:	d137      	bne.n	8003e5c <HAL_PCD_IRQHandler+0x740>
 8003dec:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8003df0:	010b      	lsls	r3, r1, #4
 8003df2:	b2b2      	uxth	r2, r6
 8003df4:	f200 4604 	addw	r6, r0, #1028	; 0x404
 8003df8:	4416      	add	r6, r2
 8003dfa:	5af2      	ldrh	r2, [r6, r3]
 8003dfc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003e00:	52f2      	strh	r2, [r6, r3]
 8003e02:	5af2      	ldrh	r2, [r6, r3]
 8003e04:	b292      	uxth	r2, r2
 8003e06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e0a:	52f2      	strh	r2, [r6, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e0c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003e10:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8003e14:	b292      	uxth	r2, r2
 8003e16:	4410      	add	r0, r2
 8003e18:	5ac2      	ldrh	r2, [r0, r3]
 8003e1a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003e1e:	52c2      	strh	r2, [r0, r3]
 8003e20:	5ac2      	ldrh	r2, [r0, r3]
 8003e22:	b292      	uxth	r2, r2
 8003e24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e28:	52c2      	strh	r2, [r0, r3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e2a:	4620      	mov	r0, r4
 8003e2c:	f7fd fe53 	bl	8001ad6 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003e30:	2f00      	cmp	r7, #0
 8003e32:	f43f af24 	beq.w	8003c7e <HAL_PCD_IRQHandler+0x562>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003e36:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8003e3a:	6822      	ldr	r2, [r4, #0]
 8003e3c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e4a:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8003e4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e56:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8003e5a:	e46e      	b.n	800373a <HAL_PCD_IRQHandler+0x1e>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e5c:	2a01      	cmp	r2, #1
 8003e5e:	d1e4      	bne.n	8003e2a <HAL_PCD_IRQHandler+0x70e>
 8003e60:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8003e64:	010a      	lsls	r2, r1, #4
 8003e66:	fa1f fc86 	uxth.w	ip, r6
 8003e6a:	f200 4604 	addw	r6, r0, #1028	; 0x404
 8003e6e:	4466      	add	r6, ip
 8003e70:	52b3      	strh	r3, [r6, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e72:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8003e76:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8003e7a:	b2b6      	uxth	r6, r6
 8003e7c:	4430      	add	r0, r6
 8003e7e:	5283      	strh	r3, [r0, r2]
 8003e80:	e7d3      	b.n	8003e2a <HAL_PCD_IRQHandler+0x70e>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003e82:	b96f      	cbnz	r7, 8003ea0 <HAL_PCD_IRQHandler+0x784>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e84:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003e88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e90:	041b      	lsls	r3, r3, #16
 8003e92:	0c1b      	lsrs	r3, r3, #16
 8003e94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e9c:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8003ea0:	f04f 0c28 	mov.w	ip, #40	; 0x28
 8003ea4:	fb0c 4c06 	mla	ip, ip, r6, r4
 8003ea8:	f89c 304c 	ldrb.w	r3, [ip, #76]	; 0x4c
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d1c2      	bne.n	8003e36 <HAL_PCD_IRQHandler+0x71a>
        ep->xfer_count += TxPctSize;
 8003eb0:	f8dc 3044 	ldr.w	r3, [ip, #68]	; 0x44
        ep->xfer_buff += TxPctSize;
 8003eb4:	f8dc 703c 	ldr.w	r7, [ip, #60]	; 0x3c
        ep->xfer_count += TxPctSize;
 8003eb8:	4413      	add	r3, r2
        if (ep->xfer_len_db >= ep->maxpacket)
 8003eba:	f8dc e048 	ldr.w	lr, [ip, #72]	; 0x48
        ep->xfer_count += TxPctSize;
 8003ebe:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8003ec2:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
        ep->xfer_buff += TxPctSize;
 8003ec6:	4417      	add	r7, r2
        if (ep->xfer_len_db >= ep->maxpacket)
 8003ec8:	459e      	cmp	lr, r3
        ep->xfer_buff += TxPctSize;
 8003eca:	f8cc 703c 	str.w	r7, [ip, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8003ece:	d326      	bcc.n	8003f1e <HAL_PCD_IRQHandler+0x802>
          ep->xfer_len_db -= len;
 8003ed0:	ebae 0203 	sub.w	r2, lr, r3
 8003ed4:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003ed8:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8003edc:	fa1f fc83 	uxth.w	ip, r3
 8003ee0:	2a00      	cmp	r2, #0
 8003ee2:	d142      	bne.n	8003f6a <HAL_PCD_IRQHandler+0x84e>
 8003ee4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003ee8:	f200 4e0c 	addw	lr, r0, #1036	; 0x40c
 8003eec:	b292      	uxth	r2, r2
 8003eee:	4472      	add	r2, lr
 8003ef0:	0109      	lsls	r1, r1, #4
 8003ef2:	f832 e001 	ldrh.w	lr, [r2, r1]
 8003ef6:	2b3e      	cmp	r3, #62	; 0x3e
 8003ef8:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8003efc:	f822 e001 	strh.w	lr, [r2, r1]
 8003f00:	d91b      	bls.n	8003f3a <HAL_PCD_IRQHandler+0x81e>
 8003f02:	ea4f 1e53 	mov.w	lr, r3, lsr #5
 8003f06:	06db      	lsls	r3, r3, #27
 8003f08:	5a53      	ldrh	r3, [r2, r1]
 8003f0a:	bf08      	it	eq
 8003f0c:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	ea43 238e 	orr.w	r3, r3, lr, lsl #10
 8003f16:	ea43 0308 	orr.w	r3, r3, r8
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	e012      	b.n	8003f44 <HAL_PCD_IRQHandler+0x828>
        else if (ep->xfer_len_db == 0U)
 8003f1e:	f1be 0f00 	cmp.w	lr, #0
 8003f22:	d103      	bne.n	8003f2c <HAL_PCD_IRQHandler+0x810>
    if (ep->xfer_len >= TxPctSize)
 8003f24:	4613      	mov	r3, r2
          ep->xfer_fill_db = 0U;
 8003f26:	f88c e04c 	strb.w	lr, [ip, #76]	; 0x4c
 8003f2a:	e7d5      	b.n	8003ed8 <HAL_PCD_IRQHandler+0x7bc>
          ep->xfer_len_db = 0U;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
          ep->xfer_fill_db = 0;
 8003f32:	f88c 304c 	strb.w	r3, [ip, #76]	; 0x4c
 8003f36:	4673      	mov	r3, lr
 8003f38:	e7ce      	b.n	8003ed8 <HAL_PCD_IRQHandler+0x7bc>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003f3a:	b95b      	cbnz	r3, 8003f54 <HAL_PCD_IRQHandler+0x838>
 8003f3c:	5a53      	ldrh	r3, [r2, r1]
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f44:	5253      	strh	r3, [r2, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003f46:	2128      	movs	r1, #40	; 0x28
 8003f48:	fb01 4606 	mla	r6, r1, r6, r4
 8003f4c:	4663      	mov	r3, ip
 8003f4e:	4639      	mov	r1, r7
 8003f50:	8e72      	ldrh	r2, [r6, #50]	; 0x32
 8003f52:	e707      	b.n	8003d64 <HAL_PCD_IRQHandler+0x648>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003f54:	ea4f 0e53 	mov.w	lr, r3, lsr #1
 8003f58:	07db      	lsls	r3, r3, #31
 8003f5a:	5a53      	ldrh	r3, [r2, r1]
 8003f5c:	bf48      	it	mi
 8003f5e:	f10e 0e01 	addmi.w	lr, lr, #1
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	ea43 238e 	orr.w	r3, r3, lr, lsl #10
 8003f68:	e7d7      	b.n	8003f1a <HAL_PCD_IRQHandler+0x7fe>
 8003f6a:	2a01      	cmp	r2, #1
 8003f6c:	d1eb      	bne.n	8003f46 <HAL_PCD_IRQHandler+0x82a>
 8003f6e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	f200 430c 	addw	r3, r0, #1036	; 0x40c
 8003f78:	4413      	add	r3, r2
 8003f7a:	010a      	lsls	r2, r1, #4
 8003f7c:	f823 c002 	strh.w	ip, [r3, r2]
 8003f80:	e7e1      	b.n	8003f46 <HAL_PCD_IRQHandler+0x82a>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003f82:	0546      	lsls	r6, r0, #21
 8003f84:	d512      	bpl.n	8003fac <HAL_PCD_IRQHandler+0x890>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003f86:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8003f88:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003f8a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003f8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f92:	041b      	lsls	r3, r3, #16
 8003f94:	0c1b      	lsrs	r3, r3, #16
 8003f96:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8003f9a:	f7fd fda8 	bl	8001aee <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003f9e:	4629      	mov	r1, r5
 8003fa0:	4620      	mov	r0, r4
}
 8003fa2:	b005      	add	sp, #20
 8003fa4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003fa8:	f7ff bba3 	b.w	80036f2 <HAL_PCD_SetAddress>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003fac:	0441      	lsls	r1, r0, #17
 8003fae:	d50a      	bpl.n	8003fc6 <HAL_PCD_IRQHandler+0x8aa>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003fb0:	6822      	ldr	r2, [r4, #0]
 8003fb2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003fb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003fba:	041b      	lsls	r3, r3, #16
 8003fbc:	0c1b      	lsrs	r3, r3, #16
 8003fbe:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8003fc2:	f7ff bbbf 	b.w	8003744 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003fc6:	0482      	lsls	r2, r0, #18
 8003fc8:	d505      	bpl.n	8003fd6 <HAL_PCD_IRQHandler+0x8ba>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003fca:	6822      	ldr	r2, [r4, #0]
 8003fcc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003fd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fd4:	e7f1      	b.n	8003fba <HAL_PCD_IRQHandler+0x89e>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003fd6:	04c3      	lsls	r3, r0, #19
 8003fd8:	d519      	bpl.n	800400e <HAL_PCD_IRQHandler+0x8f2>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003fda:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8003fdc:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003fde:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003fe2:	f023 0304 	bic.w	r3, r3, #4
 8003fe6:	041b      	lsls	r3, r3, #16
 8003fe8:	0c1b      	lsrs	r3, r3, #16
 8003fea:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003fee:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003ff2:	f023 0308 	bic.w	r3, r3, #8
 8003ff6:	041b      	lsls	r3, r3, #16
 8003ff8:	0c1b      	lsrs	r3, r3, #16
 8003ffa:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8003ffe:	f7fd fd99 	bl	8001b34 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004002:	6822      	ldr	r2, [r4, #0]
 8004004:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004008:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800400c:	e7d5      	b.n	8003fba <HAL_PCD_IRQHandler+0x89e>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800400e:	0507      	lsls	r7, r0, #20
 8004010:	d548      	bpl.n	80040a4 <HAL_PCD_IRQHandler+0x988>
 8004012:	4668      	mov	r0, sp
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004014:	6822      	ldr	r2, [r4, #0]
 8004016:	4606      	mov	r6, r0
 8004018:	4611      	mov	r1, r2
 800401a:	4613      	mov	r3, r2
 800401c:	f102 0520 	add.w	r5, r2, #32
 8004020:	f833 7b04 	ldrh.w	r7, [r3], #4
    for (i = 0U; i < 8U; i++)
 8004024:	429d      	cmp	r5, r3
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004026:	f826 7b02 	strh.w	r7, [r6], #2
    for (i = 0U; i < 8U; i++)
 800402a:	d1f9      	bne.n	8004020 <HAL_PCD_IRQHandler+0x904>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800402c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8004030:	b29b      	uxth	r3, r3
 8004032:	f043 0301 	orr.w	r3, r3, #1
 8004036:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800403a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800403e:	f023 0301 	bic.w	r3, r3, #1
 8004042:	041b      	lsls	r3, r3, #16
 8004044:	0c1b      	lsrs	r3, r3, #16
 8004046:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800404a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800404e:	055e      	lsls	r6, r3, #21
 8004050:	d5fb      	bpl.n	800404a <HAL_PCD_IRQHandler+0x92e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004052:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004056:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800405a:	041b      	lsls	r3, r3, #16
 800405c:	0c1b      	lsrs	r3, r3, #16
 800405e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004062:	f830 3b02 	ldrh.w	r3, [r0], #2
 8004066:	f821 3b04 	strh.w	r3, [r1], #4
    for (i = 0U; i < 8U; i++)
 800406a:	428d      	cmp	r5, r1
 800406c:	d1f9      	bne.n	8004062 <HAL_PCD_IRQHandler+0x946>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800406e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8004072:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004074:	b29b      	uxth	r3, r3
 8004076:	f043 0308 	orr.w	r3, r3, #8
 800407a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800407e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004082:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004086:	041b      	lsls	r3, r3, #16
 8004088:	0c1b      	lsrs	r3, r3, #16
 800408a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800408e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8004092:	b29b      	uxth	r3, r3
 8004094:	f043 0304 	orr.w	r3, r3, #4
 8004098:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 800409c:	f7fd fd3a 	bl	8001b14 <HAL_PCD_SuspendCallback>
    return;
 80040a0:	f7ff bb50 	b.w	8003744 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80040a4:	0582      	lsls	r2, r0, #22
 80040a6:	d50d      	bpl.n	80040c4 <HAL_PCD_IRQHandler+0x9a8>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80040a8:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 80040aa:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80040ac:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80040b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040b4:	041b      	lsls	r3, r3, #16
 80040b6:	0c1b      	lsrs	r3, r3, #16
 80040b8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80040bc:	f7fd fd13 	bl	8001ae6 <HAL_PCD_SOFCallback>
    return;
 80040c0:	f7ff bb40 	b.w	8003744 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80040c4:	05c3      	lsls	r3, r0, #23
 80040c6:	f57f ab3d 	bpl.w	8003744 <HAL_PCD_IRQHandler+0x28>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80040ca:	6822      	ldr	r2, [r4, #0]
 80040cc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80040d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040d4:	e771      	b.n	8003fba <HAL_PCD_IRQHandler+0x89e>
 80040d6:	bf00      	nop

080040d8 <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 80040d8:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 80040dc:	b570      	push	{r4, r5, r6, lr}
 80040de:	4605      	mov	r5, r0
 80040e0:	f04f 0428 	mov.w	r4, #40	; 0x28
 80040e4:	f001 0007 	and.w	r0, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 80040e8:	d01a      	beq.n	8004120 <HAL_PCD_EP_Open+0x48>
    ep->is_in = 1U;
 80040ea:	2601      	movs	r6, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040ec:	fb00 4104 	mla	r1, r0, r4, r4
 80040f0:	4429      	add	r1, r5
    ep->is_in = 1U;
 80040f2:	704e      	strb	r6, [r1, #1]
  if (ep_type == EP_TYPE_BULK)
 80040f4:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 80040f6:	70cb      	strb	r3, [r1, #3]
    ep->data_pid_start = 0U;
 80040f8:	bf08      	it	eq
 80040fa:	2300      	moveq	r3, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 80040fc:	7008      	strb	r0, [r1, #0]
    ep->data_pid_start = 0U;
 80040fe:	bf08      	it	eq
 8004100:	710b      	strbeq	r3, [r1, #4]
  ep->maxpacket = ep_mps;
 8004102:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 8004104:	f895 32a8 	ldrb.w	r3, [r5, #680]	; 0x2a8
 8004108:	2b01      	cmp	r3, #1
 800410a:	d012      	beq.n	8004132 <HAL_PCD_EP_Open+0x5a>
 800410c:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800410e:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 8004110:	f885 32a8 	strb.w	r3, [r5, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004114:	f000 ffe6 	bl	80050e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004118:	2000      	movs	r0, #0
 800411a:	f885 02a8 	strb.w	r0, [r5, #680]	; 0x2a8
}
 800411e:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8004120:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004122:	4344      	muls	r4, r0
 8004124:	f504 71b4 	add.w	r1, r4, #360	; 0x168
    ep->is_in = 0U;
 8004128:	442c      	add	r4, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800412a:	4429      	add	r1, r5
    ep->is_in = 0U;
 800412c:	f884 6169 	strb.w	r6, [r4, #361]	; 0x169
 8004130:	e7e0      	b.n	80040f4 <HAL_PCD_EP_Open+0x1c>
  __HAL_LOCK(hpcd);
 8004132:	2002      	movs	r0, #2
 8004134:	e7f3      	b.n	800411e <HAL_PCD_EP_Open+0x46>

08004136 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8004136:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 800413a:	b510      	push	{r4, lr}
 800413c:	f04f 0328 	mov.w	r3, #40	; 0x28
 8004140:	4604      	mov	r4, r0
 8004142:	f001 0207 	and.w	r2, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 8004146:	d013      	beq.n	8004170 <HAL_PCD_EP_Close+0x3a>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004148:	fb02 3103 	mla	r1, r2, r3, r3
 800414c:	4401      	add	r1, r0
    ep->is_in = 1U;
 800414e:	2001      	movs	r0, #1
 8004150:	7048      	strb	r0, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004152:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8004154:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8004158:	2b01      	cmp	r3, #1
 800415a:	d012      	beq.n	8004182 <HAL_PCD_EP_Close+0x4c>
 800415c:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800415e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8004160:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004164:	f001 f920 	bl	80053a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004168:	2000      	movs	r0, #0
 800416a:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800416e:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004170:	4353      	muls	r3, r2
 8004172:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 8004176:	4401      	add	r1, r0
    ep->is_in = 0U;
 8004178:	4403      	add	r3, r0
 800417a:	2000      	movs	r0, #0
 800417c:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 8004180:	e7e7      	b.n	8004152 <HAL_PCD_EP_Close+0x1c>
  __HAL_LOCK(hpcd);
 8004182:	2002      	movs	r0, #2
 8004184:	e7f3      	b.n	800416e <HAL_PCD_EP_Close+0x38>

08004186 <HAL_PCD_EP_Receive>:
{
 8004186:	b570      	push	{r4, r5, r6, lr}
 8004188:	f001 0507 	and.w	r5, r1, #7
  ep->xfer_buff = pBuf;
 800418c:	2128      	movs	r1, #40	; 0x28
  ep->xfer_count = 0U;
 800418e:	2600      	movs	r6, #0
  ep->xfer_buff = pBuf;
 8004190:	4369      	muls	r1, r5
 8004192:	1844      	adds	r4, r0, r1
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004194:	f501 71b4 	add.w	r1, r1, #360	; 0x168
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004198:	4401      	add	r1, r0
  ep->xfer_len = len;
 800419a:	e9c4 235f 	strd	r2, r3, [r4, #380]	; 0x17c
  ep->xfer_count = 0U;
 800419e:	f8c4 6184 	str.w	r6, [r4, #388]	; 0x184
  ep->is_in = 0U;
 80041a2:	f884 6169 	strb.w	r6, [r4, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 80041a6:	f884 5168 	strb.w	r5, [r4, #360]	; 0x168
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80041aa:	6800      	ldr	r0, [r0, #0]
 80041ac:	f001 fa56 	bl	800565c <USB_EPStartXfer>
}
 80041b0:	4630      	mov	r0, r6
 80041b2:	bd70      	pop	{r4, r5, r6, pc}

080041b4 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80041b4:	2328      	movs	r3, #40	; 0x28
 80041b6:	f001 0107 	and.w	r1, r1, #7
 80041ba:	fb03 0001 	mla	r0, r3, r1, r0
}
 80041be:	f8d0 0184 	ldr.w	r0, [r0, #388]	; 0x184
 80041c2:	4770      	bx	lr

080041c4 <HAL_PCD_EP_Transmit>:
{
 80041c4:	b570      	push	{r4, r5, r6, lr}
 80041c6:	f001 0507 	and.w	r5, r1, #7
  ep->xfer_buff = pBuf;
 80041ca:	2128      	movs	r1, #40	; 0x28
 80041cc:	fb01 0405 	mla	r4, r1, r5, r0
  ep->xfer_count = 0U;
 80041d0:	2600      	movs	r6, #0
  ep->xfer_len = len;
 80041d2:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_fill_db = 1U;
 80041d6:	2201      	movs	r2, #1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041d8:	fb05 1101 	mla	r1, r5, r1, r1
  ep->xfer_fill_db = 1U;
 80041dc:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80041e0:	4401      	add	r1, r0
  ep->xfer_len_db = len;
 80041e2:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 80041e4:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 80041e6:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 80041ea:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80041ee:	6800      	ldr	r0, [r0, #0]
 80041f0:	f001 fa34 	bl	800565c <USB_EPStartXfer>
}
 80041f4:	4630      	mov	r0, r6
 80041f6:	bd70      	pop	{r4, r5, r6, pc}

080041f8 <HAL_PCD_EP_SetStall>:
{
 80041f8:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80041fa:	6843      	ldr	r3, [r0, #4]
 80041fc:	f001 0507 	and.w	r5, r1, #7
 8004200:	429d      	cmp	r5, r3
{
 8004202:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004204:	d828      	bhi.n	8004258 <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 8004206:	f011 0f80 	tst.w	r1, #128	; 0x80
 800420a:	f04f 0328 	mov.w	r3, #40	; 0x28
 800420e:	d01a      	beq.n	8004246 <HAL_PCD_EP_SetStall+0x4e>
    ep->is_in = 1U;
 8004210:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004212:	fb05 3103 	mla	r1, r5, r3, r3
 8004216:	4401      	add	r1, r0
    ep->is_in = 1U;
 8004218:	704a      	strb	r2, [r1, #1]
  ep->is_stall = 1U;
 800421a:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800421c:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800421e:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8004220:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 8004224:	429a      	cmp	r2, r3
 8004226:	d019      	beq.n	800425c <HAL_PCD_EP_SetStall+0x64>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004228:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800422a:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800422e:	f001 f98c 	bl	800554a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004232:	b925      	cbnz	r5, 800423e <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004234:	6820      	ldr	r0, [r4, #0]
 8004236:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 800423a:	f001 f9fd 	bl	8005638 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 800423e:	2000      	movs	r0, #0
 8004240:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8004244:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8004246:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8004248:	434b      	muls	r3, r1
 800424a:	f503 71b4 	add.w	r1, r3, #360	; 0x168
    ep->is_in = 0U;
 800424e:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8004250:	4401      	add	r1, r0
    ep->is_in = 0U;
 8004252:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
 8004256:	e7e0      	b.n	800421a <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 8004258:	2001      	movs	r0, #1
 800425a:	e7f3      	b.n	8004244 <HAL_PCD_EP_SetStall+0x4c>
  __HAL_LOCK(hpcd);
 800425c:	2002      	movs	r0, #2
 800425e:	e7f1      	b.n	8004244 <HAL_PCD_EP_SetStall+0x4c>

08004260 <HAL_PCD_EP_ClrStall>:
{
 8004260:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004262:	6843      	ldr	r3, [r0, #4]
 8004264:	f001 020f 	and.w	r2, r1, #15
 8004268:	429a      	cmp	r2, r3
{
 800426a:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800426c:	d825      	bhi.n	80042ba <HAL_PCD_EP_ClrStall+0x5a>
  if ((0x80U & ep_addr) == 0x80U)
 800426e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004272:	f04f 0328 	mov.w	r3, #40	; 0x28
 8004276:	f001 0207 	and.w	r2, r1, #7
 800427a:	d015      	beq.n	80042a8 <HAL_PCD_EP_ClrStall+0x48>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800427c:	fb02 3103 	mla	r1, r2, r3, r3
 8004280:	4401      	add	r1, r0
    ep->is_in = 1U;
 8004282:	2001      	movs	r0, #1
 8004284:	7048      	strb	r0, [r1, #1]
  ep->is_stall = 0U;
 8004286:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8004288:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 800428a:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800428c:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8004290:	2b01      	cmp	r3, #1
 8004292:	d014      	beq.n	80042be <HAL_PCD_EP_ClrStall+0x5e>
 8004294:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004296:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8004298:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800429c:	f001 f975 	bl	800558a <USB_EPClearStall>
  return HAL_OK;
 80042a0:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 80042a2:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
}
 80042a6:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042a8:	4353      	muls	r3, r2
 80042aa:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 80042ae:	4401      	add	r1, r0
    ep->is_in = 0U;
 80042b0:	4403      	add	r3, r0
 80042b2:	2000      	movs	r0, #0
 80042b4:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 80042b8:	e7e5      	b.n	8004286 <HAL_PCD_EP_ClrStall+0x26>
    return HAL_ERROR;
 80042ba:	2001      	movs	r0, #1
 80042bc:	e7f3      	b.n	80042a6 <HAL_PCD_EP_ClrStall+0x46>
  __HAL_LOCK(hpcd);
 80042be:	2002      	movs	r0, #2
 80042c0:	e7f1      	b.n	80042a6 <HAL_PCD_EP_ClrStall+0x46>

080042c2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80042c2:	b510      	push	{r4, lr}
 80042c4:	2428      	movs	r4, #40	; 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80042c6:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042ca:	bf1b      	ittet	ne
 80042cc:	f001 0107 	andne.w	r1, r1, #7
 80042d0:	fb01 4104 	mlane	r1, r1, r4, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80042d4:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042d8:	1840      	addne	r0, r0, r1
    ep = &hpcd->OUT_ep[ep_addr];
 80042da:	bf08      	it	eq
 80042dc:	f500 70b4 	addeq.w	r0, r0, #360	; 0x168
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80042e0:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 80042e2:	b91a      	cbnz	r2, 80042ec <HAL_PCDEx_PMAConfig+0x2a>
    ep->doublebuffer = 0U;
 80042e4:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 80042e6:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 80042e8:	2000      	movs	r0, #0
 80042ea:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 80042ec:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80042ee:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 80042f0:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80042f2:	e7f9      	b.n	80042e8 <HAL_PCDEx_PMAConfig+0x26>

080042f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042f8:	4605      	mov	r5, r0
 80042fa:	b338      	cbz	r0, 800434c <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042fc:	6803      	ldr	r3, [r0, #0]
 80042fe:	07db      	lsls	r3, r3, #31
 8004300:	d410      	bmi.n	8004324 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004302:	682b      	ldr	r3, [r5, #0]
 8004304:	079f      	lsls	r7, r3, #30
 8004306:	d45e      	bmi.n	80043c6 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004308:	682b      	ldr	r3, [r5, #0]
 800430a:	0719      	lsls	r1, r3, #28
 800430c:	f100 8095 	bmi.w	800443a <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004310:	682b      	ldr	r3, [r5, #0]
 8004312:	075a      	lsls	r2, r3, #29
 8004314:	f100 80c1 	bmi.w	800449a <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004318:	69e8      	ldr	r0, [r5, #28]
 800431a:	2800      	cmp	r0, #0
 800431c:	f040 812c 	bne.w	8004578 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8004320:	2000      	movs	r0, #0
 8004322:	e029      	b.n	8004378 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004324:	4c90      	ldr	r4, [pc, #576]	; (8004568 <HAL_RCC_OscConfig+0x274>)
 8004326:	6863      	ldr	r3, [r4, #4]
 8004328:	f003 030c 	and.w	r3, r3, #12
 800432c:	2b04      	cmp	r3, #4
 800432e:	d007      	beq.n	8004340 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004330:	6863      	ldr	r3, [r4, #4]
 8004332:	f003 030c 	and.w	r3, r3, #12
 8004336:	2b08      	cmp	r3, #8
 8004338:	d10a      	bne.n	8004350 <HAL_RCC_OscConfig+0x5c>
 800433a:	6863      	ldr	r3, [r4, #4]
 800433c:	03de      	lsls	r6, r3, #15
 800433e:	d507      	bpl.n	8004350 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004340:	6823      	ldr	r3, [r4, #0]
 8004342:	039c      	lsls	r4, r3, #14
 8004344:	d5dd      	bpl.n	8004302 <HAL_RCC_OscConfig+0xe>
 8004346:	686b      	ldr	r3, [r5, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1da      	bne.n	8004302 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 800434c:	2001      	movs	r0, #1
 800434e:	e013      	b.n	8004378 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004350:	686b      	ldr	r3, [r5, #4]
 8004352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004356:	d112      	bne.n	800437e <HAL_RCC_OscConfig+0x8a>
 8004358:	6823      	ldr	r3, [r4, #0]
 800435a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800435e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004360:	f7fe f914 	bl	800258c <HAL_GetTick>
 8004364:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004366:	6823      	ldr	r3, [r4, #0]
 8004368:	0398      	lsls	r0, r3, #14
 800436a:	d4ca      	bmi.n	8004302 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800436c:	f7fe f90e 	bl	800258c <HAL_GetTick>
 8004370:	1b80      	subs	r0, r0, r6
 8004372:	2864      	cmp	r0, #100	; 0x64
 8004374:	d9f7      	bls.n	8004366 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8004376:	2003      	movs	r0, #3
}
 8004378:	b002      	add	sp, #8
 800437a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800437e:	b99b      	cbnz	r3, 80043a8 <HAL_RCC_OscConfig+0xb4>
 8004380:	6823      	ldr	r3, [r4, #0]
 8004382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004386:	6023      	str	r3, [r4, #0]
 8004388:	6823      	ldr	r3, [r4, #0]
 800438a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800438e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004390:	f7fe f8fc 	bl	800258c <HAL_GetTick>
 8004394:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004396:	6823      	ldr	r3, [r4, #0]
 8004398:	0399      	lsls	r1, r3, #14
 800439a:	d5b2      	bpl.n	8004302 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800439c:	f7fe f8f6 	bl	800258c <HAL_GetTick>
 80043a0:	1b80      	subs	r0, r0, r6
 80043a2:	2864      	cmp	r0, #100	; 0x64
 80043a4:	d9f7      	bls.n	8004396 <HAL_RCC_OscConfig+0xa2>
 80043a6:	e7e6      	b.n	8004376 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043ac:	6823      	ldr	r3, [r4, #0]
 80043ae:	d103      	bne.n	80043b8 <HAL_RCC_OscConfig+0xc4>
 80043b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043b4:	6023      	str	r3, [r4, #0]
 80043b6:	e7cf      	b.n	8004358 <HAL_RCC_OscConfig+0x64>
 80043b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043bc:	6023      	str	r3, [r4, #0]
 80043be:	6823      	ldr	r3, [r4, #0]
 80043c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043c4:	e7cb      	b.n	800435e <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043c6:	4c68      	ldr	r4, [pc, #416]	; (8004568 <HAL_RCC_OscConfig+0x274>)
 80043c8:	6863      	ldr	r3, [r4, #4]
 80043ca:	f013 0f0c 	tst.w	r3, #12
 80043ce:	d007      	beq.n	80043e0 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80043d0:	6863      	ldr	r3, [r4, #4]
 80043d2:	f003 030c 	and.w	r3, r3, #12
 80043d6:	2b08      	cmp	r3, #8
 80043d8:	d110      	bne.n	80043fc <HAL_RCC_OscConfig+0x108>
 80043da:	6863      	ldr	r3, [r4, #4]
 80043dc:	03da      	lsls	r2, r3, #15
 80043de:	d40d      	bmi.n	80043fc <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043e0:	6823      	ldr	r3, [r4, #0]
 80043e2:	079b      	lsls	r3, r3, #30
 80043e4:	d502      	bpl.n	80043ec <HAL_RCC_OscConfig+0xf8>
 80043e6:	692b      	ldr	r3, [r5, #16]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d1af      	bne.n	800434c <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ec:	6823      	ldr	r3, [r4, #0]
 80043ee:	696a      	ldr	r2, [r5, #20]
 80043f0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80043f4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80043f8:	6023      	str	r3, [r4, #0]
 80043fa:	e785      	b.n	8004308 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043fc:	692a      	ldr	r2, [r5, #16]
 80043fe:	4b5b      	ldr	r3, [pc, #364]	; (800456c <HAL_RCC_OscConfig+0x278>)
 8004400:	b16a      	cbz	r2, 800441e <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8004402:	2201      	movs	r2, #1
 8004404:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004406:	f7fe f8c1 	bl	800258c <HAL_GetTick>
 800440a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800440c:	6823      	ldr	r3, [r4, #0]
 800440e:	079f      	lsls	r7, r3, #30
 8004410:	d4ec      	bmi.n	80043ec <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004412:	f7fe f8bb 	bl	800258c <HAL_GetTick>
 8004416:	1b80      	subs	r0, r0, r6
 8004418:	2802      	cmp	r0, #2
 800441a:	d9f7      	bls.n	800440c <HAL_RCC_OscConfig+0x118>
 800441c:	e7ab      	b.n	8004376 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 800441e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004420:	f7fe f8b4 	bl	800258c <HAL_GetTick>
 8004424:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004426:	6823      	ldr	r3, [r4, #0]
 8004428:	0798      	lsls	r0, r3, #30
 800442a:	f57f af6d 	bpl.w	8004308 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800442e:	f7fe f8ad 	bl	800258c <HAL_GetTick>
 8004432:	1b80      	subs	r0, r0, r6
 8004434:	2802      	cmp	r0, #2
 8004436:	d9f6      	bls.n	8004426 <HAL_RCC_OscConfig+0x132>
 8004438:	e79d      	b.n	8004376 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800443a:	69aa      	ldr	r2, [r5, #24]
 800443c:	4e4a      	ldr	r6, [pc, #296]	; (8004568 <HAL_RCC_OscConfig+0x274>)
 800443e:	4b4b      	ldr	r3, [pc, #300]	; (800456c <HAL_RCC_OscConfig+0x278>)
 8004440:	b1e2      	cbz	r2, 800447c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8004442:	2201      	movs	r2, #1
 8004444:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8004448:	f7fe f8a0 	bl	800258c <HAL_GetTick>
 800444c:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800444e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004450:	079b      	lsls	r3, r3, #30
 8004452:	d50d      	bpl.n	8004470 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004454:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8004458:	4b45      	ldr	r3, [pc, #276]	; (8004570 <HAL_RCC_OscConfig+0x27c>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004460:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8004462:	bf00      	nop
  }
  while (Delay --);
 8004464:	9b01      	ldr	r3, [sp, #4]
 8004466:	1e5a      	subs	r2, r3, #1
 8004468:	9201      	str	r2, [sp, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1f9      	bne.n	8004462 <HAL_RCC_OscConfig+0x16e>
 800446e:	e74f      	b.n	8004310 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004470:	f7fe f88c 	bl	800258c <HAL_GetTick>
 8004474:	1b00      	subs	r0, r0, r4
 8004476:	2802      	cmp	r0, #2
 8004478:	d9e9      	bls.n	800444e <HAL_RCC_OscConfig+0x15a>
 800447a:	e77c      	b.n	8004376 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 800447c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8004480:	f7fe f884 	bl	800258c <HAL_GetTick>
 8004484:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004486:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004488:	079f      	lsls	r7, r3, #30
 800448a:	f57f af41 	bpl.w	8004310 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800448e:	f7fe f87d 	bl	800258c <HAL_GetTick>
 8004492:	1b00      	subs	r0, r0, r4
 8004494:	2802      	cmp	r0, #2
 8004496:	d9f6      	bls.n	8004486 <HAL_RCC_OscConfig+0x192>
 8004498:	e76d      	b.n	8004376 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800449a:	4c33      	ldr	r4, [pc, #204]	; (8004568 <HAL_RCC_OscConfig+0x274>)
 800449c:	69e3      	ldr	r3, [r4, #28]
 800449e:	00d8      	lsls	r0, r3, #3
 80044a0:	d424      	bmi.n	80044ec <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 80044a2:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80044a4:	69e3      	ldr	r3, [r4, #28]
 80044a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044aa:	61e3      	str	r3, [r4, #28]
 80044ac:	69e3      	ldr	r3, [r4, #28]
 80044ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b6:	4e2f      	ldr	r6, [pc, #188]	; (8004574 <HAL_RCC_OscConfig+0x280>)
 80044b8:	6833      	ldr	r3, [r6, #0]
 80044ba:	05d9      	lsls	r1, r3, #23
 80044bc:	d518      	bpl.n	80044f0 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044be:	68eb      	ldr	r3, [r5, #12]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d126      	bne.n	8004512 <HAL_RCC_OscConfig+0x21e>
 80044c4:	6a23      	ldr	r3, [r4, #32]
 80044c6:	f043 0301 	orr.w	r3, r3, #1
 80044ca:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80044cc:	f7fe f85e 	bl	800258c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044d0:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80044d4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044d6:	6a23      	ldr	r3, [r4, #32]
 80044d8:	079b      	lsls	r3, r3, #30
 80044da:	d53f      	bpl.n	800455c <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 80044dc:	2f00      	cmp	r7, #0
 80044de:	f43f af1b 	beq.w	8004318 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80044e2:	69e3      	ldr	r3, [r4, #28]
 80044e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044e8:	61e3      	str	r3, [r4, #28]
 80044ea:	e715      	b.n	8004318 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80044ec:	2700      	movs	r7, #0
 80044ee:	e7e2      	b.n	80044b6 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044f0:	6833      	ldr	r3, [r6, #0]
 80044f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044f6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80044f8:	f7fe f848 	bl	800258c <HAL_GetTick>
 80044fc:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044fe:	6833      	ldr	r3, [r6, #0]
 8004500:	05da      	lsls	r2, r3, #23
 8004502:	d4dc      	bmi.n	80044be <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004504:	f7fe f842 	bl	800258c <HAL_GetTick>
 8004508:	eba0 0008 	sub.w	r0, r0, r8
 800450c:	2864      	cmp	r0, #100	; 0x64
 800450e:	d9f6      	bls.n	80044fe <HAL_RCC_OscConfig+0x20a>
 8004510:	e731      	b.n	8004376 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004512:	b9ab      	cbnz	r3, 8004540 <HAL_RCC_OscConfig+0x24c>
 8004514:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004516:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800451a:	f023 0301 	bic.w	r3, r3, #1
 800451e:	6223      	str	r3, [r4, #32]
 8004520:	6a23      	ldr	r3, [r4, #32]
 8004522:	f023 0304 	bic.w	r3, r3, #4
 8004526:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8004528:	f7fe f830 	bl	800258c <HAL_GetTick>
 800452c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800452e:	6a23      	ldr	r3, [r4, #32]
 8004530:	0798      	lsls	r0, r3, #30
 8004532:	d5d3      	bpl.n	80044dc <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004534:	f7fe f82a 	bl	800258c <HAL_GetTick>
 8004538:	1b80      	subs	r0, r0, r6
 800453a:	4540      	cmp	r0, r8
 800453c:	d9f7      	bls.n	800452e <HAL_RCC_OscConfig+0x23a>
 800453e:	e71a      	b.n	8004376 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004540:	2b05      	cmp	r3, #5
 8004542:	6a23      	ldr	r3, [r4, #32]
 8004544:	d103      	bne.n	800454e <HAL_RCC_OscConfig+0x25a>
 8004546:	f043 0304 	orr.w	r3, r3, #4
 800454a:	6223      	str	r3, [r4, #32]
 800454c:	e7ba      	b.n	80044c4 <HAL_RCC_OscConfig+0x1d0>
 800454e:	f023 0301 	bic.w	r3, r3, #1
 8004552:	6223      	str	r3, [r4, #32]
 8004554:	6a23      	ldr	r3, [r4, #32]
 8004556:	f023 0304 	bic.w	r3, r3, #4
 800455a:	e7b6      	b.n	80044ca <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800455c:	f7fe f816 	bl	800258c <HAL_GetTick>
 8004560:	1b80      	subs	r0, r0, r6
 8004562:	4540      	cmp	r0, r8
 8004564:	d9b7      	bls.n	80044d6 <HAL_RCC_OscConfig+0x1e2>
 8004566:	e706      	b.n	8004376 <HAL_RCC_OscConfig+0x82>
 8004568:	40021000 	.word	0x40021000
 800456c:	42420000 	.word	0x42420000
 8004570:	20000010 	.word	0x20000010
 8004574:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004578:	4c2a      	ldr	r4, [pc, #168]	; (8004624 <HAL_RCC_OscConfig+0x330>)
 800457a:	6863      	ldr	r3, [r4, #4]
 800457c:	f003 030c 	and.w	r3, r3, #12
 8004580:	2b08      	cmp	r3, #8
 8004582:	d03e      	beq.n	8004602 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004584:	2200      	movs	r2, #0
 8004586:	4b28      	ldr	r3, [pc, #160]	; (8004628 <HAL_RCC_OscConfig+0x334>)
 8004588:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800458a:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800458c:	d12c      	bne.n	80045e8 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800458e:	f7fd fffd 	bl	800258c <HAL_GetTick>
 8004592:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004594:	6823      	ldr	r3, [r4, #0]
 8004596:	0199      	lsls	r1, r3, #6
 8004598:	d420      	bmi.n	80045dc <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800459a:	6a2b      	ldr	r3, [r5, #32]
 800459c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045a0:	d105      	bne.n	80045ae <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80045a2:	6862      	ldr	r2, [r4, #4]
 80045a4:	68a9      	ldr	r1, [r5, #8]
 80045a6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80045aa:	430a      	orrs	r2, r1
 80045ac:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045ae:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80045b0:	6862      	ldr	r2, [r4, #4]
 80045b2:	430b      	orrs	r3, r1
 80045b4:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80045b8:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 80045ba:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045bc:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80045be:	4b1a      	ldr	r3, [pc, #104]	; (8004628 <HAL_RCC_OscConfig+0x334>)
 80045c0:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80045c2:	f7fd ffe3 	bl	800258c <HAL_GetTick>
 80045c6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045c8:	6823      	ldr	r3, [r4, #0]
 80045ca:	019a      	lsls	r2, r3, #6
 80045cc:	f53f aea8 	bmi.w	8004320 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045d0:	f7fd ffdc 	bl	800258c <HAL_GetTick>
 80045d4:	1b40      	subs	r0, r0, r5
 80045d6:	2802      	cmp	r0, #2
 80045d8:	d9f6      	bls.n	80045c8 <HAL_RCC_OscConfig+0x2d4>
 80045da:	e6cc      	b.n	8004376 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045dc:	f7fd ffd6 	bl	800258c <HAL_GetTick>
 80045e0:	1b80      	subs	r0, r0, r6
 80045e2:	2802      	cmp	r0, #2
 80045e4:	d9d6      	bls.n	8004594 <HAL_RCC_OscConfig+0x2a0>
 80045e6:	e6c6      	b.n	8004376 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80045e8:	f7fd ffd0 	bl	800258c <HAL_GetTick>
 80045ec:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045ee:	6823      	ldr	r3, [r4, #0]
 80045f0:	019b      	lsls	r3, r3, #6
 80045f2:	f57f ae95 	bpl.w	8004320 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f6:	f7fd ffc9 	bl	800258c <HAL_GetTick>
 80045fa:	1b40      	subs	r0, r0, r5
 80045fc:	2802      	cmp	r0, #2
 80045fe:	d9f6      	bls.n	80045ee <HAL_RCC_OscConfig+0x2fa>
 8004600:	e6b9      	b.n	8004376 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004602:	2801      	cmp	r0, #1
 8004604:	f43f aeb8 	beq.w	8004378 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8004608:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800460a:	6a2a      	ldr	r2, [r5, #32]
 800460c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8004610:	4291      	cmp	r1, r2
 8004612:	f47f ae9b 	bne.w	800434c <HAL_RCC_OscConfig+0x58>
 8004616:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004618:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800461c:	4293      	cmp	r3, r2
 800461e:	f43f ae7f 	beq.w	8004320 <HAL_RCC_OscConfig+0x2c>
 8004622:	e693      	b.n	800434c <HAL_RCC_OscConfig+0x58>
 8004624:	40021000 	.word	0x40021000
 8004628:	42420000 	.word	0x42420000

0800462c <HAL_RCC_EnableCSS>:
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800462c:	2201      	movs	r2, #1
 800462e:	4b01      	ldr	r3, [pc, #4]	; (8004634 <HAL_RCC_EnableCSS+0x8>)
 8004630:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8004632:	4770      	bx	lr
 8004634:	42420000 	.word	0x42420000

08004638 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8004638:	4a0d      	ldr	r2, [pc, #52]	; (8004670 <HAL_RCC_GetSysClockFreq+0x38>)
 800463a:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800463c:	f003 010c 	and.w	r1, r3, #12
 8004640:	2908      	cmp	r1, #8
 8004642:	d112      	bne.n	800466a <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004644:	480b      	ldr	r0, [pc, #44]	; (8004674 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004646:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800464a:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800464c:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800464e:	d509      	bpl.n	8004664 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004650:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004652:	4a09      	ldr	r2, [pc, #36]	; (8004678 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004654:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004658:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800465a:	4a08      	ldr	r2, [pc, #32]	; (800467c <HAL_RCC_GetSysClockFreq+0x44>)
 800465c:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800465e:	fbb0 f0f3 	udiv	r0, r0, r3
 8004662:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004664:	4b06      	ldr	r3, [pc, #24]	; (8004680 <HAL_RCC_GetSysClockFreq+0x48>)
 8004666:	4358      	muls	r0, r3
 8004668:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800466a:	4803      	ldr	r0, [pc, #12]	; (8004678 <HAL_RCC_GetSysClockFreq+0x40>)
}
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	40021000 	.word	0x40021000
 8004674:	0800977c 	.word	0x0800977c
 8004678:	007a1200 	.word	0x007a1200
 800467c:	0800978c 	.word	0x0800978c
 8004680:	003d0900 	.word	0x003d0900

08004684 <HAL_RCC_ClockConfig>:
{
 8004684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004688:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800468a:	4604      	mov	r4, r0
 800468c:	b910      	cbnz	r0, 8004694 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800468e:	2001      	movs	r0, #1
}
 8004690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004694:	4a44      	ldr	r2, [pc, #272]	; (80047a8 <HAL_RCC_ClockConfig+0x124>)
 8004696:	6813      	ldr	r3, [r2, #0]
 8004698:	f003 0307 	and.w	r3, r3, #7
 800469c:	428b      	cmp	r3, r1
 800469e:	d328      	bcc.n	80046f2 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046a0:	6821      	ldr	r1, [r4, #0]
 80046a2:	078e      	lsls	r6, r1, #30
 80046a4:	d430      	bmi.n	8004708 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046a6:	07ca      	lsls	r2, r1, #31
 80046a8:	d443      	bmi.n	8004732 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046aa:	4a3f      	ldr	r2, [pc, #252]	; (80047a8 <HAL_RCC_ClockConfig+0x124>)
 80046ac:	6813      	ldr	r3, [r2, #0]
 80046ae:	f003 0307 	and.w	r3, r3, #7
 80046b2:	42ab      	cmp	r3, r5
 80046b4:	d865      	bhi.n	8004782 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046b6:	6822      	ldr	r2, [r4, #0]
 80046b8:	4d3c      	ldr	r5, [pc, #240]	; (80047ac <HAL_RCC_ClockConfig+0x128>)
 80046ba:	f012 0f04 	tst.w	r2, #4
 80046be:	d16c      	bne.n	800479a <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046c0:	0713      	lsls	r3, r2, #28
 80046c2:	d506      	bpl.n	80046d2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046c4:	686b      	ldr	r3, [r5, #4]
 80046c6:	6922      	ldr	r2, [r4, #16]
 80046c8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80046cc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80046d0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046d2:	f7ff ffb1 	bl	8004638 <HAL_RCC_GetSysClockFreq>
 80046d6:	686b      	ldr	r3, [r5, #4]
 80046d8:	4a35      	ldr	r2, [pc, #212]	; (80047b0 <HAL_RCC_ClockConfig+0x12c>)
 80046da:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80046de:	5cd3      	ldrb	r3, [r2, r3]
 80046e0:	40d8      	lsrs	r0, r3
 80046e2:	4b34      	ldr	r3, [pc, #208]	; (80047b4 <HAL_RCC_ClockConfig+0x130>)
 80046e4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80046e6:	4b34      	ldr	r3, [pc, #208]	; (80047b8 <HAL_RCC_ClockConfig+0x134>)
 80046e8:	6818      	ldr	r0, [r3, #0]
 80046ea:	f7fd ff0d 	bl	8002508 <HAL_InitTick>
  return HAL_OK;
 80046ee:	2000      	movs	r0, #0
 80046f0:	e7ce      	b.n	8004690 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046f2:	6813      	ldr	r3, [r2, #0]
 80046f4:	f023 0307 	bic.w	r3, r3, #7
 80046f8:	430b      	orrs	r3, r1
 80046fa:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046fc:	6813      	ldr	r3, [r2, #0]
 80046fe:	f003 0307 	and.w	r3, r3, #7
 8004702:	428b      	cmp	r3, r1
 8004704:	d1c3      	bne.n	800468e <HAL_RCC_ClockConfig+0xa>
 8004706:	e7cb      	b.n	80046a0 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004708:	4b28      	ldr	r3, [pc, #160]	; (80047ac <HAL_RCC_ClockConfig+0x128>)
 800470a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800470e:	bf1e      	ittt	ne
 8004710:	685a      	ldrne	r2, [r3, #4]
 8004712:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8004716:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004718:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800471a:	bf42      	ittt	mi
 800471c:	685a      	ldrmi	r2, [r3, #4]
 800471e:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8004722:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	68a0      	ldr	r0, [r4, #8]
 8004728:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800472c:	4302      	orrs	r2, r0
 800472e:	605a      	str	r2, [r3, #4]
 8004730:	e7b9      	b.n	80046a6 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004732:	6862      	ldr	r2, [r4, #4]
 8004734:	4e1d      	ldr	r6, [pc, #116]	; (80047ac <HAL_RCC_ClockConfig+0x128>)
 8004736:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004738:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800473a:	d11a      	bne.n	8004772 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800473c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004740:	d0a5      	beq.n	800468e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004742:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004744:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004748:	f023 0303 	bic.w	r3, r3, #3
 800474c:	4313      	orrs	r3, r2
 800474e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8004750:	f7fd ff1c 	bl	800258c <HAL_GetTick>
 8004754:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004756:	6873      	ldr	r3, [r6, #4]
 8004758:	6862      	ldr	r2, [r4, #4]
 800475a:	f003 030c 	and.w	r3, r3, #12
 800475e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004762:	d0a2      	beq.n	80046aa <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004764:	f7fd ff12 	bl	800258c <HAL_GetTick>
 8004768:	1bc0      	subs	r0, r0, r7
 800476a:	4540      	cmp	r0, r8
 800476c:	d9f3      	bls.n	8004756 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 800476e:	2003      	movs	r0, #3
 8004770:	e78e      	b.n	8004690 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004772:	2a02      	cmp	r2, #2
 8004774:	d102      	bne.n	800477c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004776:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800477a:	e7e1      	b.n	8004740 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800477c:	f013 0f02 	tst.w	r3, #2
 8004780:	e7de      	b.n	8004740 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004782:	6813      	ldr	r3, [r2, #0]
 8004784:	f023 0307 	bic.w	r3, r3, #7
 8004788:	432b      	orrs	r3, r5
 800478a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800478c:	6813      	ldr	r3, [r2, #0]
 800478e:	f003 0307 	and.w	r3, r3, #7
 8004792:	42ab      	cmp	r3, r5
 8004794:	f47f af7b 	bne.w	800468e <HAL_RCC_ClockConfig+0xa>
 8004798:	e78d      	b.n	80046b6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800479a:	686b      	ldr	r3, [r5, #4]
 800479c:	68e1      	ldr	r1, [r4, #12]
 800479e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80047a2:	430b      	orrs	r3, r1
 80047a4:	606b      	str	r3, [r5, #4]
 80047a6:	e78b      	b.n	80046c0 <HAL_RCC_ClockConfig+0x3c>
 80047a8:	40022000 	.word	0x40022000
 80047ac:	40021000 	.word	0x40021000
 80047b0:	0800971e 	.word	0x0800971e
 80047b4:	20000010 	.word	0x20000010
 80047b8:	20000184 	.word	0x20000184

080047bc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047bc:	4b04      	ldr	r3, [pc, #16]	; (80047d0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80047be:	4a05      	ldr	r2, [pc, #20]	; (80047d4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80047c6:	5cd3      	ldrb	r3, [r2, r3]
 80047c8:	4a03      	ldr	r2, [pc, #12]	; (80047d8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80047ca:	6810      	ldr	r0, [r2, #0]
}
 80047cc:	40d8      	lsrs	r0, r3
 80047ce:	4770      	bx	lr
 80047d0:	40021000 	.word	0x40021000
 80047d4:	0800972e 	.word	0x0800972e
 80047d8:	20000010 	.word	0x20000010

080047dc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80047dc:	4b04      	ldr	r3, [pc, #16]	; (80047f0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80047de:	4a05      	ldr	r2, [pc, #20]	; (80047f4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80047e6:	5cd3      	ldrb	r3, [r2, r3]
 80047e8:	4a03      	ldr	r2, [pc, #12]	; (80047f8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80047ea:	6810      	ldr	r0, [r2, #0]
}
 80047ec:	40d8      	lsrs	r0, r3
 80047ee:	4770      	bx	lr
 80047f0:	40021000 	.word	0x40021000
 80047f4:	0800972e 	.word	0x0800972e
 80047f8:	20000010 	.word	0x20000010

080047fc <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 80047fc:	4770      	bx	lr
	...

08004800 <HAL_RCC_NMI_IRQHandler>:
{
 8004800:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004802:	4c04      	ldr	r4, [pc, #16]	; (8004814 <HAL_RCC_NMI_IRQHandler+0x14>)
 8004804:	68a3      	ldr	r3, [r4, #8]
 8004806:	061b      	lsls	r3, r3, #24
 8004808:	d503      	bpl.n	8004812 <HAL_RCC_NMI_IRQHandler+0x12>
    HAL_RCC_CSSCallback();
 800480a:	f7ff fff7 	bl	80047fc <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800480e:	2380      	movs	r3, #128	; 0x80
 8004810:	72a3      	strb	r3, [r4, #10]
}
 8004812:	bd10      	pop	{r4, pc}
 8004814:	40021000 	.word	0x40021000

08004818 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004818:	6803      	ldr	r3, [r0, #0]
{
 800481a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800481e:	07d9      	lsls	r1, r3, #31
{
 8004820:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004822:	d520      	bpl.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004824:	4c36      	ldr	r4, [pc, #216]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004826:	69e3      	ldr	r3, [r4, #28]
 8004828:	00da      	lsls	r2, r3, #3
 800482a:	d432      	bmi.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 800482c:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800482e:	69e3      	ldr	r3, [r4, #28]
 8004830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004834:	61e3      	str	r3, [r4, #28]
 8004836:	69e3      	ldr	r3, [r4, #28]
 8004838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800483c:	9301      	str	r3, [sp, #4]
 800483e:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004840:	4f30      	ldr	r7, [pc, #192]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	05db      	lsls	r3, r3, #23
 8004846:	d526      	bpl.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004848:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800484a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800484e:	d136      	bne.n	80048be <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004850:	6a23      	ldr	r3, [r4, #32]
 8004852:	686a      	ldr	r2, [r5, #4]
 8004854:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004858:	4313      	orrs	r3, r2
 800485a:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800485c:	b11e      	cbz	r6, 8004866 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800485e:	69e3      	ldr	r3, [r4, #28]
 8004860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004864:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004866:	6828      	ldr	r0, [r5, #0]
 8004868:	0783      	lsls	r3, r0, #30
 800486a:	d506      	bpl.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800486c:	4924      	ldr	r1, [pc, #144]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800486e:	68ab      	ldr	r3, [r5, #8]
 8004870:	684a      	ldr	r2, [r1, #4]
 8004872:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004876:	431a      	orrs	r2, r3
 8004878:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800487a:	f010 0010 	ands.w	r0, r0, #16
 800487e:	d01b      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004880:	4a1f      	ldr	r2, [pc, #124]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004882:	68e9      	ldr	r1, [r5, #12]
 8004884:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004886:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004888:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800488c:	430b      	orrs	r3, r1
 800488e:	6053      	str	r3, [r2, #4]
 8004890:	e012      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus pwrclkchanged = RESET;
 8004892:	2600      	movs	r6, #0
 8004894:	e7d4      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800489c:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800489e:	f7fd fe75 	bl	800258c <HAL_GetTick>
 80048a2:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	05d8      	lsls	r0, r3, #23
 80048a8:	d4ce      	bmi.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048aa:	f7fd fe6f 	bl	800258c <HAL_GetTick>
 80048ae:	eba0 0008 	sub.w	r0, r0, r8
 80048b2:	2864      	cmp	r0, #100	; 0x64
 80048b4:	d9f6      	bls.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 80048b6:	2003      	movs	r0, #3
}
 80048b8:	b002      	add	sp, #8
 80048ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048be:	686a      	ldr	r2, [r5, #4]
 80048c0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d0c3      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 80048c8:	2001      	movs	r0, #1
 80048ca:	4a0f      	ldr	r2, [pc, #60]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048cc:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80048ce:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048d2:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048d4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048d8:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 80048dc:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80048de:	07d9      	lsls	r1, r3, #31
 80048e0:	d5b6      	bpl.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80048e2:	f7fd fe53 	bl	800258c <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048e6:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80048ea:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ec:	6a23      	ldr	r3, [r4, #32]
 80048ee:	079a      	lsls	r2, r3, #30
 80048f0:	d4ae      	bmi.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048f2:	f7fd fe4b 	bl	800258c <HAL_GetTick>
 80048f6:	1bc0      	subs	r0, r0, r7
 80048f8:	4540      	cmp	r0, r8
 80048fa:	d9f7      	bls.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80048fc:	e7db      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80048fe:	bf00      	nop
 8004900:	40021000 	.word	0x40021000
 8004904:	40007000 	.word	0x40007000
 8004908:	42420000 	.word	0x42420000

0800490c <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800490c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004910:	461c      	mov	r4, r3
 8004912:	4616      	mov	r6, r2
 8004914:	460f      	mov	r7, r1
 8004916:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004918:	f7fd fe38 	bl	800258c <HAL_GetTick>
 800491c:	4434      	add	r4, r6
 800491e:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8004920:	f7fd fe34 	bl	800258c <HAL_GetTick>
 8004924:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004926:	4b23      	ldr	r3, [pc, #140]	; (80049b4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa8>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800492e:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004930:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8004932:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004934:	6893      	ldr	r3, [r2, #8]
 8004936:	ea37 0303 	bics.w	r3, r7, r3
 800493a:	d001      	beq.n	8004940 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 800493c:	2000      	movs	r0, #0
 800493e:	e02e      	b.n	800499e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
    if (Timeout != HAL_MAX_DELAY)
 8004940:	1c73      	adds	r3, r6, #1
 8004942:	d0f7      	beq.n	8004934 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004944:	f7fd fe22 	bl	800258c <HAL_GetTick>
 8004948:	eba0 0008 	sub.w	r0, r0, r8
 800494c:	42a0      	cmp	r0, r4
 800494e:	d329      	bcc.n	80049a4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004950:	682b      	ldr	r3, [r5, #0]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004958:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800495a:	686a      	ldr	r2, [r5, #4]
 800495c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004960:	d10a      	bne.n	8004978 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
 8004962:	68aa      	ldr	r2, [r5, #8]
 8004964:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004968:	d002      	beq.n	8004970 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800496a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800496e:	d103      	bne.n	8004978 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          __HAL_SPI_DISABLE(hspi);
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004976:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004978:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800497a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800497e:	d107      	bne.n	8004990 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
          SPI_RESET_CRC(hspi);
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004986:	601a      	str	r2, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800498e:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8004990:	2301      	movs	r3, #1
 8004992:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004996:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8004998:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 800499a:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 800499e:	b002      	add	sp, #8
 80049a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (count == 0U)
 80049a4:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80049a6:	2b00      	cmp	r3, #0
      count--;
 80049a8:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80049aa:	bf08      	it	eq
 80049ac:	2400      	moveq	r4, #0
      count--;
 80049ae:	3b01      	subs	r3, #1
 80049b0:	e7be      	b.n	8004930 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 80049b2:	bf00      	nop
 80049b4:	20000010 	.word	0x20000010

080049b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80049b8:	b510      	push	{r4, lr}
 80049ba:	4613      	mov	r3, r2
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049bc:	460a      	mov	r2, r1
 80049be:	2180      	movs	r1, #128	; 0x80
{
 80049c0:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049c2:	f7ff ffa3 	bl	800490c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80049c6:	b120      	cbz	r0, 80049d2 <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 80049c8:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049ca:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80049cc:	f043 0320 	orr.w	r3, r3, #32
 80049d0:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 80049d2:	bd10      	pop	{r4, pc}

080049d4 <HAL_SPI_Init>:
{
 80049d4:	b510      	push	{r4, lr}
  if (hspi == NULL)
 80049d6:	4604      	mov	r4, r0
 80049d8:	2800      	cmp	r0, #0
 80049da:	d051      	beq.n	8004a80 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d14a      	bne.n	8004a78 <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049e2:	6842      	ldr	r2, [r0, #4]
 80049e4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80049e8:	d000      	beq.n	80049ec <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049ea:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049ec:	2300      	movs	r3, #0
 80049ee:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80049f0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80049f4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80049f8:	b923      	cbnz	r3, 8004a04 <HAL_SPI_Init+0x30>
    HAL_SPI_MspInit(hspi);
 80049fa:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80049fc:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8004a00:	f7fc fd34 	bl	800146c <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004a04:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8004a06:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004a08:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8004a0c:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a0e:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8004a10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a14:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a16:	6863      	ldr	r3, [r4, #4]
 8004a18:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8004a1c:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8004a20:	4303      	orrs	r3, r0
 8004a22:	68e0      	ldr	r0, [r4, #12]
 8004a24:	69a1      	ldr	r1, [r4, #24]
 8004a26:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 8004a2a:	4303      	orrs	r3, r0
 8004a2c:	6920      	ldr	r0, [r4, #16]
 8004a2e:	f000 0002 	and.w	r0, r0, #2
 8004a32:	4303      	orrs	r3, r0
 8004a34:	6960      	ldr	r0, [r4, #20]
 8004a36:	f000 0001 	and.w	r0, r0, #1
 8004a3a:	4303      	orrs	r3, r0
 8004a3c:	f401 7000 	and.w	r0, r1, #512	; 0x200
 8004a40:	4303      	orrs	r3, r0
 8004a42:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004a44:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a46:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8004a4a:	4303      	orrs	r3, r0
 8004a4c:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004a4e:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a52:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8004a56:	4303      	orrs	r3, r0
 8004a58:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004a5a:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8004a5e:	4303      	orrs	r3, r0
 8004a60:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004a62:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a64:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a66:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a6c:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8004a6e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a70:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a72:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8004a76:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a78:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a7e:	e7b5      	b.n	80049ec <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8004a80:	2001      	movs	r0, #1
 8004a82:	e7f8      	b.n	8004a76 <HAL_SPI_Init+0xa2>

08004a84 <HAL_SPI_Transmit>:
{
 8004a84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004a88:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8004a8a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8004a8e:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8004a90:	2b01      	cmp	r3, #1
{
 8004a92:	460d      	mov	r5, r1
 8004a94:	4617      	mov	r7, r2
  __HAL_LOCK(hspi);
 8004a96:	f000 80a6 	beq.w	8004be6 <HAL_SPI_Transmit+0x162>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004aa0:	f7fd fd74 	bl	800258c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8004aa4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8004aa8:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	fa5f f883 	uxtb.w	r8, r3
 8004ab0:	f040 8096 	bne.w	8004be0 <HAL_SPI_Transmit+0x15c>
  if ((pData == NULL) || (Size == 0U))
 8004ab4:	2d00      	cmp	r5, #0
 8004ab6:	d063      	beq.n	8004b80 <HAL_SPI_Transmit+0xfc>
 8004ab8:	2f00      	cmp	r7, #0
 8004aba:	d061      	beq.n	8004b80 <HAL_SPI_Transmit+0xfc>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004abc:	2303      	movs	r3, #3
 8004abe:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ac2:	2300      	movs	r3, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ac4:	68a2      	ldr	r2, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ac6:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ac8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->RxISR       = NULL;
 8004acc:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8004ad0:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ad2:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004ad4:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004ad6:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ad8:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_DISABLE(hspi);
 8004ada:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 8004adc:	86a7      	strh	r7, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ade:	d107      	bne.n	8004af0 <HAL_SPI_Transmit+0x6c>
    __HAL_SPI_DISABLE(hspi);
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ae6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004aee:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004af0:	681a      	ldr	r2, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004af2:	6861      	ldr	r1, [r4, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004af4:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8004af6:	bf5e      	ittt	pl
 8004af8:	681a      	ldrpl	r2, [r3, #0]
 8004afa:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8004afe:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b00:	68e2      	ldr	r2, [r4, #12]
 8004b02:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8004b06:	d145      	bne.n	8004b94 <HAL_SPI_Transmit+0x110>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b08:	b109      	cbz	r1, 8004b0e <HAL_SPI_Transmit+0x8a>
 8004b0a:	2f01      	cmp	r7, #1
 8004b0c:	d107      	bne.n	8004b1e <HAL_SPI_Transmit+0x9a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b0e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8004b12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b14:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004b16:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8004b1e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	b9b3      	cbnz	r3, 8004b52 <HAL_SPI_Transmit+0xce>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b24:	464a      	mov	r2, r9
 8004b26:	4631      	mov	r1, r6
 8004b28:	4620      	mov	r0, r4
 8004b2a:	f7ff ff45 	bl	80049b8 <SPI_EndRxTxTransaction>
 8004b2e:	2800      	cmp	r0, #0
 8004b30:	d153      	bne.n	8004bda <HAL_SPI_Transmit+0x156>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b32:	68a3      	ldr	r3, [r4, #8]
 8004b34:	b933      	cbnz	r3, 8004b44 <HAL_SPI_Transmit+0xc0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b36:	9301      	str	r3, [sp, #4]
 8004b38:	6823      	ldr	r3, [r4, #0]
 8004b3a:	68da      	ldr	r2, [r3, #12]
 8004b3c:	9201      	str	r2, [sp, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	9301      	str	r3, [sp, #4]
 8004b42:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b44:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004b46:	b9db      	cbnz	r3, 8004b80 <HAL_SPI_Transmit+0xfc>
    hspi->State = HAL_SPI_STATE_READY;
 8004b48:	2201      	movs	r2, #1
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b4a:	4698      	mov	r8, r3
    hspi->State = HAL_SPI_STATE_READY;
 8004b4c:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
 8004b50:	e016      	b.n	8004b80 <HAL_SPI_Transmit+0xfc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b52:	6822      	ldr	r2, [r4, #0]
 8004b54:	6893      	ldr	r3, [r2, #8]
 8004b56:	0798      	lsls	r0, r3, #30
 8004b58:	d505      	bpl.n	8004b66 <HAL_SPI_Transmit+0xe2>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004b5c:	f833 1b02 	ldrh.w	r1, [r3], #2
 8004b60:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b62:	6323      	str	r3, [r4, #48]	; 0x30
 8004b64:	e7d7      	b.n	8004b16 <HAL_SPI_Transmit+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b66:	f7fd fd11 	bl	800258c <HAL_GetTick>
 8004b6a:	eba0 0009 	sub.w	r0, r0, r9
 8004b6e:	42b0      	cmp	r0, r6
 8004b70:	d30d      	bcc.n	8004b8e <HAL_SPI_Transmit+0x10a>
 8004b72:	1c71      	adds	r1, r6, #1
 8004b74:	d0d3      	beq.n	8004b1e <HAL_SPI_Transmit+0x9a>
          hspi->State = HAL_SPI_STATE_READY;
 8004b76:	2301      	movs	r3, #1
          errorcode = HAL_TIMEOUT;
 8004b78:	f04f 0803 	mov.w	r8, #3
          hspi->State = HAL_SPI_STATE_READY;
 8004b7c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004b80:	2300      	movs	r3, #0
 8004b82:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004b86:	4640      	mov	r0, r8
 8004b88:	b003      	add	sp, #12
 8004b8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b8e:	2e00      	cmp	r6, #0
 8004b90:	d1c5      	bne.n	8004b1e <HAL_SPI_Transmit+0x9a>
 8004b92:	e7f0      	b.n	8004b76 <HAL_SPI_Transmit+0xf2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b94:	b109      	cbz	r1, 8004b9a <HAL_SPI_Transmit+0x116>
 8004b96:	2f01      	cmp	r7, #1
 8004b98:	d108      	bne.n	8004bac <HAL_SPI_Transmit+0x128>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b9a:	782a      	ldrb	r2, [r5, #0]
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b9c:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004ba4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8004bac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d0b7      	beq.n	8004b24 <HAL_SPI_Transmit+0xa0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bb4:	6823      	ldr	r3, [r4, #0]
 8004bb6:	689a      	ldr	r2, [r3, #8]
 8004bb8:	0792      	lsls	r2, r2, #30
 8004bba:	d502      	bpl.n	8004bc2 <HAL_SPI_Transmit+0x13e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bbc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004bbe:	7812      	ldrb	r2, [r2, #0]
 8004bc0:	e7ec      	b.n	8004b9c <HAL_SPI_Transmit+0x118>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bc2:	f7fd fce3 	bl	800258c <HAL_GetTick>
 8004bc6:	eba0 0009 	sub.w	r0, r0, r9
 8004bca:	42b0      	cmp	r0, r6
 8004bcc:	d302      	bcc.n	8004bd4 <HAL_SPI_Transmit+0x150>
 8004bce:	1c73      	adds	r3, r6, #1
 8004bd0:	d0ec      	beq.n	8004bac <HAL_SPI_Transmit+0x128>
 8004bd2:	e7d0      	b.n	8004b76 <HAL_SPI_Transmit+0xf2>
 8004bd4:	2e00      	cmp	r6, #0
 8004bd6:	d1e9      	bne.n	8004bac <HAL_SPI_Transmit+0x128>
 8004bd8:	e7cd      	b.n	8004b76 <HAL_SPI_Transmit+0xf2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bda:	2320      	movs	r3, #32
 8004bdc:	6563      	str	r3, [r4, #84]	; 0x54
 8004bde:	e7a8      	b.n	8004b32 <HAL_SPI_Transmit+0xae>
    errorcode = HAL_BUSY;
 8004be0:	f04f 0802 	mov.w	r8, #2
 8004be4:	e7cc      	b.n	8004b80 <HAL_SPI_Transmit+0xfc>
  __HAL_LOCK(hspi);
 8004be6:	f04f 0802 	mov.w	r8, #2
 8004bea:	e7cc      	b.n	8004b86 <HAL_SPI_Transmit+0x102>

08004bec <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bec:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bee:	f102 030c 	add.w	r3, r2, #12
 8004bf2:	e853 3f00 	ldrex	r3, [r3]
 8004bf6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfa:	320c      	adds	r2, #12
 8004bfc:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8004c00:	6802      	ldr	r2, [r0, #0]
 8004c02:	2900      	cmp	r1, #0
 8004c04:	d1f2      	bne.n	8004bec <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c06:	f102 0314 	add.w	r3, r2, #20
 8004c0a:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c0e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c12:	f102 0c14 	add.w	ip, r2, #20
 8004c16:	e84c 3100 	strex	r1, r3, [ip]
 8004c1a:	2900      	cmp	r1, #0
 8004c1c:	d1f3      	bne.n	8004c06 <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c1e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d10b      	bne.n	8004c3c <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c24:	f102 030c 	add.w	r3, r2, #12
 8004c28:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c2c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c30:	f102 0c0c 	add.w	ip, r2, #12
 8004c34:	e84c 3100 	strex	r1, r3, [ip]
 8004c38:	2900      	cmp	r1, #0
 8004c3a:	d1f3      	bne.n	8004c24 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c3c:	2320      	movs	r3, #32
 8004c3e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c42:	2300      	movs	r3, #0
 8004c44:	6303      	str	r3, [r0, #48]	; 0x30
}
 8004c46:	4770      	bx	lr

08004c48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c48:	b510      	push	{r4, lr}
 8004c4a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c4c:	6803      	ldr	r3, [r0, #0]
 8004c4e:	68c1      	ldr	r1, [r0, #12]
 8004c50:	691a      	ldr	r2, [r3, #16]
 8004c52:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004c56:	430a      	orrs	r2, r1
 8004c58:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004c5a:	6882      	ldr	r2, [r0, #8]
 8004c5c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8004c5e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004c60:	4302      	orrs	r2, r0
 8004c62:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8004c64:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8004c68:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004c6c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c72:	695a      	ldr	r2, [r3, #20]
 8004c74:	69a1      	ldr	r1, [r4, #24]
 8004c76:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004c7e:	4a0e      	ldr	r2, [pc, #56]	; (8004cb8 <UART_SetConfig+0x70>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d115      	bne.n	8004cb0 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004c84:	f7ff fdaa 	bl	80047dc <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c88:	2319      	movs	r3, #25
 8004c8a:	4343      	muls	r3, r0
 8004c8c:	6862      	ldr	r2, [r4, #4]
 8004c8e:	6820      	ldr	r0, [r4, #0]
 8004c90:	0092      	lsls	r2, r2, #2
 8004c92:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c96:	2264      	movs	r2, #100	; 0x64
 8004c98:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c9c:	fb02 3311 	mls	r3, r2, r1, r3
 8004ca0:	011b      	lsls	r3, r3, #4
 8004ca2:	3332      	adds	r3, #50	; 0x32
 8004ca4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ca8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8004cac:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8004cae:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8004cb0:	f7ff fd84 	bl	80047bc <HAL_RCC_GetPCLK1Freq>
 8004cb4:	e7e8      	b.n	8004c88 <UART_SetConfig+0x40>
 8004cb6:	bf00      	nop
 8004cb8:	40013800 	.word	0x40013800

08004cbc <HAL_UART_Init>:
{
 8004cbc:	b510      	push	{r4, lr}
  if (huart == NULL)
 8004cbe:	4604      	mov	r4, r0
 8004cc0:	b348      	cbz	r0, 8004d16 <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004cc2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004cc6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004cca:	b91b      	cbnz	r3, 8004cd4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8004ccc:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8004cd0:	f7fc fbfc 	bl	80014cc <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8004cd4:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8004cd6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004cd8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8004cdc:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8004cde:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8004ce0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ce4:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004ce6:	f7ff ffaf 	bl	8004c48 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cea:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cec:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cee:	691a      	ldr	r2, [r3, #16]
 8004cf0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cf4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cf6:	695a      	ldr	r2, [r3, #20]
 8004cf8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cfc:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8004cfe:	68da      	ldr	r2, [r3, #12]
 8004d00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d04:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004d06:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d08:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004d0a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d0e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d12:	6360      	str	r0, [r4, #52]	; 0x34
}
 8004d14:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004d16:	2001      	movs	r0, #1
 8004d18:	e7fc      	b.n	8004d14 <HAL_UART_Init+0x58>

08004d1a <HAL_UART_TxCpltCallback>:
 8004d1a:	4770      	bx	lr

08004d1c <HAL_UART_RxCpltCallback>:
 8004d1c:	4770      	bx	lr

08004d1e <HAL_UART_ErrorCallback>:
 8004d1e:	4770      	bx	lr

08004d20 <UART_DMAAbortOnError>:
{
 8004d20:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8004d22:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d24:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8004d26:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004d28:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8004d2a:	f7ff fff8 	bl	8004d1e <HAL_UART_ErrorCallback>
}
 8004d2e:	bd08      	pop	{r3, pc}

08004d30 <HAL_UARTEx_RxEventCallback>:
}
 8004d30:	4770      	bx	lr

08004d32 <UART_Receive_IT.part.0.isra.0>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8004d32:	b507      	push	{r0, r1, r2, lr}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d34:	6881      	ldr	r1, [r0, #8]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d36:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d38:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d3c:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d3e:	d13f      	bne.n	8004dc0 <UART_Receive_IT.part.0.isra.0+0x8e>
 8004d40:	6901      	ldr	r1, [r0, #16]
 8004d42:	2900      	cmp	r1, #0
 8004d44:	d13f      	bne.n	8004dc6 <UART_Receive_IT.part.0.isra.0+0x94>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d46:	6852      	ldr	r2, [r2, #4]
 8004d48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d4c:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 1U;
 8004d50:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8004d52:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8004d54:	3b01      	subs	r3, #1
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d12d      	bne.n	8004dba <UART_Receive_IT.part.0.isra.0+0x88>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d5e:	6802      	ldr	r2, [r0, #0]
 8004d60:	68d1      	ldr	r1, [r2, #12]
 8004d62:	f021 0120 	bic.w	r1, r1, #32
 8004d66:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d68:	68d1      	ldr	r1, [r2, #12]
 8004d6a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004d6e:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d70:	6951      	ldr	r1, [r2, #20]
 8004d72:	f021 0101 	bic.w	r1, r1, #1
 8004d76:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004d78:	2220      	movs	r2, #32
 8004d7a:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d7e:	6343      	str	r3, [r0, #52]	; 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d80:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004d82:	2a01      	cmp	r2, #1
 8004d84:	6802      	ldr	r2, [r0, #0]
 8004d86:	d128      	bne.n	8004dda <UART_Receive_IT.part.0.isra.0+0xa8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d88:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8a:	f102 030c 	add.w	r3, r2, #12
 8004d8e:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d92:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d96:	f102 0c0c 	add.w	ip, r2, #12
 8004d9a:	e84c 3100 	strex	r1, r3, [ip]
 8004d9e:	2900      	cmp	r1, #0
 8004da0:	d1f3      	bne.n	8004d8a <UART_Receive_IT.part.0.isra.0+0x58>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004da2:	6813      	ldr	r3, [r2, #0]
 8004da4:	06db      	lsls	r3, r3, #27
 8004da6:	d505      	bpl.n	8004db4 <UART_Receive_IT.part.0.isra.0+0x82>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004da8:	9101      	str	r1, [sp, #4]
 8004daa:	6813      	ldr	r3, [r2, #0]
 8004dac:	9301      	str	r3, [sp, #4]
 8004dae:	6853      	ldr	r3, [r2, #4]
 8004db0:	9301      	str	r3, [sp, #4]
 8004db2:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004db4:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8004db6:	f7ff ffbb 	bl	8004d30 <HAL_UARTEx_RxEventCallback>
}
 8004dba:	b003      	add	sp, #12
 8004dbc:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004dc0:	b939      	cbnz	r1, 8004dd2 <UART_Receive_IT.part.0.isra.0+0xa0>
 8004dc2:	6901      	ldr	r1, [r0, #16]
 8004dc4:	b929      	cbnz	r1, 8004dd2 <UART_Receive_IT.part.0.isra.0+0xa0>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004dc6:	6852      	ldr	r2, [r2, #4]
 8004dc8:	b2d2      	uxtb	r2, r2
 8004dca:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8004dcc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004dce:	3301      	adds	r3, #1
 8004dd0:	e7be      	b.n	8004d50 <UART_Receive_IT.part.0.isra.0+0x1e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004dd2:	6852      	ldr	r2, [r2, #4]
 8004dd4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004dd8:	e7f7      	b.n	8004dca <UART_Receive_IT.part.0.isra.0+0x98>
        HAL_UART_RxCpltCallback(huart);
 8004dda:	f7ff ff9f 	bl	8004d1c <HAL_UART_RxCpltCallback>
 8004dde:	e7ec      	b.n	8004dba <UART_Receive_IT.part.0.isra.0+0x88>

08004de0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004de0:	6803      	ldr	r3, [r0, #0]
{
 8004de2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004de4:	681a      	ldr	r2, [r3, #0]
{
 8004de6:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8004de8:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004dec:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004dee:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8004df0:	d10c      	bne.n	8004e0c <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004df2:	0695      	lsls	r5, r2, #26
 8004df4:	d570      	bpl.n	8004ed8 <HAL_UART_IRQHandler+0xf8>
 8004df6:	068d      	lsls	r5, r1, #26
 8004df8:	d56e      	bpl.n	8004ed8 <HAL_UART_IRQHandler+0xf8>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004dfa:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8004dfe:	2b22      	cmp	r3, #34	; 0x22
 8004e00:	d164      	bne.n	8004ecc <HAL_UART_IRQHandler+0xec>
}
 8004e02:	b003      	add	sp, #12
 8004e04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e08:	f7ff bf93 	b.w	8004d32 <UART_Receive_IT.part.0.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004e0c:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e10:	f401 7590 	and.w	r5, r1, #288	; 0x120
 8004e14:	4305      	orrs	r5, r0
 8004e16:	d05f      	beq.n	8004ed8 <HAL_UART_IRQHandler+0xf8>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e18:	07d5      	lsls	r5, r2, #31
 8004e1a:	d505      	bpl.n	8004e28 <HAL_UART_IRQHandler+0x48>
 8004e1c:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e1e:	bf42      	ittt	mi
 8004e20:	6c63      	ldrmi	r3, [r4, #68]	; 0x44
 8004e22:	f043 0301 	orrmi.w	r3, r3, #1
 8004e26:	6463      	strmi	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e28:	0755      	lsls	r5, r2, #29
 8004e2a:	d504      	bpl.n	8004e36 <HAL_UART_IRQHandler+0x56>
 8004e2c:	b118      	cbz	r0, 8004e36 <HAL_UART_IRQHandler+0x56>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e2e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004e30:	f043 0302 	orr.w	r3, r3, #2
 8004e34:	6463      	str	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e36:	0793      	lsls	r3, r2, #30
 8004e38:	d504      	bpl.n	8004e44 <HAL_UART_IRQHandler+0x64>
 8004e3a:	b118      	cbz	r0, 8004e44 <HAL_UART_IRQHandler+0x64>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e3c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004e3e:	f043 0304 	orr.w	r3, r3, #4
 8004e42:	6463      	str	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e44:	0715      	lsls	r5, r2, #28
 8004e46:	d507      	bpl.n	8004e58 <HAL_UART_IRQHandler+0x78>
 8004e48:	f001 0320 	and.w	r3, r1, #32
 8004e4c:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e4e:	bf1e      	ittt	ne
 8004e50:	6c63      	ldrne	r3, [r4, #68]	; 0x44
 8004e52:	f043 0308 	orrne.w	r3, r3, #8
 8004e56:	6463      	strne	r3, [r4, #68]	; 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e58:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d036      	beq.n	8004ecc <HAL_UART_IRQHandler+0xec>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e5e:	0690      	lsls	r0, r2, #26
 8004e60:	d508      	bpl.n	8004e74 <HAL_UART_IRQHandler+0x94>
 8004e62:	068a      	lsls	r2, r1, #26
 8004e64:	d506      	bpl.n	8004e74 <HAL_UART_IRQHandler+0x94>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e66:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8004e6a:	2b22      	cmp	r3, #34	; 0x22
 8004e6c:	d102      	bne.n	8004e74 <HAL_UART_IRQHandler+0x94>
 8004e6e:	4620      	mov	r0, r4
 8004e70:	f7ff ff5f 	bl	8004d32 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e74:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8004e76:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e78:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e7a:	6c65      	ldr	r5, [r4, #68]	; 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e80:	f005 0508 	and.w	r5, r5, #8
 8004e84:	431d      	orrs	r5, r3
 8004e86:	d023      	beq.n	8004ed0 <HAL_UART_IRQHandler+0xf0>
        UART_EndRxTransfer(huart);
 8004e88:	f7ff feb0 	bl	8004bec <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e8c:	6822      	ldr	r2, [r4, #0]
 8004e8e:	6953      	ldr	r3, [r2, #20]
 8004e90:	065b      	lsls	r3, r3, #25
 8004e92:	d518      	bpl.n	8004ec6 <HAL_UART_IRQHandler+0xe6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e94:	f102 0314 	add.w	r3, r2, #20
 8004e98:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea0:	f102 0014 	add.w	r0, r2, #20
 8004ea4:	e840 3100 	strex	r1, r3, [r0]
 8004ea8:	2900      	cmp	r1, #0
 8004eaa:	d1f3      	bne.n	8004e94 <HAL_UART_IRQHandler+0xb4>
          if (huart->hdmarx != NULL)
 8004eac:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004eae:	b150      	cbz	r0, 8004ec6 <HAL_UART_IRQHandler+0xe6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004eb0:	4b73      	ldr	r3, [pc, #460]	; (8005080 <HAL_UART_IRQHandler+0x2a0>)
 8004eb2:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004eb4:	f7fd fd5e 	bl	8002974 <HAL_DMA_Abort_IT>
 8004eb8:	b140      	cbz	r0, 8004ecc <HAL_UART_IRQHandler+0xec>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004eba:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004ebc:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8004ebe:	b003      	add	sp, #12
 8004ec0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ec4:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8004ec6:	4620      	mov	r0, r4
 8004ec8:	f7ff ff29 	bl	8004d1e <HAL_UART_ErrorCallback>
}
 8004ecc:	b003      	add	sp, #12
 8004ece:	bd30      	pop	{r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 8004ed0:	f7ff ff25 	bl	8004d1e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ed4:	6465      	str	r5, [r4, #68]	; 0x44
 8004ed6:	e7f9      	b.n	8004ecc <HAL_UART_IRQHandler+0xec>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ed8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004eda:	2801      	cmp	r0, #1
 8004edc:	f040 8094 	bne.w	8005008 <HAL_UART_IRQHandler+0x228>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004ee0:	06d5      	lsls	r5, r2, #27
 8004ee2:	f140 8091 	bpl.w	8005008 <HAL_UART_IRQHandler+0x228>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ee6:	06c8      	lsls	r0, r1, #27
 8004ee8:	f140 808e 	bpl.w	8005008 <HAL_UART_IRQHandler+0x228>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004eec:	2200      	movs	r2, #0
 8004eee:	9201      	str	r2, [sp, #4]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	9201      	str	r2, [sp, #4]
 8004ef4:	685a      	ldr	r2, [r3, #4]
 8004ef6:	9201      	str	r2, [sp, #4]
 8004ef8:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004efa:	695a      	ldr	r2, [r3, #20]
 8004efc:	0655      	lsls	r5, r2, #25
 8004efe:	d54d      	bpl.n	8004f9c <HAL_UART_IRQHandler+0x1bc>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f00:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004f02:	680a      	ldr	r2, [r1, #0]
 8004f04:	6852      	ldr	r2, [r2, #4]
 8004f06:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8004f08:	2a00      	cmp	r2, #0
 8004f0a:	d0df      	beq.n	8004ecc <HAL_UART_IRQHandler+0xec>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f0c:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8004f0e:	4290      	cmp	r0, r2
 8004f10:	d9dc      	bls.n	8004ecc <HAL_UART_IRQHandler+0xec>
        huart->RxXferCount = nb_remaining_rx_data;
 8004f12:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f14:	698a      	ldr	r2, [r1, #24]
 8004f16:	2a20      	cmp	r2, #32
 8004f18:	d036      	beq.n	8004f88 <HAL_UART_IRQHandler+0x1a8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1a:	f103 020c 	add.w	r2, r3, #12
 8004f1e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f26:	f103 000c 	add.w	r0, r3, #12
 8004f2a:	e840 2100 	strex	r1, r2, [r0]
 8004f2e:	2900      	cmp	r1, #0
 8004f30:	d1f3      	bne.n	8004f1a <HAL_UART_IRQHandler+0x13a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f32:	f103 0214 	add.w	r2, r3, #20
 8004f36:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f3a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3e:	f103 0014 	add.w	r0, r3, #20
 8004f42:	e840 2100 	strex	r1, r2, [r0]
 8004f46:	2900      	cmp	r1, #0
 8004f48:	d1f3      	bne.n	8004f32 <HAL_UART_IRQHandler+0x152>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f4a:	f103 0214 	add.w	r2, r3, #20
 8004f4e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f56:	f103 0014 	add.w	r0, r3, #20
 8004f5a:	e840 2100 	strex	r1, r2, [r0]
 8004f5e:	2900      	cmp	r1, #0
 8004f60:	d1f3      	bne.n	8004f4a <HAL_UART_IRQHandler+0x16a>
          huart->RxState = HAL_UART_STATE_READY;
 8004f62:	2220      	movs	r2, #32
 8004f64:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f68:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6a:	f103 020c 	add.w	r2, r3, #12
 8004f6e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f72:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f76:	f103 000c 	add.w	r0, r3, #12
 8004f7a:	e840 2100 	strex	r1, r2, [r0]
 8004f7e:	2900      	cmp	r1, #0
 8004f80:	d1f3      	bne.n	8004f6a <HAL_UART_IRQHandler+0x18a>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f82:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004f84:	f7fd fcd4 	bl	8002930 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f88:	2302      	movs	r3, #2
 8004f8a:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f8c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8004f8e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8004f90:	1ac9      	subs	r1, r1, r3
 8004f92:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f94:	4620      	mov	r0, r4
 8004f96:	f7ff fecb 	bl	8004d30 <HAL_UARTEx_RxEventCallback>
 8004f9a:	e797      	b.n	8004ecc <HAL_UART_IRQHandler+0xec>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f9c:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8004f9e:	b28a      	uxth	r2, r1
      if ((huart->RxXferCount > 0U)
 8004fa0:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8004fa2:	b289      	uxth	r1, r1
 8004fa4:	2900      	cmp	r1, #0
 8004fa6:	d091      	beq.n	8004ecc <HAL_UART_IRQHandler+0xec>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004fa8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8004faa:	1a89      	subs	r1, r1, r2
 8004fac:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8004fae:	2900      	cmp	r1, #0
 8004fb0:	d08c      	beq.n	8004ecc <HAL_UART_IRQHandler+0xec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb2:	f103 020c 	add.w	r2, r3, #12
 8004fb6:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fbe:	f103 050c 	add.w	r5, r3, #12
 8004fc2:	e845 2000 	strex	r0, r2, [r5]
 8004fc6:	2800      	cmp	r0, #0
 8004fc8:	d1f3      	bne.n	8004fb2 <HAL_UART_IRQHandler+0x1d2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fca:	f103 0214 	add.w	r2, r3, #20
 8004fce:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fd2:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd6:	f103 0514 	add.w	r5, r3, #20
 8004fda:	e845 2000 	strex	r0, r2, [r5]
 8004fde:	2800      	cmp	r0, #0
 8004fe0:	d1f3      	bne.n	8004fca <HAL_UART_IRQHandler+0x1ea>
        huart->RxState = HAL_UART_STATE_READY;
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe8:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fea:	f103 020c 	add.w	r2, r3, #12
 8004fee:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ff2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff6:	f103 050c 	add.w	r5, r3, #12
 8004ffa:	e845 2000 	strex	r0, r2, [r5]
 8004ffe:	2800      	cmp	r0, #0
 8005000:	d1f3      	bne.n	8004fea <HAL_UART_IRQHandler+0x20a>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005002:	2302      	movs	r3, #2
 8005004:	6363      	str	r3, [r4, #52]	; 0x34
 8005006:	e7c5      	b.n	8004f94 <HAL_UART_IRQHandler+0x1b4>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005008:	0610      	lsls	r0, r2, #24
 800500a:	d528      	bpl.n	800505e <HAL_UART_IRQHandler+0x27e>
 800500c:	060d      	lsls	r5, r1, #24
 800500e:	d526      	bpl.n	800505e <HAL_UART_IRQHandler+0x27e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005010:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005014:	2a21      	cmp	r2, #33	; 0x21
 8005016:	f47f af59 	bne.w	8004ecc <HAL_UART_IRQHandler+0xec>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800501a:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800501c:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800501e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8005022:	d117      	bne.n	8005054 <HAL_UART_IRQHandler+0x274>
 8005024:	6921      	ldr	r1, [r4, #16]
 8005026:	b9a9      	cbnz	r1, 8005054 <HAL_UART_IRQHandler+0x274>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005028:	f832 1b02 	ldrh.w	r1, [r2], #2
 800502c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005030:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005032:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8005034:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8005036:	3a01      	subs	r2, #1
 8005038:	b292      	uxth	r2, r2
 800503a:	84e2      	strh	r2, [r4, #38]	; 0x26
 800503c:	2a00      	cmp	r2, #0
 800503e:	f47f af45 	bne.w	8004ecc <HAL_UART_IRQHandler+0xec>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005042:	68da      	ldr	r2, [r3, #12]
 8005044:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005048:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800504a:	68da      	ldr	r2, [r3, #12]
 800504c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005050:	60da      	str	r2, [r3, #12]
 8005052:	e73b      	b.n	8004ecc <HAL_UART_IRQHandler+0xec>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005054:	1c51      	adds	r1, r2, #1
 8005056:	6221      	str	r1, [r4, #32]
 8005058:	7812      	ldrb	r2, [r2, #0]
 800505a:	605a      	str	r2, [r3, #4]
 800505c:	e7ea      	b.n	8005034 <HAL_UART_IRQHandler+0x254>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800505e:	0650      	lsls	r0, r2, #25
 8005060:	f57f af34 	bpl.w	8004ecc <HAL_UART_IRQHandler+0xec>
 8005064:	064a      	lsls	r2, r1, #25
 8005066:	f57f af31 	bpl.w	8004ecc <HAL_UART_IRQHandler+0xec>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800506a:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 800506c:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800506e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005072:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8005074:	2320      	movs	r3, #32
 8005076:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  HAL_UART_TxCpltCallback(huart);
 800507a:	f7ff fe4e 	bl	8004d1a <HAL_UART_TxCpltCallback>
  return HAL_OK;
 800507e:	e725      	b.n	8004ecc <HAL_UART_IRQHandler+0xec>
 8005080:	08004d21 	.word	0x08004d21

08005084 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005084:	b084      	sub	sp, #16
 8005086:	a801      	add	r0, sp, #4
 8005088:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 800508c:	b004      	add	sp, #16
 800508e:	2000      	movs	r0, #0
 8005090:	4770      	bx	lr

08005092 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005092:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005094:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
  USBx->ISTR = 0U;
 8005098:	2000      	movs	r0, #0
 800509a:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 800509e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 80050a2:	4770      	bx	lr

080050a4 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80050a4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80050a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80050ac:	045b      	lsls	r3, r3, #17
 80050ae:	0c5b      	lsrs	r3, r3, #17
 80050b0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80050b4:	2000      	movs	r0, #0
 80050b6:	4770      	bx	lr

080050b8 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80050b8:	2000      	movs	r0, #0
 80050ba:	4770      	bx	lr

080050bc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80050bc:	b084      	sub	sp, #16
 80050be:	b510      	push	{r4, lr}
 80050c0:	4604      	mov	r4, r0
 80050c2:	a803      	add	r0, sp, #12
 80050c4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80050c8:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80050ca:	2301      	movs	r3, #1
 80050cc:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
  USBx->CNTR = 0U;
 80050d0:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80050d4:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80050d8:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 80050dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050e0:	b004      	add	sp, #16
 80050e2:	4770      	bx	lr

080050e4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80050e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80050e6:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80050e8:	78ce      	ldrb	r6, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80050ea:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
{
 80050ee:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80050f0:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 80050f4:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 80050f8:	0424      	lsls	r4, r4, #16
 80050fa:	0c24      	lsrs	r4, r4, #16
  switch (ep->type)
 80050fc:	2e03      	cmp	r6, #3
 80050fe:	d84c      	bhi.n	800519a <USB_ActivateEndpoint+0xb6>
 8005100:	e8df f006 	tbb	[pc, r6]
 8005104:	44464802 	.word	0x44464802
  HAL_StatusTypeDef ret = HAL_OK;
 8005108:	4630      	mov	r0, r6
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800510a:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800510e:	f248 0780 	movw	r7, #32896	; 0x8080
 8005112:	433c      	orrs	r4, r7
 8005114:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005118:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800511c:	f8df c27c 	ldr.w	ip, [pc, #636]	; 800539c <USB_ActivateEndpoint+0x2b8>
 8005120:	b2a4      	uxth	r4, r4
 8005122:	ea04 040c 	and.w	r4, r4, ip
 8005126:	4314      	orrs	r4, r2
 8005128:	433c      	orrs	r4, r7
 800512a:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 800512e:	7b0c      	ldrb	r4, [r1, #12]
 8005130:	eb03 1e02 	add.w	lr, r3, r2, lsl #4
 8005134:	2c00      	cmp	r4, #0
 8005136:	f040 808b 	bne.w	8005250 <USB_ActivateEndpoint+0x16c>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800513a:	88cd      	ldrh	r5, [r1, #6]
    if (ep->is_in != 0U)
 800513c:	784c      	ldrb	r4, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800513e:	086d      	lsrs	r5, r5, #1
 8005140:	006d      	lsls	r5, r5, #1
    if (ep->is_in != 0U)
 8005142:	b364      	cbz	r4, 800519e <USB_ActivateEndpoint+0xba>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005144:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8005148:	b2a4      	uxth	r4, r4
 800514a:	4474      	add	r4, lr
 800514c:	f8a4 5400 	strh.w	r5, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005150:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005154:	064f      	lsls	r7, r1, #25
 8005156:	d50a      	bpl.n	800516e <USB_ActivateEndpoint+0x8a>
 8005158:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 800515c:	b2ad      	uxth	r5, r5
 800515e:	ea05 050c 	and.w	r5, r5, ip
 8005162:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 8005166:	f045 05c0 	orr.w	r5, r5, #192	; 0xc0
 800516a:	f823 5022 	strh.w	r5, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800516e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005172:	4c8b      	ldr	r4, [pc, #556]	; (80053a0 <USB_ActivateEndpoint+0x2bc>)
 8005174:	b289      	uxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 8005176:	2e01      	cmp	r6, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005178:	ea01 0104 	and.w	r1, r1, r4
      if (ep->type != EP_TYPE_ISOC)
 800517c:	d001      	beq.n	8005182 <USB_ActivateEndpoint+0x9e>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800517e:	f081 0120 	eor.w	r1, r1, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005182:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8005186:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800518a:	e0bf      	b.n	800530c <USB_ActivateEndpoint+0x228>
      wEpRegVal |= USB_EP_INTERRUPT;
 800518c:	f444 64c0 	orr.w	r4, r4, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8005190:	2000      	movs	r0, #0
      break;
 8005192:	e7bc      	b.n	800510e <USB_ActivateEndpoint+0x2a>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005194:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
      break;
 8005198:	e7fa      	b.n	8005190 <USB_ActivateEndpoint+0xac>
  switch (ep->type)
 800519a:	2001      	movs	r0, #1
 800519c:	e7b7      	b.n	800510e <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800519e:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 80051a2:	b2a4      	uxth	r4, r4
 80051a4:	4474      	add	r4, lr
 80051a6:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80051aa:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 80051ae:	b2a4      	uxth	r4, r4
 80051b0:	4474      	add	r4, lr
 80051b2:	f8b4 540c 	ldrh.w	r5, [r4, #1036]	; 0x40c
 80051b6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80051ba:	f8a4 540c 	strh.w	r5, [r4, #1036]	; 0x40c
 80051be:	690d      	ldr	r5, [r1, #16]
 80051c0:	2d3e      	cmp	r5, #62	; 0x3e
 80051c2:	d92f      	bls.n	8005224 <USB_ActivateEndpoint+0x140>
 80051c4:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	; 0x40c
 80051c8:	096e      	lsrs	r6, r5, #5
 80051ca:	06ed      	lsls	r5, r5, #27
 80051cc:	bf08      	it	eq
 80051ce:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80051d2:	b289      	uxth	r1, r1
 80051d4:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 80051d8:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80051dc:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80051e0:	b289      	uxth	r1, r1
 80051e2:	f8a4 140c 	strh.w	r1, [r4, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051e6:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80051ea:	044f      	lsls	r7, r1, #17
 80051ec:	d50d      	bpl.n	800520a <USB_ActivateEndpoint+0x126>
 80051ee:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80051f2:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80051f6:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80051fa:	0409      	lsls	r1, r1, #16
 80051fc:	0c09      	lsrs	r1, r1, #16
 80051fe:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8005202:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8005206:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      if (ep->num == 0U)
 800520a:	4c66      	ldr	r4, [pc, #408]	; (80053a4 <USB_ActivateEndpoint+0x2c0>)
 800520c:	b9ca      	cbnz	r2, 8005242 <USB_ActivateEndpoint+0x15e>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800520e:	8819      	ldrh	r1, [r3, #0]
 8005210:	b289      	uxth	r1, r1
 8005212:	4021      	ands	r1, r4
 8005214:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 8005218:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800521c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8005220:	8019      	strh	r1, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8005222:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005224:	b915      	cbnz	r5, 800522c <USB_ActivateEndpoint+0x148>
 8005226:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	; 0x40c
 800522a:	e7d5      	b.n	80051d8 <USB_ActivateEndpoint+0xf4>
 800522c:	07e9      	lsls	r1, r5, #31
 800522e:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	; 0x40c
 8005232:	ea4f 0655 	mov.w	r6, r5, lsr #1
 8005236:	bf48      	it	mi
 8005238:	3601      	addmi	r6, #1
 800523a:	b289      	uxth	r1, r1
 800523c:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8005240:	e7ce      	b.n	80051e0 <USB_ActivateEndpoint+0xfc>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005242:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005246:	b289      	uxth	r1, r1
 8005248:	4021      	ands	r1, r4
 800524a:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 800524e:	e798      	b.n	8005182 <USB_ActivateEndpoint+0x9e>
    if (ep->type == EP_TYPE_BULK)
 8005250:	2e02      	cmp	r6, #2
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005252:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
    if (ep->type == EP_TYPE_BULK)
 8005256:	d15c      	bne.n	8005312 <USB_ActivateEndpoint+0x22e>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005258:	b2ad      	uxth	r5, r5
 800525a:	ea05 050c 	and.w	r5, r5, ip
 800525e:	f445 4501 	orr.w	r5, r5, #33024	; 0x8100
 8005262:	f045 0580 	orr.w	r5, r5, #128	; 0x80
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005266:	f823 5022 	strh.w	r5, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800526a:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 800526e:	890d      	ldrh	r5, [r1, #8]
 8005270:	b2a4      	uxth	r4, r4
 8005272:	086d      	lsrs	r5, r5, #1
 8005274:	4474      	add	r4, lr
 8005276:	006d      	lsls	r5, r5, #1
 8005278:	f8a4 5400 	strh.w	r5, [r4, #1024]	; 0x400
 800527c:	894d      	ldrh	r5, [r1, #10]
 800527e:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8005282:	086d      	lsrs	r5, r5, #1
 8005284:	b2a4      	uxth	r4, r4
 8005286:	4474      	add	r4, lr
 8005288:	006d      	lsls	r5, r5, #1
 800528a:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
    if (ep->is_in == 0U)
 800528e:	7849      	ldrb	r1, [r1, #1]
 8005290:	2900      	cmp	r1, #0
 8005292:	d146      	bne.n	8005322 <USB_ActivateEndpoint+0x23e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005294:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005298:	044e      	lsls	r6, r1, #17
 800529a:	d50d      	bpl.n	80052b8 <USB_ActivateEndpoint+0x1d4>
 800529c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80052a0:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80052a4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80052a8:	0409      	lsls	r1, r1, #16
 80052aa:	0c09      	lsrs	r1, r1, #16
 80052ac:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80052b0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80052b4:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052b8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80052bc:	064d      	lsls	r5, r1, #25
 80052be:	d50d      	bpl.n	80052dc <USB_ActivateEndpoint+0x1f8>
 80052c0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80052c4:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80052c8:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80052cc:	0409      	lsls	r1, r1, #16
 80052ce:	0c09      	lsrs	r1, r1, #16
 80052d0:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80052d4:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 80052d8:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80052dc:	f248 0480 	movw	r4, #32896	; 0x8080
 80052e0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80052e4:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80052e8:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80052ec:	0409      	lsls	r1, r1, #16
 80052ee:	0c09      	lsrs	r1, r1, #16
 80052f0:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 80052f4:	4321      	orrs	r1, r4
 80052f6:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052fa:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80052fe:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8005302:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8005306:	0409      	lsls	r1, r1, #16
 8005308:	0c09      	lsrs	r1, r1, #16
 800530a:	4321      	orrs	r1, r4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800530c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 8005310:	e787      	b.n	8005222 <USB_ActivateEndpoint+0x13e>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005312:	f425 45e2 	bic.w	r5, r5, #28928	; 0x7100
 8005316:	f025 0570 	bic.w	r5, r5, #112	; 0x70
 800531a:	042d      	lsls	r5, r5, #16
 800531c:	0c2d      	lsrs	r5, r5, #16
 800531e:	433d      	orrs	r5, r7
 8005320:	e7a1      	b.n	8005266 <USB_ActivateEndpoint+0x182>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005322:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005326:	044c      	lsls	r4, r1, #17
 8005328:	d50d      	bpl.n	8005346 <USB_ActivateEndpoint+0x262>
 800532a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800532e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8005332:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8005336:	0409      	lsls	r1, r1, #16
 8005338:	0c09      	lsrs	r1, r1, #16
 800533a:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800533e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8005342:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005346:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800534a:	0649      	lsls	r1, r1, #25
 800534c:	d50d      	bpl.n	800536a <USB_ActivateEndpoint+0x286>
 800534e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005352:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8005356:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800535a:	0409      	lsls	r1, r1, #16
 800535c:	0c09      	lsrs	r1, r1, #16
 800535e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8005362:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8005366:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800536a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800536e:	4c0c      	ldr	r4, [pc, #48]	; (80053a0 <USB_ActivateEndpoint+0x2bc>)
 8005370:	b289      	uxth	r1, r1
 8005372:	4021      	ands	r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8005374:	2e01      	cmp	r6, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005376:	bf18      	it	ne
 8005378:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800537c:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8005380:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8005384:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005388:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800538c:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8005390:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8005394:	0409      	lsls	r1, r1, #16
 8005396:	0c09      	lsrs	r1, r1, #16
 8005398:	e6f3      	b.n	8005182 <USB_ActivateEndpoint+0x9e>
 800539a:	bf00      	nop
 800539c:	ffff8f8f 	.word	0xffff8f8f
 80053a0:	ffff8fbf 	.word	0xffff8fbf
 80053a4:	ffffbf8f 	.word	0xffffbf8f

080053a8 <USB_DeactivateEndpoint>:
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
 80053a8:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053aa:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 80053ac:	7b09      	ldrb	r1, [r1, #12]
 80053ae:	bbd9      	cbnz	r1, 8005428 <USB_DeactivateEndpoint+0x80>
    if (ep->is_in != 0U)
 80053b0:	b30a      	cbz	r2, 80053f6 <USB_DeactivateEndpoint+0x4e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053b2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80053b6:	0651      	lsls	r1, r2, #25
 80053b8:	d50d      	bpl.n	80053d6 <USB_DeactivateEndpoint+0x2e>
 80053ba:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80053be:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80053c2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80053c6:	0412      	lsls	r2, r2, #16
 80053c8:	0c12      	lsrs	r2, r2, #16
 80053ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053ce:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80053d2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053d6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80053da:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80053de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80053e2:	0412      	lsls	r2, r2, #16
 80053e4:	0c12      	lsrs	r2, r2, #16
 80053e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      PCD_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80053ee:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 80053f2:	2000      	movs	r0, #0
 80053f4:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053f6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80053fa:	0452      	lsls	r2, r2, #17
 80053fc:	d50d      	bpl.n	800541a <USB_DeactivateEndpoint+0x72>
 80053fe:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005402:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005406:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800540a:	0412      	lsls	r2, r2, #16
 800540c:	0c12      	lsrs	r2, r2, #16
 800540e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005412:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005416:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800541a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800541e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005422:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005426:	e7dc      	b.n	80053e2 <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 8005428:	2a00      	cmp	r2, #0
 800542a:	d148      	bne.n	80054be <USB_DeactivateEndpoint+0x116>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800542c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005430:	0451      	lsls	r1, r2, #17
 8005432:	d50d      	bpl.n	8005450 <USB_DeactivateEndpoint+0xa8>
 8005434:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005438:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800543c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005440:	0412      	lsls	r2, r2, #16
 8005442:	0c12      	lsrs	r2, r2, #16
 8005444:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005448:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800544c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005450:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005454:	0652      	lsls	r2, r2, #25
 8005456:	d50d      	bpl.n	8005474 <USB_DeactivateEndpoint+0xcc>
 8005458:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800545c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005460:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005464:	0412      	lsls	r2, r2, #16
 8005466:	0c12      	lsrs	r2, r2, #16
 8005468:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800546c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8005470:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005474:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 8005478:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800547c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005480:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005484:	0412      	lsls	r2, r2, #16
 8005486:	0c12      	lsrs	r2, r2, #16
 8005488:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800548c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8005490:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005494:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005498:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800549c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80054a0:	0412      	lsls	r2, r2, #16
 80054a2:	0c12      	lsrs	r2, r2, #16
 80054a4:	430a      	orrs	r2, r1
 80054a6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054aa:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80054ae:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80054b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80054b6:	0412      	lsls	r2, r2, #16
 80054b8:	0c12      	lsrs	r2, r2, #16
 80054ba:	430a      	orrs	r2, r1
 80054bc:	e797      	b.n	80053ee <USB_DeactivateEndpoint+0x46>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054be:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80054c2:	0451      	lsls	r1, r2, #17
 80054c4:	d50d      	bpl.n	80054e2 <USB_DeactivateEndpoint+0x13a>
 80054c6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80054ca:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80054ce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80054d2:	0412      	lsls	r2, r2, #16
 80054d4:	0c12      	lsrs	r2, r2, #16
 80054d6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80054da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80054de:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054e2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80054e6:	0652      	lsls	r2, r2, #25
 80054e8:	d50d      	bpl.n	8005506 <USB_DeactivateEndpoint+0x15e>
 80054ea:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80054ee:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80054f2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80054f6:	0412      	lsls	r2, r2, #16
 80054f8:	0c12      	lsrs	r2, r2, #16
 80054fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054fe:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8005502:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005506:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 800550a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800550e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005512:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005516:	0412      	lsls	r2, r2, #16
 8005518:	0c12      	lsrs	r2, r2, #16
 800551a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800551e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005522:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005526:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800552a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800552e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005532:	0412      	lsls	r2, r2, #16
 8005534:	0c12      	lsrs	r2, r2, #16
 8005536:	430a      	orrs	r2, r1
 8005538:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800553c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005540:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005544:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005548:	e7b5      	b.n	80054b6 <USB_DeactivateEndpoint+0x10e>

0800554a <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 800554a:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800554c:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 800554e:	b18b      	cbz	r3, 8005574 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005550:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005554:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005558:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800555c:	041b      	lsls	r3, r3, #16
 800555e:	0c1b      	lsrs	r3, r3, #16
 8005560:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005564:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800556c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8005570:	2000      	movs	r0, #0
 8005572:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005574:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005578:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800557c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005580:	041b      	lsls	r3, r3, #16
 8005582:	0c1b      	lsrs	r3, r3, #16
 8005584:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005588:	e7ec      	b.n	8005564 <USB_EPSetStall+0x1a>

0800558a <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 800558a:	7b0b      	ldrb	r3, [r1, #12]
 800558c:	bb3b      	cbnz	r3, 80055de <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 800558e:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005590:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 8005592:	b333      	cbz	r3, 80055e2 <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005594:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005598:	065b      	lsls	r3, r3, #25
 800559a:	d50d      	bpl.n	80055b8 <USB_EPClearStall+0x2e>
 800559c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80055a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a8:	041b      	lsls	r3, r3, #16
 80055aa:	0c1b      	lsrs	r3, r3, #16
 80055ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055b4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80055b8:	78cb      	ldrb	r3, [r1, #3]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d00f      	beq.n	80055de <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80055be:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80055c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055ca:	041b      	lsls	r3, r3, #16
 80055cc:	0c1b      	lsrs	r3, r3, #16
 80055ce:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80055d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055da:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 80055de:	2000      	movs	r0, #0
 80055e0:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055e2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80055e6:	045b      	lsls	r3, r3, #17
 80055e8:	d50d      	bpl.n	8005606 <USB_EPClearStall+0x7c>
 80055ea:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80055ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055f6:	041b      	lsls	r3, r3, #16
 80055f8:	0c1b      	lsrs	r3, r3, #16
 80055fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005602:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005606:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800560a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800560e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005612:	041b      	lsls	r3, r3, #16
 8005614:	0c1b      	lsrs	r3, r3, #16
 8005616:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800561a:	e7da      	b.n	80055d2 <USB_EPClearStall+0x48>

0800561c <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 800561c:	b911      	cbnz	r1, 8005624 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800561e:	2380      	movs	r3, #128	; 0x80
 8005620:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8005624:	2000      	movs	r0, #0
 8005626:	4770      	bx	lr

08005628 <USB_DevConnect>:
 8005628:	2000      	movs	r0, #0
 800562a:	4770      	bx	lr

0800562c <USB_DevDisconnect>:
 800562c:	2000      	movs	r0, #0
 800562e:	4770      	bx	lr

08005630 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005630:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8005634:	b280      	uxth	r0, r0
 8005636:	4770      	bx	lr

08005638 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8005638:	2000      	movs	r0, #0
 800563a:	4770      	bx	lr

0800563c <USB_WritePMA>:
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800563c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005640:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005642:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005646:	085b      	lsrs	r3, r3, #1
 8005648:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (count = n; count != 0U; count--)
 800564c:	4293      	cmp	r3, r2
 800564e:	d100      	bne.n	8005652 <USB_WritePMA+0x16>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 8005650:	4770      	bx	lr
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005652:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (WrVal & 0xFFFFU);
 8005656:	f822 0b04 	strh.w	r0, [r2], #4
  for (count = n; count != 0U; count--)
 800565a:	e7f7      	b.n	800564c <USB_WritePMA+0x10>

0800565c <USB_EPStartXfer>:
{
 800565c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005660:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8005662:	7849      	ldrb	r1, [r1, #1]
{
 8005664:	4605      	mov	r5, r0
  if (ep->is_in == 1U)
 8005666:	2901      	cmp	r1, #1
    if (ep->doublebuffer == 0U)
 8005668:	7b22      	ldrb	r2, [r4, #12]
  if (ep->is_in == 1U)
 800566a:	f040 811e 	bne.w	80058aa <USB_EPStartXfer+0x24e>
    if (ep->xfer_len > ep->maxpacket)
 800566e:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8005672:	69a6      	ldr	r6, [r4, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005674:	6961      	ldr	r1, [r4, #20]
 8005676:	4576      	cmp	r6, lr
 8005678:	bf28      	it	cs
 800567a:	4676      	movcs	r6, lr
    if (ep->doublebuffer == 0U)
 800567c:	bb0a      	cbnz	r2, 80056c2 <USB_EPStartXfer+0x66>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800567e:	b2b6      	uxth	r6, r6
 8005680:	88e2      	ldrh	r2, [r4, #6]
 8005682:	4633      	mov	r3, r6
 8005684:	f7ff ffda 	bl	800563c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005688:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800568c:	7821      	ldrb	r1, [r4, #0]
 800568e:	b290      	uxth	r0, r2
 8005690:	f205 4204 	addw	r2, r5, #1028	; 0x404
 8005694:	0109      	lsls	r1, r1, #4
 8005696:	4402      	add	r2, r0
 8005698:	528e      	strh	r6, [r1, r2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800569a:	7822      	ldrb	r2, [r4, #0]
 800569c:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80056a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056a8:	041b      	lsls	r3, r3, #16
 80056aa:	0c1b      	lsrs	r3, r3, #16
 80056ac:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  return HAL_OK;
 80056b0:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80056b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ba:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 80056be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (ep->type == EP_TYPE_BULK)
 80056c2:	78e2      	ldrb	r2, [r4, #3]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80056c4:	7827      	ldrb	r7, [r4, #0]
      if (ep->type == EP_TYPE_BULK)
 80056c6:	2a02      	cmp	r2, #2
        if (ep->xfer_len_db > ep->maxpacket)
 80056c8:	6a23      	ldr	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80056ca:	ea4f 1c07 	mov.w	ip, r7, lsl #4
      if (ep->type == EP_TYPE_BULK)
 80056ce:	f040 80d6 	bne.w	800587e <USB_EPStartXfer+0x222>
        if (ep->xfer_len_db > ep->maxpacket)
 80056d2:	459e      	cmp	lr, r3
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80056d4:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 80056d8:	f080 80ba 	bcs.w	8005850 <USB_EPStartXfer+0x1f4>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80056dc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80056e0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80056e4:	0412      	lsls	r2, r2, #16
 80056e6:	0c12      	lsrs	r2, r2, #16
 80056e8:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 80056ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80056f0:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80056f4:	f830 8027 	ldrh.w	r8, [r0, r7, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80056f8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
          ep->xfer_len_db -= len;
 80056fc:	1b9b      	subs	r3, r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80056fe:	f018 0840 	ands.w	r8, r8, #64	; 0x40
          ep->xfer_len_db -= len;
 8005702:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005704:	b297      	uxth	r7, r2
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005706:	b2b3      	uxth	r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005708:	d052      	beq.n	80057b0 <USB_EPStartXfer+0x154>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800570a:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 800570e:	443a      	add	r2, r7
 8005710:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005714:	8962      	ldrh	r2, [r4, #10]
 8005716:	f7ff ff91 	bl	800563c <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 800571a:	6a27      	ldr	r7, [r4, #32]
 800571c:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 800571e:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8005720:	429f      	cmp	r7, r3
              ep->xfer_len_db -= len;
 8005722:	bf8a      	itet	hi
 8005724:	1bbb      	subhi	r3, r7, r6
              ep->xfer_len_db = 0U;
 8005726:	2300      	movls	r3, #0
 8005728:	4637      	movhi	r7, r6
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800572a:	7862      	ldrb	r2, [r4, #1]
            ep->xfer_buff += len;
 800572c:	4431      	add	r1, r6
 800572e:	6223      	str	r3, [r4, #32]
 8005730:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005732:	b2bb      	uxth	r3, r7
 8005734:	bb82      	cbnz	r2, 8005798 <USB_EPStartXfer+0x13c>
 8005736:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 800573a:	7826      	ldrb	r6, [r4, #0]
 800573c:	b282      	uxth	r2, r0
 800573e:	f205 4004 	addw	r0, r5, #1028	; 0x404
 8005742:	0136      	lsls	r6, r6, #4
 8005744:	4410      	add	r0, r2
 8005746:	5a32      	ldrh	r2, [r6, r0]
 8005748:	2f3e      	cmp	r7, #62	; 0x3e
 800574a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800574e:	5232      	strh	r2, [r6, r0]
 8005750:	d914      	bls.n	800577c <USB_EPStartXfer+0x120>
 8005752:	06fa      	lsls	r2, r7, #27
 8005754:	5a32      	ldrh	r2, [r6, r0]
 8005756:	ea4f 1c57 	mov.w	ip, r7, lsr #5
 800575a:	bf08      	it	eq
 800575c:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8005760:	b292      	uxth	r2, r2
 8005762:	ea42 228c 	orr.w	r2, r2, ip, lsl #10
 8005766:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800576a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800576e:	b292      	uxth	r2, r2
 8005770:	5232      	strh	r2, [r6, r0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005772:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005774:	4628      	mov	r0, r5
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005776:	f7ff ff61 	bl	800563c <USB_WritePMA>
 800577a:	e78e      	b.n	800569a <USB_EPStartXfer+0x3e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800577c:	b90f      	cbnz	r7, 8005782 <USB_EPStartXfer+0x126>
 800577e:	5a32      	ldrh	r2, [r6, r0]
 8005780:	e7f1      	b.n	8005766 <USB_EPStartXfer+0x10a>
 8005782:	5a32      	ldrh	r2, [r6, r0]
 8005784:	ea4f 0c57 	mov.w	ip, r7, lsr #1
 8005788:	07ff      	lsls	r7, r7, #31
 800578a:	bf48      	it	mi
 800578c:	f10c 0c01 	addmi.w	ip, ip, #1
 8005790:	b292      	uxth	r2, r2
 8005792:	ea42 228c 	orr.w	r2, r2, ip, lsl #10
 8005796:	e7ea      	b.n	800576e <USB_EPStartXfer+0x112>
 8005798:	2a01      	cmp	r2, #1
 800579a:	d1ea      	bne.n	8005772 <USB_EPStartXfer+0x116>
 800579c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80057a0:	7820      	ldrb	r0, [r4, #0]
 80057a2:	b296      	uxth	r6, r2
 80057a4:	f205 4204 	addw	r2, r5, #1028	; 0x404
 80057a8:	0100      	lsls	r0, r0, #4
 80057aa:	4432      	add	r2, r6
 80057ac:	5283      	strh	r3, [r0, r2]
 80057ae:	e7e0      	b.n	8005772 <USB_EPStartXfer+0x116>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80057b0:	f200 4204 	addw	r2, r0, #1028	; 0x404
 80057b4:	443a      	add	r2, r7
 80057b6:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057ba:	8922      	ldrh	r2, [r4, #8]
 80057bc:	f7ff ff3e 	bl	800563c <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 80057c0:	6a27      	ldr	r7, [r4, #32]
 80057c2:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 80057c4:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80057c6:	429f      	cmp	r7, r3
              ep->xfer_len_db -= len;
 80057c8:	bf8a      	itet	hi
 80057ca:	1bbb      	subhi	r3, r7, r6
              ep->xfer_len_db = 0U;
 80057cc:	4643      	movls	r3, r8
 80057ce:	4637      	movhi	r7, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80057d0:	7862      	ldrb	r2, [r4, #1]
            ep->xfer_buff += len;
 80057d2:	4431      	add	r1, r6
 80057d4:	6223      	str	r3, [r4, #32]
 80057d6:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80057d8:	b2bb      	uxth	r3, r7
 80057da:	bb6a      	cbnz	r2, 8005838 <USB_EPStartXfer+0x1dc>
 80057dc:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 80057e0:	7826      	ldrb	r6, [r4, #0]
 80057e2:	b282      	uxth	r2, r0
 80057e4:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 80057e8:	0136      	lsls	r6, r6, #4
 80057ea:	4410      	add	r0, r2
 80057ec:	5a32      	ldrh	r2, [r6, r0]
 80057ee:	2f3e      	cmp	r7, #62	; 0x3e
 80057f0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80057f4:	5232      	strh	r2, [r6, r0]
 80057f6:	d911      	bls.n	800581c <USB_EPStartXfer+0x1c0>
 80057f8:	06fa      	lsls	r2, r7, #27
 80057fa:	5a32      	ldrh	r2, [r6, r0]
 80057fc:	ea4f 1c57 	mov.w	ip, r7, lsr #5
 8005800:	bf08      	it	eq
 8005802:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8005806:	b292      	uxth	r2, r2
 8005808:	ea42 228c 	orr.w	r2, r2, ip, lsl #10
 800580c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005810:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005814:	b292      	uxth	r2, r2
 8005816:	5232      	strh	r2, [r6, r0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005818:	8962      	ldrh	r2, [r4, #10]
 800581a:	e7ab      	b.n	8005774 <USB_EPStartXfer+0x118>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800581c:	b90f      	cbnz	r7, 8005822 <USB_EPStartXfer+0x1c6>
 800581e:	5a32      	ldrh	r2, [r6, r0]
 8005820:	e7f4      	b.n	800580c <USB_EPStartXfer+0x1b0>
 8005822:	5a32      	ldrh	r2, [r6, r0]
 8005824:	ea4f 0c57 	mov.w	ip, r7, lsr #1
 8005828:	07ff      	lsls	r7, r7, #31
 800582a:	bf48      	it	mi
 800582c:	f10c 0c01 	addmi.w	ip, ip, #1
 8005830:	b292      	uxth	r2, r2
 8005832:	ea42 228c 	orr.w	r2, r2, ip, lsl #10
 8005836:	e7ed      	b.n	8005814 <USB_EPStartXfer+0x1b8>
 8005838:	2a01      	cmp	r2, #1
 800583a:	d1ed      	bne.n	8005818 <USB_EPStartXfer+0x1bc>
 800583c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8005840:	7820      	ldrb	r0, [r4, #0]
 8005842:	b296      	uxth	r6, r2
 8005844:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8005848:	0100      	lsls	r0, r0, #4
 800584a:	4432      	add	r2, r6
 800584c:	5283      	strh	r3, [r0, r2]
 800584e:	e7e3      	b.n	8005818 <USB_EPStartXfer+0x1bc>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005850:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8005854:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005858:	0412      	lsls	r2, r2, #16
 800585a:	0c12      	lsrs	r2, r2, #16
 800585c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005860:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005864:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005868:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800586c:	b29b      	uxth	r3, r3
 800586e:	b296      	uxth	r6, r2
 8005870:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8005874:	4432      	add	r2, r6
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005876:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800587a:	8922      	ldrh	r2, [r4, #8]
 800587c:	e77b      	b.n	8005776 <USB_EPStartXfer+0x11a>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800587e:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
        ep->xfer_len_db -= len;
 8005882:	1b9b      	subs	r3, r3, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005884:	f012 0f40 	tst.w	r2, #64	; 0x40
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005888:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
        ep->xfer_len_db -= len;
 800588c:	6223      	str	r3, [r4, #32]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800588e:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005890:	b296      	uxth	r6, r2
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005892:	d006      	beq.n	80058a2 <USB_EPStartXfer+0x246>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005894:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8005898:	4432      	add	r2, r6
 800589a:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800589e:	8962      	ldrh	r2, [r4, #10]
 80058a0:	e769      	b.n	8005776 <USB_EPStartXfer+0x11a>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80058a2:	f200 4204 	addw	r2, r0, #1028	; 0x404
 80058a6:	4432      	add	r2, r6
 80058a8:	e7e5      	b.n	8005876 <USB_EPStartXfer+0x21a>
    if (ep->doublebuffer == 0U)
 80058aa:	2a00      	cmp	r2, #0
 80058ac:	d131      	bne.n	8005912 <USB_EPStartXfer+0x2b6>
      if (ep->xfer_len > ep->maxpacket)
 80058ae:	69a0      	ldr	r0, [r4, #24]
 80058b0:	6923      	ldr	r3, [r4, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80058b2:	7821      	ldrb	r1, [r4, #0]
      if (ep->xfer_len > ep->maxpacket)
 80058b4:	4298      	cmp	r0, r3
        ep->xfer_len -= len;
 80058b6:	bf84      	itt	hi
 80058b8:	1ac2      	subhi	r2, r0, r3
 80058ba:	4618      	movhi	r0, r3
 80058bc:	61a2      	str	r2, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80058be:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80058c2:	0109      	lsls	r1, r1, #4
 80058c4:	b293      	uxth	r3, r2
 80058c6:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 80058ca:	441a      	add	r2, r3
 80058cc:	5a8b      	ldrh	r3, [r1, r2]
 80058ce:	283e      	cmp	r0, #62	; 0x3e
 80058d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058d4:	528b      	strh	r3, [r1, r2]
 80058d6:	d90d      	bls.n	80058f4 <USB_EPStartXfer+0x298>
 80058d8:	5a8b      	ldrh	r3, [r1, r2]
 80058da:	0946      	lsrs	r6, r0, #5
 80058dc:	06c0      	lsls	r0, r0, #27
 80058de:	bf08      	it	eq
 80058e0:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80058ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058f2:	e00b      	b.n	800590c <USB_EPStartXfer+0x2b0>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80058f4:	b908      	cbnz	r0, 80058fa <USB_EPStartXfer+0x29e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80058f6:	5a53      	ldrh	r3, [r2, r1]
 80058f8:	e7f7      	b.n	80058ea <USB_EPStartXfer+0x28e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80058fa:	07c3      	lsls	r3, r0, #31
 80058fc:	5a8b      	ldrh	r3, [r1, r2]
 80058fe:	ea4f 0650 	mov.w	r6, r0, lsr #1
 8005902:	bf48      	it	mi
 8005904:	3601      	addmi	r6, #1
 8005906:	b29b      	uxth	r3, r3
 8005908:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800590c:	b29b      	uxth	r3, r3
 800590e:	5253      	strh	r3, [r2, r1]
 8005910:	e06a      	b.n	80059e8 <USB_EPStartXfer+0x38c>
      if (ep->type == EP_TYPE_BULK)
 8005912:	78e3      	ldrb	r3, [r4, #3]
 8005914:	2b02      	cmp	r3, #2
 8005916:	d17c      	bne.n	8005a12 <USB_EPStartXfer+0x3b6>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005918:	2900      	cmp	r1, #0
 800591a:	d14b      	bne.n	80059b4 <USB_EPStartXfer+0x358>
 800591c:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8005920:	7820      	ldrb	r0, [r4, #0]
 8005922:	b28b      	uxth	r3, r1
 8005924:	f205 4104 	addw	r1, r5, #1028	; 0x404
 8005928:	0100      	lsls	r0, r0, #4
 800592a:	4419      	add	r1, r3
 800592c:	5a43      	ldrh	r3, [r0, r1]
 800592e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005932:	5243      	strh	r3, [r0, r1]
 8005934:	6923      	ldr	r3, [r4, #16]
 8005936:	2b3e      	cmp	r3, #62	; 0x3e
 8005938:	d920      	bls.n	800597c <USB_EPStartXfer+0x320>
 800593a:	5a42      	ldrh	r2, [r0, r1]
 800593c:	095e      	lsrs	r6, r3, #5
 800593e:	06df      	lsls	r7, r3, #27
 8005940:	bf08      	it	eq
 8005942:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8005946:	b292      	uxth	r2, r2
 8005948:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 800594c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005950:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005954:	b292      	uxth	r2, r2
 8005956:	5242      	strh	r2, [r0, r1]
 8005958:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800595c:	7822      	ldrb	r2, [r4, #0]
 800595e:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 8005962:	b289      	uxth	r1, r1
 8005964:	0112      	lsls	r2, r2, #4
 8005966:	4401      	add	r1, r0
 8005968:	5a50      	ldrh	r0, [r2, r1]
 800596a:	2b3e      	cmp	r3, #62	; 0x3e
 800596c:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8005970:	5250      	strh	r0, [r2, r1]
 8005972:	d810      	bhi.n	8005996 <USB_EPStartXfer+0x33a>
 8005974:	2b00      	cmp	r3, #0
 8005976:	d143      	bne.n	8005a00 <USB_EPStartXfer+0x3a4>
 8005978:	5a53      	ldrh	r3, [r2, r1]
 800597a:	e015      	b.n	80059a8 <USB_EPStartXfer+0x34c>
 800597c:	b90b      	cbnz	r3, 8005982 <USB_EPStartXfer+0x326>
 800597e:	5a42      	ldrh	r2, [r0, r1]
 8005980:	e7e4      	b.n	800594c <USB_EPStartXfer+0x2f0>
 8005982:	07da      	lsls	r2, r3, #31
 8005984:	5a42      	ldrh	r2, [r0, r1]
 8005986:	ea4f 0653 	mov.w	r6, r3, lsr #1
 800598a:	bf48      	it	mi
 800598c:	3601      	addmi	r6, #1
 800598e:	b292      	uxth	r2, r2
 8005990:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8005994:	e7de      	b.n	8005954 <USB_EPStartXfer+0x2f8>
 8005996:	0958      	lsrs	r0, r3, #5
 8005998:	06df      	lsls	r7, r3, #27
 800599a:	5a53      	ldrh	r3, [r2, r1]
 800599c:	bf08      	it	eq
 800599e:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 80059a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	5253      	strh	r3, [r2, r1]
        if (ep->xfer_count != 0U)
 80059b4:	69e3      	ldr	r3, [r4, #28]
 80059b6:	b1bb      	cbz	r3, 80059e8 <USB_EPStartXfer+0x38c>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80059b8:	f244 0340 	movw	r3, #16448	; 0x4040
 80059bc:	7822      	ldrb	r2, [r4, #0]
 80059be:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80059c2:	ea03 0001 	and.w	r0, r3, r1
 80059c6:	438b      	bics	r3, r1
 80059c8:	d000      	beq.n	80059cc <USB_EPStartXfer+0x370>
 80059ca:	b968      	cbnz	r0, 80059e8 <USB_EPStartXfer+0x38c>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80059cc:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80059d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d8:	041b      	lsls	r3, r3, #16
 80059da:	0c1b      	lsrs	r3, r3, #16
 80059dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059e4:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80059e8:	7822      	ldrb	r2, [r4, #0]
 80059ea:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80059ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f6:	041b      	lsls	r3, r3, #16
 80059f8:	0c1b      	lsrs	r3, r3, #16
 80059fa:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80059fe:	e657      	b.n	80056b0 <USB_EPStartXfer+0x54>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005a00:	0858      	lsrs	r0, r3, #1
 8005a02:	07de      	lsls	r6, r3, #31
 8005a04:	5a53      	ldrh	r3, [r2, r1]
 8005a06:	bf48      	it	mi
 8005a08:	3001      	addmi	r0, #1
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8005a10:	e7ce      	b.n	80059b0 <USB_EPStartXfer+0x354>
      else if (ep->type == EP_TYPE_ISOC)
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d158      	bne.n	8005ac8 <USB_EPStartXfer+0x46c>
        if (ep->xfer_len > ep->maxpacket)
 8005a16:	69a3      	ldr	r3, [r4, #24]
 8005a18:	6922      	ldr	r2, [r4, #16]
 8005a1a:	4293      	cmp	r3, r2
          ep->xfer_len = 0U;
 8005a1c:	bf94      	ite	ls
 8005a1e:	2000      	movls	r0, #0
          ep->xfer_len -= len;
 8005a20:	1a98      	subhi	r0, r3, r2
 8005a22:	61a0      	str	r0, [r4, #24]
 8005a24:	bf88      	it	hi
 8005a26:	4613      	movhi	r3, r2
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005a28:	2900      	cmp	r1, #0
 8005a2a:	d1dd      	bne.n	80059e8 <USB_EPStartXfer+0x38c>
 8005a2c:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8005a30:	7820      	ldrb	r0, [r4, #0]
 8005a32:	b28a      	uxth	r2, r1
 8005a34:	f205 4104 	addw	r1, r5, #1028	; 0x404
 8005a38:	0100      	lsls	r0, r0, #4
 8005a3a:	4411      	add	r1, r2
 8005a3c:	5a42      	ldrh	r2, [r0, r1]
 8005a3e:	2b3e      	cmp	r3, #62	; 0x3e
 8005a40:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005a44:	5242      	strh	r2, [r0, r1]
 8005a46:	d929      	bls.n	8005a9c <USB_EPStartXfer+0x440>
 8005a48:	06da      	lsls	r2, r3, #27
 8005a4a:	5a42      	ldrh	r2, [r0, r1]
 8005a4c:	ea4f 1653 	mov.w	r6, r3, lsr #5
 8005a50:	bf08      	it	eq
 8005a52:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8005a56:	b292      	uxth	r2, r2
 8005a58:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8005a5c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005a60:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005a64:	b292      	uxth	r2, r2
 8005a66:	5242      	strh	r2, [r0, r1]
 8005a68:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8005a6c:	7822      	ldrb	r2, [r4, #0]
 8005a6e:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 8005a72:	b289      	uxth	r1, r1
 8005a74:	0112      	lsls	r2, r2, #4
 8005a76:	4401      	add	r1, r0
 8005a78:	5a50      	ldrh	r0, [r2, r1]
 8005a7a:	2b3e      	cmp	r3, #62	; 0x3e
 8005a7c:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8005a80:	5250      	strh	r0, [r2, r1]
 8005a82:	d817      	bhi.n	8005ab4 <USB_EPStartXfer+0x458>
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f43f af36 	beq.w	80058f6 <USB_EPStartXfer+0x29a>
 8005a8a:	0858      	lsrs	r0, r3, #1
 8005a8c:	07db      	lsls	r3, r3, #31
 8005a8e:	5a53      	ldrh	r3, [r2, r1]
 8005a90:	bf48      	it	mi
 8005a92:	3001      	addmi	r0, #1
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8005a9a:	e737      	b.n	800590c <USB_EPStartXfer+0x2b0>
 8005a9c:	b90b      	cbnz	r3, 8005aa2 <USB_EPStartXfer+0x446>
 8005a9e:	5a42      	ldrh	r2, [r0, r1]
 8005aa0:	e7dc      	b.n	8005a5c <USB_EPStartXfer+0x400>
 8005aa2:	5a42      	ldrh	r2, [r0, r1]
 8005aa4:	085e      	lsrs	r6, r3, #1
 8005aa6:	07df      	lsls	r7, r3, #31
 8005aa8:	bf48      	it	mi
 8005aaa:	3601      	addmi	r6, #1
 8005aac:	b292      	uxth	r2, r2
 8005aae:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8005ab2:	e7d7      	b.n	8005a64 <USB_EPStartXfer+0x408>
 8005ab4:	0958      	lsrs	r0, r3, #5
 8005ab6:	06de      	lsls	r6, r3, #27
 8005ab8:	5a53      	ldrh	r3, [r2, r1]
 8005aba:	bf08      	it	eq
 8005abc:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8005ac6:	e710      	b.n	80058ea <USB_EPStartXfer+0x28e>
        return HAL_ERROR;
 8005ac8:	2001      	movs	r0, #1
 8005aca:	e5f8      	b.n	80056be <USB_EPStartXfer+0x62>

08005acc <USB_ReadPMA>:
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005acc:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 8005ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005ad2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005ad6:	085d      	lsrs	r5, r3, #1

  for (count = n; count != 0U; count--)
 8005ad8:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005ada:	4617      	mov	r7, r2
  for (count = n; count != 0U; count--)
 8005adc:	462e      	mov	r6, r5
 8005ade:	3402      	adds	r4, #2
 8005ae0:	b936      	cbnz	r6, 8005af0 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005ae2:	07db      	lsls	r3, r3, #31
  {
    RdVal = *pdwVal;
 8005ae4:	bf44      	itt	mi
 8005ae6:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005aea:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 8005aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 8005af0:	f837 0b04 	ldrh.w	r0, [r7], #4
  for (count = n; count != 0U; count--)
 8005af4:	3e01      	subs	r6, #1
    RdVal = *(__IO uint16_t *)pdwVal;
 8005af6:	b280      	uxth	r0, r0
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005af8:	f804 0c02 	strb.w	r0, [r4, #-2]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005afc:	0a00      	lsrs	r0, r0, #8
 8005afe:	f804 0c01 	strb.w	r0, [r4, #-1]
  for (count = n; count != 0U; count--)
 8005b02:	e7ec      	b.n	8005ade <USB_ReadPMA+0x12>

08005b04 <__errno>:
 8005b04:	4b01      	ldr	r3, [pc, #4]	; (8005b0c <__errno+0x8>)
 8005b06:	6818      	ldr	r0, [r3, #0]
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	20000188 	.word	0x20000188

08005b10 <__libc_init_array>:
 8005b10:	b570      	push	{r4, r5, r6, lr}
 8005b12:	2600      	movs	r6, #0
 8005b14:	4d0c      	ldr	r5, [pc, #48]	; (8005b48 <__libc_init_array+0x38>)
 8005b16:	4c0d      	ldr	r4, [pc, #52]	; (8005b4c <__libc_init_array+0x3c>)
 8005b18:	1b64      	subs	r4, r4, r5
 8005b1a:	10a4      	asrs	r4, r4, #2
 8005b1c:	42a6      	cmp	r6, r4
 8005b1e:	d109      	bne.n	8005b34 <__libc_init_array+0x24>
 8005b20:	f002 fefc 	bl	800891c <_init>
 8005b24:	2600      	movs	r6, #0
 8005b26:	4d0a      	ldr	r5, [pc, #40]	; (8005b50 <__libc_init_array+0x40>)
 8005b28:	4c0a      	ldr	r4, [pc, #40]	; (8005b54 <__libc_init_array+0x44>)
 8005b2a:	1b64      	subs	r4, r4, r5
 8005b2c:	10a4      	asrs	r4, r4, #2
 8005b2e:	42a6      	cmp	r6, r4
 8005b30:	d105      	bne.n	8005b3e <__libc_init_array+0x2e>
 8005b32:	bd70      	pop	{r4, r5, r6, pc}
 8005b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b38:	4798      	blx	r3
 8005b3a:	3601      	adds	r6, #1
 8005b3c:	e7ee      	b.n	8005b1c <__libc_init_array+0xc>
 8005b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b42:	4798      	blx	r3
 8005b44:	3601      	adds	r6, #1
 8005b46:	e7f2      	b.n	8005b2e <__libc_init_array+0x1e>
 8005b48:	08009b6c 	.word	0x08009b6c
 8005b4c:	08009b6c 	.word	0x08009b6c
 8005b50:	08009b6c 	.word	0x08009b6c
 8005b54:	08009b70 	.word	0x08009b70

08005b58 <memcpy>:
 8005b58:	440a      	add	r2, r1
 8005b5a:	4291      	cmp	r1, r2
 8005b5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b60:	d100      	bne.n	8005b64 <memcpy+0xc>
 8005b62:	4770      	bx	lr
 8005b64:	b510      	push	{r4, lr}
 8005b66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b6a:	4291      	cmp	r1, r2
 8005b6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b70:	d1f9      	bne.n	8005b66 <memcpy+0xe>
 8005b72:	bd10      	pop	{r4, pc}

08005b74 <memset>:
 8005b74:	4603      	mov	r3, r0
 8005b76:	4402      	add	r2, r0
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d100      	bne.n	8005b7e <memset+0xa>
 8005b7c:	4770      	bx	lr
 8005b7e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b82:	e7f9      	b.n	8005b78 <memset+0x4>

08005b84 <__cvt>:
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b8a:	461f      	mov	r7, r3
 8005b8c:	bfbb      	ittet	lt
 8005b8e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005b92:	461f      	movlt	r7, r3
 8005b94:	2300      	movge	r3, #0
 8005b96:	232d      	movlt	r3, #45	; 0x2d
 8005b98:	b088      	sub	sp, #32
 8005b9a:	4614      	mov	r4, r2
 8005b9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005b9e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005ba0:	7013      	strb	r3, [r2, #0]
 8005ba2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005ba4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005ba8:	f023 0820 	bic.w	r8, r3, #32
 8005bac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005bb0:	d005      	beq.n	8005bbe <__cvt+0x3a>
 8005bb2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005bb6:	d100      	bne.n	8005bba <__cvt+0x36>
 8005bb8:	3501      	adds	r5, #1
 8005bba:	2302      	movs	r3, #2
 8005bbc:	e000      	b.n	8005bc0 <__cvt+0x3c>
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	aa07      	add	r2, sp, #28
 8005bc2:	9204      	str	r2, [sp, #16]
 8005bc4:	aa06      	add	r2, sp, #24
 8005bc6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005bca:	e9cd 3500 	strd	r3, r5, [sp]
 8005bce:	4622      	mov	r2, r4
 8005bd0:	463b      	mov	r3, r7
 8005bd2:	f000 fce5 	bl	80065a0 <_dtoa_r>
 8005bd6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005bda:	4606      	mov	r6, r0
 8005bdc:	d102      	bne.n	8005be4 <__cvt+0x60>
 8005bde:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005be0:	07db      	lsls	r3, r3, #31
 8005be2:	d522      	bpl.n	8005c2a <__cvt+0xa6>
 8005be4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005be8:	eb06 0905 	add.w	r9, r6, r5
 8005bec:	d110      	bne.n	8005c10 <__cvt+0x8c>
 8005bee:	7833      	ldrb	r3, [r6, #0]
 8005bf0:	2b30      	cmp	r3, #48	; 0x30
 8005bf2:	d10a      	bne.n	8005c0a <__cvt+0x86>
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	4639      	mov	r1, r7
 8005bfc:	f7fa fed4 	bl	80009a8 <__aeabi_dcmpeq>
 8005c00:	b918      	cbnz	r0, 8005c0a <__cvt+0x86>
 8005c02:	f1c5 0501 	rsb	r5, r5, #1
 8005c06:	f8ca 5000 	str.w	r5, [sl]
 8005c0a:	f8da 3000 	ldr.w	r3, [sl]
 8005c0e:	4499      	add	r9, r3
 8005c10:	2200      	movs	r2, #0
 8005c12:	2300      	movs	r3, #0
 8005c14:	4620      	mov	r0, r4
 8005c16:	4639      	mov	r1, r7
 8005c18:	f7fa fec6 	bl	80009a8 <__aeabi_dcmpeq>
 8005c1c:	b108      	cbz	r0, 8005c22 <__cvt+0x9e>
 8005c1e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005c22:	2230      	movs	r2, #48	; 0x30
 8005c24:	9b07      	ldr	r3, [sp, #28]
 8005c26:	454b      	cmp	r3, r9
 8005c28:	d307      	bcc.n	8005c3a <__cvt+0xb6>
 8005c2a:	4630      	mov	r0, r6
 8005c2c:	9b07      	ldr	r3, [sp, #28]
 8005c2e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005c30:	1b9b      	subs	r3, r3, r6
 8005c32:	6013      	str	r3, [r2, #0]
 8005c34:	b008      	add	sp, #32
 8005c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c3a:	1c59      	adds	r1, r3, #1
 8005c3c:	9107      	str	r1, [sp, #28]
 8005c3e:	701a      	strb	r2, [r3, #0]
 8005c40:	e7f0      	b.n	8005c24 <__cvt+0xa0>

08005c42 <__exponent>:
 8005c42:	4603      	mov	r3, r0
 8005c44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c46:	2900      	cmp	r1, #0
 8005c48:	f803 2b02 	strb.w	r2, [r3], #2
 8005c4c:	bfb6      	itet	lt
 8005c4e:	222d      	movlt	r2, #45	; 0x2d
 8005c50:	222b      	movge	r2, #43	; 0x2b
 8005c52:	4249      	neglt	r1, r1
 8005c54:	2909      	cmp	r1, #9
 8005c56:	7042      	strb	r2, [r0, #1]
 8005c58:	dd2b      	ble.n	8005cb2 <__exponent+0x70>
 8005c5a:	f10d 0407 	add.w	r4, sp, #7
 8005c5e:	46a4      	mov	ip, r4
 8005c60:	270a      	movs	r7, #10
 8005c62:	fb91 f6f7 	sdiv	r6, r1, r7
 8005c66:	460a      	mov	r2, r1
 8005c68:	46a6      	mov	lr, r4
 8005c6a:	fb07 1516 	mls	r5, r7, r6, r1
 8005c6e:	2a63      	cmp	r2, #99	; 0x63
 8005c70:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005c74:	4631      	mov	r1, r6
 8005c76:	f104 34ff 	add.w	r4, r4, #4294967295
 8005c7a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005c7e:	dcf0      	bgt.n	8005c62 <__exponent+0x20>
 8005c80:	3130      	adds	r1, #48	; 0x30
 8005c82:	f1ae 0502 	sub.w	r5, lr, #2
 8005c86:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005c8a:	4629      	mov	r1, r5
 8005c8c:	1c44      	adds	r4, r0, #1
 8005c8e:	4561      	cmp	r1, ip
 8005c90:	d30a      	bcc.n	8005ca8 <__exponent+0x66>
 8005c92:	f10d 0209 	add.w	r2, sp, #9
 8005c96:	eba2 020e 	sub.w	r2, r2, lr
 8005c9a:	4565      	cmp	r5, ip
 8005c9c:	bf88      	it	hi
 8005c9e:	2200      	movhi	r2, #0
 8005ca0:	4413      	add	r3, r2
 8005ca2:	1a18      	subs	r0, r3, r0
 8005ca4:	b003      	add	sp, #12
 8005ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ca8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005cac:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005cb0:	e7ed      	b.n	8005c8e <__exponent+0x4c>
 8005cb2:	2330      	movs	r3, #48	; 0x30
 8005cb4:	3130      	adds	r1, #48	; 0x30
 8005cb6:	7083      	strb	r3, [r0, #2]
 8005cb8:	70c1      	strb	r1, [r0, #3]
 8005cba:	1d03      	adds	r3, r0, #4
 8005cbc:	e7f1      	b.n	8005ca2 <__exponent+0x60>
	...

08005cc0 <_printf_float>:
 8005cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cc4:	b091      	sub	sp, #68	; 0x44
 8005cc6:	460c      	mov	r4, r1
 8005cc8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005ccc:	4616      	mov	r6, r2
 8005cce:	461f      	mov	r7, r3
 8005cd0:	4605      	mov	r5, r0
 8005cd2:	f001 fa53 	bl	800717c <_localeconv_r>
 8005cd6:	6803      	ldr	r3, [r0, #0]
 8005cd8:	4618      	mov	r0, r3
 8005cda:	9309      	str	r3, [sp, #36]	; 0x24
 8005cdc:	f7fa fa38 	bl	8000150 <strlen>
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	930e      	str	r3, [sp, #56]	; 0x38
 8005ce4:	f8d8 3000 	ldr.w	r3, [r8]
 8005ce8:	900a      	str	r0, [sp, #40]	; 0x28
 8005cea:	3307      	adds	r3, #7
 8005cec:	f023 0307 	bic.w	r3, r3, #7
 8005cf0:	f103 0208 	add.w	r2, r3, #8
 8005cf4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005cf8:	f8d4 b000 	ldr.w	fp, [r4]
 8005cfc:	f8c8 2000 	str.w	r2, [r8]
 8005d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d04:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005d08:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005d0c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005d10:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d12:	f04f 32ff 	mov.w	r2, #4294967295
 8005d16:	4640      	mov	r0, r8
 8005d18:	4b9c      	ldr	r3, [pc, #624]	; (8005f8c <_printf_float+0x2cc>)
 8005d1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d1c:	f7fa fe76 	bl	8000a0c <__aeabi_dcmpun>
 8005d20:	bb70      	cbnz	r0, 8005d80 <_printf_float+0xc0>
 8005d22:	f04f 32ff 	mov.w	r2, #4294967295
 8005d26:	4640      	mov	r0, r8
 8005d28:	4b98      	ldr	r3, [pc, #608]	; (8005f8c <_printf_float+0x2cc>)
 8005d2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d2c:	f7fa fe50 	bl	80009d0 <__aeabi_dcmple>
 8005d30:	bb30      	cbnz	r0, 8005d80 <_printf_float+0xc0>
 8005d32:	2200      	movs	r2, #0
 8005d34:	2300      	movs	r3, #0
 8005d36:	4640      	mov	r0, r8
 8005d38:	4651      	mov	r1, sl
 8005d3a:	f7fa fe3f 	bl	80009bc <__aeabi_dcmplt>
 8005d3e:	b110      	cbz	r0, 8005d46 <_printf_float+0x86>
 8005d40:	232d      	movs	r3, #45	; 0x2d
 8005d42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d46:	4b92      	ldr	r3, [pc, #584]	; (8005f90 <_printf_float+0x2d0>)
 8005d48:	4892      	ldr	r0, [pc, #584]	; (8005f94 <_printf_float+0x2d4>)
 8005d4a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005d4e:	bf94      	ite	ls
 8005d50:	4698      	movls	r8, r3
 8005d52:	4680      	movhi	r8, r0
 8005d54:	2303      	movs	r3, #3
 8005d56:	f04f 0a00 	mov.w	sl, #0
 8005d5a:	6123      	str	r3, [r4, #16]
 8005d5c:	f02b 0304 	bic.w	r3, fp, #4
 8005d60:	6023      	str	r3, [r4, #0]
 8005d62:	4633      	mov	r3, r6
 8005d64:	4621      	mov	r1, r4
 8005d66:	4628      	mov	r0, r5
 8005d68:	9700      	str	r7, [sp, #0]
 8005d6a:	aa0f      	add	r2, sp, #60	; 0x3c
 8005d6c:	f000 f9d4 	bl	8006118 <_printf_common>
 8005d70:	3001      	adds	r0, #1
 8005d72:	f040 8090 	bne.w	8005e96 <_printf_float+0x1d6>
 8005d76:	f04f 30ff 	mov.w	r0, #4294967295
 8005d7a:	b011      	add	sp, #68	; 0x44
 8005d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d80:	4642      	mov	r2, r8
 8005d82:	4653      	mov	r3, sl
 8005d84:	4640      	mov	r0, r8
 8005d86:	4651      	mov	r1, sl
 8005d88:	f7fa fe40 	bl	8000a0c <__aeabi_dcmpun>
 8005d8c:	b148      	cbz	r0, 8005da2 <_printf_float+0xe2>
 8005d8e:	f1ba 0f00 	cmp.w	sl, #0
 8005d92:	bfb8      	it	lt
 8005d94:	232d      	movlt	r3, #45	; 0x2d
 8005d96:	4880      	ldr	r0, [pc, #512]	; (8005f98 <_printf_float+0x2d8>)
 8005d98:	bfb8      	it	lt
 8005d9a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005d9e:	4b7f      	ldr	r3, [pc, #508]	; (8005f9c <_printf_float+0x2dc>)
 8005da0:	e7d3      	b.n	8005d4a <_printf_float+0x8a>
 8005da2:	6863      	ldr	r3, [r4, #4]
 8005da4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005da8:	1c5a      	adds	r2, r3, #1
 8005daa:	d142      	bne.n	8005e32 <_printf_float+0x172>
 8005dac:	2306      	movs	r3, #6
 8005dae:	6063      	str	r3, [r4, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	9206      	str	r2, [sp, #24]
 8005db4:	aa0e      	add	r2, sp, #56	; 0x38
 8005db6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005dba:	aa0d      	add	r2, sp, #52	; 0x34
 8005dbc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005dc0:	9203      	str	r2, [sp, #12]
 8005dc2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005dc6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005dca:	6023      	str	r3, [r4, #0]
 8005dcc:	6863      	ldr	r3, [r4, #4]
 8005dce:	4642      	mov	r2, r8
 8005dd0:	9300      	str	r3, [sp, #0]
 8005dd2:	4628      	mov	r0, r5
 8005dd4:	4653      	mov	r3, sl
 8005dd6:	910b      	str	r1, [sp, #44]	; 0x2c
 8005dd8:	f7ff fed4 	bl	8005b84 <__cvt>
 8005ddc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005dde:	4680      	mov	r8, r0
 8005de0:	2947      	cmp	r1, #71	; 0x47
 8005de2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005de4:	d108      	bne.n	8005df8 <_printf_float+0x138>
 8005de6:	1cc8      	adds	r0, r1, #3
 8005de8:	db02      	blt.n	8005df0 <_printf_float+0x130>
 8005dea:	6863      	ldr	r3, [r4, #4]
 8005dec:	4299      	cmp	r1, r3
 8005dee:	dd40      	ble.n	8005e72 <_printf_float+0x1b2>
 8005df0:	f1a9 0902 	sub.w	r9, r9, #2
 8005df4:	fa5f f989 	uxtb.w	r9, r9
 8005df8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005dfc:	d81f      	bhi.n	8005e3e <_printf_float+0x17e>
 8005dfe:	464a      	mov	r2, r9
 8005e00:	3901      	subs	r1, #1
 8005e02:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005e06:	910d      	str	r1, [sp, #52]	; 0x34
 8005e08:	f7ff ff1b 	bl	8005c42 <__exponent>
 8005e0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e0e:	4682      	mov	sl, r0
 8005e10:	1813      	adds	r3, r2, r0
 8005e12:	2a01      	cmp	r2, #1
 8005e14:	6123      	str	r3, [r4, #16]
 8005e16:	dc02      	bgt.n	8005e1e <_printf_float+0x15e>
 8005e18:	6822      	ldr	r2, [r4, #0]
 8005e1a:	07d2      	lsls	r2, r2, #31
 8005e1c:	d501      	bpl.n	8005e22 <_printf_float+0x162>
 8005e1e:	3301      	adds	r3, #1
 8005e20:	6123      	str	r3, [r4, #16]
 8005e22:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d09b      	beq.n	8005d62 <_printf_float+0xa2>
 8005e2a:	232d      	movs	r3, #45	; 0x2d
 8005e2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e30:	e797      	b.n	8005d62 <_printf_float+0xa2>
 8005e32:	2947      	cmp	r1, #71	; 0x47
 8005e34:	d1bc      	bne.n	8005db0 <_printf_float+0xf0>
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1ba      	bne.n	8005db0 <_printf_float+0xf0>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e7b7      	b.n	8005dae <_printf_float+0xee>
 8005e3e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005e42:	d118      	bne.n	8005e76 <_printf_float+0x1b6>
 8005e44:	2900      	cmp	r1, #0
 8005e46:	6863      	ldr	r3, [r4, #4]
 8005e48:	dd0b      	ble.n	8005e62 <_printf_float+0x1a2>
 8005e4a:	6121      	str	r1, [r4, #16]
 8005e4c:	b913      	cbnz	r3, 8005e54 <_printf_float+0x194>
 8005e4e:	6822      	ldr	r2, [r4, #0]
 8005e50:	07d0      	lsls	r0, r2, #31
 8005e52:	d502      	bpl.n	8005e5a <_printf_float+0x19a>
 8005e54:	3301      	adds	r3, #1
 8005e56:	440b      	add	r3, r1
 8005e58:	6123      	str	r3, [r4, #16]
 8005e5a:	f04f 0a00 	mov.w	sl, #0
 8005e5e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005e60:	e7df      	b.n	8005e22 <_printf_float+0x162>
 8005e62:	b913      	cbnz	r3, 8005e6a <_printf_float+0x1aa>
 8005e64:	6822      	ldr	r2, [r4, #0]
 8005e66:	07d2      	lsls	r2, r2, #31
 8005e68:	d501      	bpl.n	8005e6e <_printf_float+0x1ae>
 8005e6a:	3302      	adds	r3, #2
 8005e6c:	e7f4      	b.n	8005e58 <_printf_float+0x198>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e7f2      	b.n	8005e58 <_printf_float+0x198>
 8005e72:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005e76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e78:	4299      	cmp	r1, r3
 8005e7a:	db05      	blt.n	8005e88 <_printf_float+0x1c8>
 8005e7c:	6823      	ldr	r3, [r4, #0]
 8005e7e:	6121      	str	r1, [r4, #16]
 8005e80:	07d8      	lsls	r0, r3, #31
 8005e82:	d5ea      	bpl.n	8005e5a <_printf_float+0x19a>
 8005e84:	1c4b      	adds	r3, r1, #1
 8005e86:	e7e7      	b.n	8005e58 <_printf_float+0x198>
 8005e88:	2900      	cmp	r1, #0
 8005e8a:	bfcc      	ite	gt
 8005e8c:	2201      	movgt	r2, #1
 8005e8e:	f1c1 0202 	rsble	r2, r1, #2
 8005e92:	4413      	add	r3, r2
 8005e94:	e7e0      	b.n	8005e58 <_printf_float+0x198>
 8005e96:	6823      	ldr	r3, [r4, #0]
 8005e98:	055a      	lsls	r2, r3, #21
 8005e9a:	d407      	bmi.n	8005eac <_printf_float+0x1ec>
 8005e9c:	6923      	ldr	r3, [r4, #16]
 8005e9e:	4642      	mov	r2, r8
 8005ea0:	4631      	mov	r1, r6
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	47b8      	blx	r7
 8005ea6:	3001      	adds	r0, #1
 8005ea8:	d12b      	bne.n	8005f02 <_printf_float+0x242>
 8005eaa:	e764      	b.n	8005d76 <_printf_float+0xb6>
 8005eac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005eb0:	f240 80dd 	bls.w	800606e <_printf_float+0x3ae>
 8005eb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005eb8:	2200      	movs	r2, #0
 8005eba:	2300      	movs	r3, #0
 8005ebc:	f7fa fd74 	bl	80009a8 <__aeabi_dcmpeq>
 8005ec0:	2800      	cmp	r0, #0
 8005ec2:	d033      	beq.n	8005f2c <_printf_float+0x26c>
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	4631      	mov	r1, r6
 8005ec8:	4628      	mov	r0, r5
 8005eca:	4a35      	ldr	r2, [pc, #212]	; (8005fa0 <_printf_float+0x2e0>)
 8005ecc:	47b8      	blx	r7
 8005ece:	3001      	adds	r0, #1
 8005ed0:	f43f af51 	beq.w	8005d76 <_printf_float+0xb6>
 8005ed4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	db02      	blt.n	8005ee2 <_printf_float+0x222>
 8005edc:	6823      	ldr	r3, [r4, #0]
 8005ede:	07d8      	lsls	r0, r3, #31
 8005ee0:	d50f      	bpl.n	8005f02 <_printf_float+0x242>
 8005ee2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ee6:	4631      	mov	r1, r6
 8005ee8:	4628      	mov	r0, r5
 8005eea:	47b8      	blx	r7
 8005eec:	3001      	adds	r0, #1
 8005eee:	f43f af42 	beq.w	8005d76 <_printf_float+0xb6>
 8005ef2:	f04f 0800 	mov.w	r8, #0
 8005ef6:	f104 091a 	add.w	r9, r4, #26
 8005efa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005efc:	3b01      	subs	r3, #1
 8005efe:	4543      	cmp	r3, r8
 8005f00:	dc09      	bgt.n	8005f16 <_printf_float+0x256>
 8005f02:	6823      	ldr	r3, [r4, #0]
 8005f04:	079b      	lsls	r3, r3, #30
 8005f06:	f100 8102 	bmi.w	800610e <_printf_float+0x44e>
 8005f0a:	68e0      	ldr	r0, [r4, #12]
 8005f0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f0e:	4298      	cmp	r0, r3
 8005f10:	bfb8      	it	lt
 8005f12:	4618      	movlt	r0, r3
 8005f14:	e731      	b.n	8005d7a <_printf_float+0xba>
 8005f16:	2301      	movs	r3, #1
 8005f18:	464a      	mov	r2, r9
 8005f1a:	4631      	mov	r1, r6
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	47b8      	blx	r7
 8005f20:	3001      	adds	r0, #1
 8005f22:	f43f af28 	beq.w	8005d76 <_printf_float+0xb6>
 8005f26:	f108 0801 	add.w	r8, r8, #1
 8005f2a:	e7e6      	b.n	8005efa <_printf_float+0x23a>
 8005f2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	dc38      	bgt.n	8005fa4 <_printf_float+0x2e4>
 8005f32:	2301      	movs	r3, #1
 8005f34:	4631      	mov	r1, r6
 8005f36:	4628      	mov	r0, r5
 8005f38:	4a19      	ldr	r2, [pc, #100]	; (8005fa0 <_printf_float+0x2e0>)
 8005f3a:	47b8      	blx	r7
 8005f3c:	3001      	adds	r0, #1
 8005f3e:	f43f af1a 	beq.w	8005d76 <_printf_float+0xb6>
 8005f42:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005f46:	4313      	orrs	r3, r2
 8005f48:	d102      	bne.n	8005f50 <_printf_float+0x290>
 8005f4a:	6823      	ldr	r3, [r4, #0]
 8005f4c:	07d9      	lsls	r1, r3, #31
 8005f4e:	d5d8      	bpl.n	8005f02 <_printf_float+0x242>
 8005f50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f54:	4631      	mov	r1, r6
 8005f56:	4628      	mov	r0, r5
 8005f58:	47b8      	blx	r7
 8005f5a:	3001      	adds	r0, #1
 8005f5c:	f43f af0b 	beq.w	8005d76 <_printf_float+0xb6>
 8005f60:	f04f 0900 	mov.w	r9, #0
 8005f64:	f104 0a1a 	add.w	sl, r4, #26
 8005f68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f6a:	425b      	negs	r3, r3
 8005f6c:	454b      	cmp	r3, r9
 8005f6e:	dc01      	bgt.n	8005f74 <_printf_float+0x2b4>
 8005f70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f72:	e794      	b.n	8005e9e <_printf_float+0x1de>
 8005f74:	2301      	movs	r3, #1
 8005f76:	4652      	mov	r2, sl
 8005f78:	4631      	mov	r1, r6
 8005f7a:	4628      	mov	r0, r5
 8005f7c:	47b8      	blx	r7
 8005f7e:	3001      	adds	r0, #1
 8005f80:	f43f aef9 	beq.w	8005d76 <_printf_float+0xb6>
 8005f84:	f109 0901 	add.w	r9, r9, #1
 8005f88:	e7ee      	b.n	8005f68 <_printf_float+0x2a8>
 8005f8a:	bf00      	nop
 8005f8c:	7fefffff 	.word	0x7fefffff
 8005f90:	08009794 	.word	0x08009794
 8005f94:	08009798 	.word	0x08009798
 8005f98:	080097a0 	.word	0x080097a0
 8005f9c:	0800979c 	.word	0x0800979c
 8005fa0:	080097a4 	.word	0x080097a4
 8005fa4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005fa6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	bfa8      	it	ge
 8005fac:	461a      	movge	r2, r3
 8005fae:	2a00      	cmp	r2, #0
 8005fb0:	4691      	mov	r9, r2
 8005fb2:	dc37      	bgt.n	8006024 <_printf_float+0x364>
 8005fb4:	f04f 0b00 	mov.w	fp, #0
 8005fb8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fbc:	f104 021a 	add.w	r2, r4, #26
 8005fc0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005fc4:	ebaa 0309 	sub.w	r3, sl, r9
 8005fc8:	455b      	cmp	r3, fp
 8005fca:	dc33      	bgt.n	8006034 <_printf_float+0x374>
 8005fcc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	db3b      	blt.n	800604c <_printf_float+0x38c>
 8005fd4:	6823      	ldr	r3, [r4, #0]
 8005fd6:	07da      	lsls	r2, r3, #31
 8005fd8:	d438      	bmi.n	800604c <_printf_float+0x38c>
 8005fda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fdc:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005fde:	eba3 020a 	sub.w	r2, r3, sl
 8005fe2:	eba3 0901 	sub.w	r9, r3, r1
 8005fe6:	4591      	cmp	r9, r2
 8005fe8:	bfa8      	it	ge
 8005fea:	4691      	movge	r9, r2
 8005fec:	f1b9 0f00 	cmp.w	r9, #0
 8005ff0:	dc34      	bgt.n	800605c <_printf_float+0x39c>
 8005ff2:	f04f 0800 	mov.w	r8, #0
 8005ff6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ffa:	f104 0a1a 	add.w	sl, r4, #26
 8005ffe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006002:	1a9b      	subs	r3, r3, r2
 8006004:	eba3 0309 	sub.w	r3, r3, r9
 8006008:	4543      	cmp	r3, r8
 800600a:	f77f af7a 	ble.w	8005f02 <_printf_float+0x242>
 800600e:	2301      	movs	r3, #1
 8006010:	4652      	mov	r2, sl
 8006012:	4631      	mov	r1, r6
 8006014:	4628      	mov	r0, r5
 8006016:	47b8      	blx	r7
 8006018:	3001      	adds	r0, #1
 800601a:	f43f aeac 	beq.w	8005d76 <_printf_float+0xb6>
 800601e:	f108 0801 	add.w	r8, r8, #1
 8006022:	e7ec      	b.n	8005ffe <_printf_float+0x33e>
 8006024:	4613      	mov	r3, r2
 8006026:	4631      	mov	r1, r6
 8006028:	4642      	mov	r2, r8
 800602a:	4628      	mov	r0, r5
 800602c:	47b8      	blx	r7
 800602e:	3001      	adds	r0, #1
 8006030:	d1c0      	bne.n	8005fb4 <_printf_float+0x2f4>
 8006032:	e6a0      	b.n	8005d76 <_printf_float+0xb6>
 8006034:	2301      	movs	r3, #1
 8006036:	4631      	mov	r1, r6
 8006038:	4628      	mov	r0, r5
 800603a:	920b      	str	r2, [sp, #44]	; 0x2c
 800603c:	47b8      	blx	r7
 800603e:	3001      	adds	r0, #1
 8006040:	f43f ae99 	beq.w	8005d76 <_printf_float+0xb6>
 8006044:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006046:	f10b 0b01 	add.w	fp, fp, #1
 800604a:	e7b9      	b.n	8005fc0 <_printf_float+0x300>
 800604c:	4631      	mov	r1, r6
 800604e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006052:	4628      	mov	r0, r5
 8006054:	47b8      	blx	r7
 8006056:	3001      	adds	r0, #1
 8006058:	d1bf      	bne.n	8005fda <_printf_float+0x31a>
 800605a:	e68c      	b.n	8005d76 <_printf_float+0xb6>
 800605c:	464b      	mov	r3, r9
 800605e:	4631      	mov	r1, r6
 8006060:	4628      	mov	r0, r5
 8006062:	eb08 020a 	add.w	r2, r8, sl
 8006066:	47b8      	blx	r7
 8006068:	3001      	adds	r0, #1
 800606a:	d1c2      	bne.n	8005ff2 <_printf_float+0x332>
 800606c:	e683      	b.n	8005d76 <_printf_float+0xb6>
 800606e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006070:	2a01      	cmp	r2, #1
 8006072:	dc01      	bgt.n	8006078 <_printf_float+0x3b8>
 8006074:	07db      	lsls	r3, r3, #31
 8006076:	d537      	bpl.n	80060e8 <_printf_float+0x428>
 8006078:	2301      	movs	r3, #1
 800607a:	4642      	mov	r2, r8
 800607c:	4631      	mov	r1, r6
 800607e:	4628      	mov	r0, r5
 8006080:	47b8      	blx	r7
 8006082:	3001      	adds	r0, #1
 8006084:	f43f ae77 	beq.w	8005d76 <_printf_float+0xb6>
 8006088:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800608c:	4631      	mov	r1, r6
 800608e:	4628      	mov	r0, r5
 8006090:	47b8      	blx	r7
 8006092:	3001      	adds	r0, #1
 8006094:	f43f ae6f 	beq.w	8005d76 <_printf_float+0xb6>
 8006098:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800609c:	2200      	movs	r2, #0
 800609e:	2300      	movs	r3, #0
 80060a0:	f7fa fc82 	bl	80009a8 <__aeabi_dcmpeq>
 80060a4:	b9d8      	cbnz	r0, 80060de <_printf_float+0x41e>
 80060a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060a8:	f108 0201 	add.w	r2, r8, #1
 80060ac:	3b01      	subs	r3, #1
 80060ae:	4631      	mov	r1, r6
 80060b0:	4628      	mov	r0, r5
 80060b2:	47b8      	blx	r7
 80060b4:	3001      	adds	r0, #1
 80060b6:	d10e      	bne.n	80060d6 <_printf_float+0x416>
 80060b8:	e65d      	b.n	8005d76 <_printf_float+0xb6>
 80060ba:	2301      	movs	r3, #1
 80060bc:	464a      	mov	r2, r9
 80060be:	4631      	mov	r1, r6
 80060c0:	4628      	mov	r0, r5
 80060c2:	47b8      	blx	r7
 80060c4:	3001      	adds	r0, #1
 80060c6:	f43f ae56 	beq.w	8005d76 <_printf_float+0xb6>
 80060ca:	f108 0801 	add.w	r8, r8, #1
 80060ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060d0:	3b01      	subs	r3, #1
 80060d2:	4543      	cmp	r3, r8
 80060d4:	dcf1      	bgt.n	80060ba <_printf_float+0x3fa>
 80060d6:	4653      	mov	r3, sl
 80060d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80060dc:	e6e0      	b.n	8005ea0 <_printf_float+0x1e0>
 80060de:	f04f 0800 	mov.w	r8, #0
 80060e2:	f104 091a 	add.w	r9, r4, #26
 80060e6:	e7f2      	b.n	80060ce <_printf_float+0x40e>
 80060e8:	2301      	movs	r3, #1
 80060ea:	4642      	mov	r2, r8
 80060ec:	e7df      	b.n	80060ae <_printf_float+0x3ee>
 80060ee:	2301      	movs	r3, #1
 80060f0:	464a      	mov	r2, r9
 80060f2:	4631      	mov	r1, r6
 80060f4:	4628      	mov	r0, r5
 80060f6:	47b8      	blx	r7
 80060f8:	3001      	adds	r0, #1
 80060fa:	f43f ae3c 	beq.w	8005d76 <_printf_float+0xb6>
 80060fe:	f108 0801 	add.w	r8, r8, #1
 8006102:	68e3      	ldr	r3, [r4, #12]
 8006104:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006106:	1a5b      	subs	r3, r3, r1
 8006108:	4543      	cmp	r3, r8
 800610a:	dcf0      	bgt.n	80060ee <_printf_float+0x42e>
 800610c:	e6fd      	b.n	8005f0a <_printf_float+0x24a>
 800610e:	f04f 0800 	mov.w	r8, #0
 8006112:	f104 0919 	add.w	r9, r4, #25
 8006116:	e7f4      	b.n	8006102 <_printf_float+0x442>

08006118 <_printf_common>:
 8006118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800611c:	4616      	mov	r6, r2
 800611e:	4699      	mov	r9, r3
 8006120:	688a      	ldr	r2, [r1, #8]
 8006122:	690b      	ldr	r3, [r1, #16]
 8006124:	4607      	mov	r7, r0
 8006126:	4293      	cmp	r3, r2
 8006128:	bfb8      	it	lt
 800612a:	4613      	movlt	r3, r2
 800612c:	6033      	str	r3, [r6, #0]
 800612e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006132:	460c      	mov	r4, r1
 8006134:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006138:	b10a      	cbz	r2, 800613e <_printf_common+0x26>
 800613a:	3301      	adds	r3, #1
 800613c:	6033      	str	r3, [r6, #0]
 800613e:	6823      	ldr	r3, [r4, #0]
 8006140:	0699      	lsls	r1, r3, #26
 8006142:	bf42      	ittt	mi
 8006144:	6833      	ldrmi	r3, [r6, #0]
 8006146:	3302      	addmi	r3, #2
 8006148:	6033      	strmi	r3, [r6, #0]
 800614a:	6825      	ldr	r5, [r4, #0]
 800614c:	f015 0506 	ands.w	r5, r5, #6
 8006150:	d106      	bne.n	8006160 <_printf_common+0x48>
 8006152:	f104 0a19 	add.w	sl, r4, #25
 8006156:	68e3      	ldr	r3, [r4, #12]
 8006158:	6832      	ldr	r2, [r6, #0]
 800615a:	1a9b      	subs	r3, r3, r2
 800615c:	42ab      	cmp	r3, r5
 800615e:	dc28      	bgt.n	80061b2 <_printf_common+0x9a>
 8006160:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006164:	1e13      	subs	r3, r2, #0
 8006166:	6822      	ldr	r2, [r4, #0]
 8006168:	bf18      	it	ne
 800616a:	2301      	movne	r3, #1
 800616c:	0692      	lsls	r2, r2, #26
 800616e:	d42d      	bmi.n	80061cc <_printf_common+0xb4>
 8006170:	4649      	mov	r1, r9
 8006172:	4638      	mov	r0, r7
 8006174:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006178:	47c0      	blx	r8
 800617a:	3001      	adds	r0, #1
 800617c:	d020      	beq.n	80061c0 <_printf_common+0xa8>
 800617e:	6823      	ldr	r3, [r4, #0]
 8006180:	68e5      	ldr	r5, [r4, #12]
 8006182:	f003 0306 	and.w	r3, r3, #6
 8006186:	2b04      	cmp	r3, #4
 8006188:	bf18      	it	ne
 800618a:	2500      	movne	r5, #0
 800618c:	6832      	ldr	r2, [r6, #0]
 800618e:	f04f 0600 	mov.w	r6, #0
 8006192:	68a3      	ldr	r3, [r4, #8]
 8006194:	bf08      	it	eq
 8006196:	1aad      	subeq	r5, r5, r2
 8006198:	6922      	ldr	r2, [r4, #16]
 800619a:	bf08      	it	eq
 800619c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061a0:	4293      	cmp	r3, r2
 80061a2:	bfc4      	itt	gt
 80061a4:	1a9b      	subgt	r3, r3, r2
 80061a6:	18ed      	addgt	r5, r5, r3
 80061a8:	341a      	adds	r4, #26
 80061aa:	42b5      	cmp	r5, r6
 80061ac:	d11a      	bne.n	80061e4 <_printf_common+0xcc>
 80061ae:	2000      	movs	r0, #0
 80061b0:	e008      	b.n	80061c4 <_printf_common+0xac>
 80061b2:	2301      	movs	r3, #1
 80061b4:	4652      	mov	r2, sl
 80061b6:	4649      	mov	r1, r9
 80061b8:	4638      	mov	r0, r7
 80061ba:	47c0      	blx	r8
 80061bc:	3001      	adds	r0, #1
 80061be:	d103      	bne.n	80061c8 <_printf_common+0xb0>
 80061c0:	f04f 30ff 	mov.w	r0, #4294967295
 80061c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061c8:	3501      	adds	r5, #1
 80061ca:	e7c4      	b.n	8006156 <_printf_common+0x3e>
 80061cc:	2030      	movs	r0, #48	; 0x30
 80061ce:	18e1      	adds	r1, r4, r3
 80061d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061d4:	1c5a      	adds	r2, r3, #1
 80061d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061da:	4422      	add	r2, r4
 80061dc:	3302      	adds	r3, #2
 80061de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061e2:	e7c5      	b.n	8006170 <_printf_common+0x58>
 80061e4:	2301      	movs	r3, #1
 80061e6:	4622      	mov	r2, r4
 80061e8:	4649      	mov	r1, r9
 80061ea:	4638      	mov	r0, r7
 80061ec:	47c0      	blx	r8
 80061ee:	3001      	adds	r0, #1
 80061f0:	d0e6      	beq.n	80061c0 <_printf_common+0xa8>
 80061f2:	3601      	adds	r6, #1
 80061f4:	e7d9      	b.n	80061aa <_printf_common+0x92>
	...

080061f8 <_printf_i>:
 80061f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061fc:	7e0f      	ldrb	r7, [r1, #24]
 80061fe:	4691      	mov	r9, r2
 8006200:	2f78      	cmp	r7, #120	; 0x78
 8006202:	4680      	mov	r8, r0
 8006204:	460c      	mov	r4, r1
 8006206:	469a      	mov	sl, r3
 8006208:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800620a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800620e:	d807      	bhi.n	8006220 <_printf_i+0x28>
 8006210:	2f62      	cmp	r7, #98	; 0x62
 8006212:	d80a      	bhi.n	800622a <_printf_i+0x32>
 8006214:	2f00      	cmp	r7, #0
 8006216:	f000 80d9 	beq.w	80063cc <_printf_i+0x1d4>
 800621a:	2f58      	cmp	r7, #88	; 0x58
 800621c:	f000 80a4 	beq.w	8006368 <_printf_i+0x170>
 8006220:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006224:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006228:	e03a      	b.n	80062a0 <_printf_i+0xa8>
 800622a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800622e:	2b15      	cmp	r3, #21
 8006230:	d8f6      	bhi.n	8006220 <_printf_i+0x28>
 8006232:	a101      	add	r1, pc, #4	; (adr r1, 8006238 <_printf_i+0x40>)
 8006234:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006238:	08006291 	.word	0x08006291
 800623c:	080062a5 	.word	0x080062a5
 8006240:	08006221 	.word	0x08006221
 8006244:	08006221 	.word	0x08006221
 8006248:	08006221 	.word	0x08006221
 800624c:	08006221 	.word	0x08006221
 8006250:	080062a5 	.word	0x080062a5
 8006254:	08006221 	.word	0x08006221
 8006258:	08006221 	.word	0x08006221
 800625c:	08006221 	.word	0x08006221
 8006260:	08006221 	.word	0x08006221
 8006264:	080063b3 	.word	0x080063b3
 8006268:	080062d5 	.word	0x080062d5
 800626c:	08006395 	.word	0x08006395
 8006270:	08006221 	.word	0x08006221
 8006274:	08006221 	.word	0x08006221
 8006278:	080063d5 	.word	0x080063d5
 800627c:	08006221 	.word	0x08006221
 8006280:	080062d5 	.word	0x080062d5
 8006284:	08006221 	.word	0x08006221
 8006288:	08006221 	.word	0x08006221
 800628c:	0800639d 	.word	0x0800639d
 8006290:	682b      	ldr	r3, [r5, #0]
 8006292:	1d1a      	adds	r2, r3, #4
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	602a      	str	r2, [r5, #0]
 8006298:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800629c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062a0:	2301      	movs	r3, #1
 80062a2:	e0a4      	b.n	80063ee <_printf_i+0x1f6>
 80062a4:	6820      	ldr	r0, [r4, #0]
 80062a6:	6829      	ldr	r1, [r5, #0]
 80062a8:	0606      	lsls	r6, r0, #24
 80062aa:	f101 0304 	add.w	r3, r1, #4
 80062ae:	d50a      	bpl.n	80062c6 <_printf_i+0xce>
 80062b0:	680e      	ldr	r6, [r1, #0]
 80062b2:	602b      	str	r3, [r5, #0]
 80062b4:	2e00      	cmp	r6, #0
 80062b6:	da03      	bge.n	80062c0 <_printf_i+0xc8>
 80062b8:	232d      	movs	r3, #45	; 0x2d
 80062ba:	4276      	negs	r6, r6
 80062bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062c0:	230a      	movs	r3, #10
 80062c2:	485e      	ldr	r0, [pc, #376]	; (800643c <_printf_i+0x244>)
 80062c4:	e019      	b.n	80062fa <_printf_i+0x102>
 80062c6:	680e      	ldr	r6, [r1, #0]
 80062c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80062cc:	602b      	str	r3, [r5, #0]
 80062ce:	bf18      	it	ne
 80062d0:	b236      	sxthne	r6, r6
 80062d2:	e7ef      	b.n	80062b4 <_printf_i+0xbc>
 80062d4:	682b      	ldr	r3, [r5, #0]
 80062d6:	6820      	ldr	r0, [r4, #0]
 80062d8:	1d19      	adds	r1, r3, #4
 80062da:	6029      	str	r1, [r5, #0]
 80062dc:	0601      	lsls	r1, r0, #24
 80062de:	d501      	bpl.n	80062e4 <_printf_i+0xec>
 80062e0:	681e      	ldr	r6, [r3, #0]
 80062e2:	e002      	b.n	80062ea <_printf_i+0xf2>
 80062e4:	0646      	lsls	r6, r0, #25
 80062e6:	d5fb      	bpl.n	80062e0 <_printf_i+0xe8>
 80062e8:	881e      	ldrh	r6, [r3, #0]
 80062ea:	2f6f      	cmp	r7, #111	; 0x6f
 80062ec:	bf0c      	ite	eq
 80062ee:	2308      	moveq	r3, #8
 80062f0:	230a      	movne	r3, #10
 80062f2:	4852      	ldr	r0, [pc, #328]	; (800643c <_printf_i+0x244>)
 80062f4:	2100      	movs	r1, #0
 80062f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062fa:	6865      	ldr	r5, [r4, #4]
 80062fc:	2d00      	cmp	r5, #0
 80062fe:	bfa8      	it	ge
 8006300:	6821      	ldrge	r1, [r4, #0]
 8006302:	60a5      	str	r5, [r4, #8]
 8006304:	bfa4      	itt	ge
 8006306:	f021 0104 	bicge.w	r1, r1, #4
 800630a:	6021      	strge	r1, [r4, #0]
 800630c:	b90e      	cbnz	r6, 8006312 <_printf_i+0x11a>
 800630e:	2d00      	cmp	r5, #0
 8006310:	d04d      	beq.n	80063ae <_printf_i+0x1b6>
 8006312:	4615      	mov	r5, r2
 8006314:	fbb6 f1f3 	udiv	r1, r6, r3
 8006318:	fb03 6711 	mls	r7, r3, r1, r6
 800631c:	5dc7      	ldrb	r7, [r0, r7]
 800631e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006322:	4637      	mov	r7, r6
 8006324:	42bb      	cmp	r3, r7
 8006326:	460e      	mov	r6, r1
 8006328:	d9f4      	bls.n	8006314 <_printf_i+0x11c>
 800632a:	2b08      	cmp	r3, #8
 800632c:	d10b      	bne.n	8006346 <_printf_i+0x14e>
 800632e:	6823      	ldr	r3, [r4, #0]
 8006330:	07de      	lsls	r6, r3, #31
 8006332:	d508      	bpl.n	8006346 <_printf_i+0x14e>
 8006334:	6923      	ldr	r3, [r4, #16]
 8006336:	6861      	ldr	r1, [r4, #4]
 8006338:	4299      	cmp	r1, r3
 800633a:	bfde      	ittt	le
 800633c:	2330      	movle	r3, #48	; 0x30
 800633e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006342:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006346:	1b52      	subs	r2, r2, r5
 8006348:	6122      	str	r2, [r4, #16]
 800634a:	464b      	mov	r3, r9
 800634c:	4621      	mov	r1, r4
 800634e:	4640      	mov	r0, r8
 8006350:	f8cd a000 	str.w	sl, [sp]
 8006354:	aa03      	add	r2, sp, #12
 8006356:	f7ff fedf 	bl	8006118 <_printf_common>
 800635a:	3001      	adds	r0, #1
 800635c:	d14c      	bne.n	80063f8 <_printf_i+0x200>
 800635e:	f04f 30ff 	mov.w	r0, #4294967295
 8006362:	b004      	add	sp, #16
 8006364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006368:	4834      	ldr	r0, [pc, #208]	; (800643c <_printf_i+0x244>)
 800636a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800636e:	6829      	ldr	r1, [r5, #0]
 8006370:	6823      	ldr	r3, [r4, #0]
 8006372:	f851 6b04 	ldr.w	r6, [r1], #4
 8006376:	6029      	str	r1, [r5, #0]
 8006378:	061d      	lsls	r5, r3, #24
 800637a:	d514      	bpl.n	80063a6 <_printf_i+0x1ae>
 800637c:	07df      	lsls	r7, r3, #31
 800637e:	bf44      	itt	mi
 8006380:	f043 0320 	orrmi.w	r3, r3, #32
 8006384:	6023      	strmi	r3, [r4, #0]
 8006386:	b91e      	cbnz	r6, 8006390 <_printf_i+0x198>
 8006388:	6823      	ldr	r3, [r4, #0]
 800638a:	f023 0320 	bic.w	r3, r3, #32
 800638e:	6023      	str	r3, [r4, #0]
 8006390:	2310      	movs	r3, #16
 8006392:	e7af      	b.n	80062f4 <_printf_i+0xfc>
 8006394:	6823      	ldr	r3, [r4, #0]
 8006396:	f043 0320 	orr.w	r3, r3, #32
 800639a:	6023      	str	r3, [r4, #0]
 800639c:	2378      	movs	r3, #120	; 0x78
 800639e:	4828      	ldr	r0, [pc, #160]	; (8006440 <_printf_i+0x248>)
 80063a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80063a4:	e7e3      	b.n	800636e <_printf_i+0x176>
 80063a6:	0659      	lsls	r1, r3, #25
 80063a8:	bf48      	it	mi
 80063aa:	b2b6      	uxthmi	r6, r6
 80063ac:	e7e6      	b.n	800637c <_printf_i+0x184>
 80063ae:	4615      	mov	r5, r2
 80063b0:	e7bb      	b.n	800632a <_printf_i+0x132>
 80063b2:	682b      	ldr	r3, [r5, #0]
 80063b4:	6826      	ldr	r6, [r4, #0]
 80063b6:	1d18      	adds	r0, r3, #4
 80063b8:	6961      	ldr	r1, [r4, #20]
 80063ba:	6028      	str	r0, [r5, #0]
 80063bc:	0635      	lsls	r5, r6, #24
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	d501      	bpl.n	80063c6 <_printf_i+0x1ce>
 80063c2:	6019      	str	r1, [r3, #0]
 80063c4:	e002      	b.n	80063cc <_printf_i+0x1d4>
 80063c6:	0670      	lsls	r0, r6, #25
 80063c8:	d5fb      	bpl.n	80063c2 <_printf_i+0x1ca>
 80063ca:	8019      	strh	r1, [r3, #0]
 80063cc:	2300      	movs	r3, #0
 80063ce:	4615      	mov	r5, r2
 80063d0:	6123      	str	r3, [r4, #16]
 80063d2:	e7ba      	b.n	800634a <_printf_i+0x152>
 80063d4:	682b      	ldr	r3, [r5, #0]
 80063d6:	2100      	movs	r1, #0
 80063d8:	1d1a      	adds	r2, r3, #4
 80063da:	602a      	str	r2, [r5, #0]
 80063dc:	681d      	ldr	r5, [r3, #0]
 80063de:	6862      	ldr	r2, [r4, #4]
 80063e0:	4628      	mov	r0, r5
 80063e2:	f000 fed7 	bl	8007194 <memchr>
 80063e6:	b108      	cbz	r0, 80063ec <_printf_i+0x1f4>
 80063e8:	1b40      	subs	r0, r0, r5
 80063ea:	6060      	str	r0, [r4, #4]
 80063ec:	6863      	ldr	r3, [r4, #4]
 80063ee:	6123      	str	r3, [r4, #16]
 80063f0:	2300      	movs	r3, #0
 80063f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063f6:	e7a8      	b.n	800634a <_printf_i+0x152>
 80063f8:	462a      	mov	r2, r5
 80063fa:	4649      	mov	r1, r9
 80063fc:	4640      	mov	r0, r8
 80063fe:	6923      	ldr	r3, [r4, #16]
 8006400:	47d0      	blx	sl
 8006402:	3001      	adds	r0, #1
 8006404:	d0ab      	beq.n	800635e <_printf_i+0x166>
 8006406:	6823      	ldr	r3, [r4, #0]
 8006408:	079b      	lsls	r3, r3, #30
 800640a:	d413      	bmi.n	8006434 <_printf_i+0x23c>
 800640c:	68e0      	ldr	r0, [r4, #12]
 800640e:	9b03      	ldr	r3, [sp, #12]
 8006410:	4298      	cmp	r0, r3
 8006412:	bfb8      	it	lt
 8006414:	4618      	movlt	r0, r3
 8006416:	e7a4      	b.n	8006362 <_printf_i+0x16a>
 8006418:	2301      	movs	r3, #1
 800641a:	4632      	mov	r2, r6
 800641c:	4649      	mov	r1, r9
 800641e:	4640      	mov	r0, r8
 8006420:	47d0      	blx	sl
 8006422:	3001      	adds	r0, #1
 8006424:	d09b      	beq.n	800635e <_printf_i+0x166>
 8006426:	3501      	adds	r5, #1
 8006428:	68e3      	ldr	r3, [r4, #12]
 800642a:	9903      	ldr	r1, [sp, #12]
 800642c:	1a5b      	subs	r3, r3, r1
 800642e:	42ab      	cmp	r3, r5
 8006430:	dcf2      	bgt.n	8006418 <_printf_i+0x220>
 8006432:	e7eb      	b.n	800640c <_printf_i+0x214>
 8006434:	2500      	movs	r5, #0
 8006436:	f104 0619 	add.w	r6, r4, #25
 800643a:	e7f5      	b.n	8006428 <_printf_i+0x230>
 800643c:	080097a6 	.word	0x080097a6
 8006440:	080097b7 	.word	0x080097b7

08006444 <siprintf>:
 8006444:	b40e      	push	{r1, r2, r3}
 8006446:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800644a:	b500      	push	{lr}
 800644c:	b09c      	sub	sp, #112	; 0x70
 800644e:	ab1d      	add	r3, sp, #116	; 0x74
 8006450:	9002      	str	r0, [sp, #8]
 8006452:	9006      	str	r0, [sp, #24]
 8006454:	9107      	str	r1, [sp, #28]
 8006456:	9104      	str	r1, [sp, #16]
 8006458:	4808      	ldr	r0, [pc, #32]	; (800647c <siprintf+0x38>)
 800645a:	4909      	ldr	r1, [pc, #36]	; (8006480 <siprintf+0x3c>)
 800645c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006460:	9105      	str	r1, [sp, #20]
 8006462:	6800      	ldr	r0, [r0, #0]
 8006464:	a902      	add	r1, sp, #8
 8006466:	9301      	str	r3, [sp, #4]
 8006468:	f001 fb70 	bl	8007b4c <_svfiprintf_r>
 800646c:	2200      	movs	r2, #0
 800646e:	9b02      	ldr	r3, [sp, #8]
 8006470:	701a      	strb	r2, [r3, #0]
 8006472:	b01c      	add	sp, #112	; 0x70
 8006474:	f85d eb04 	ldr.w	lr, [sp], #4
 8006478:	b003      	add	sp, #12
 800647a:	4770      	bx	lr
 800647c:	20000188 	.word	0x20000188
 8006480:	ffff0208 	.word	0xffff0208

08006484 <quorem>:
 8006484:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006488:	6903      	ldr	r3, [r0, #16]
 800648a:	690c      	ldr	r4, [r1, #16]
 800648c:	4607      	mov	r7, r0
 800648e:	42a3      	cmp	r3, r4
 8006490:	f2c0 8082 	blt.w	8006598 <quorem+0x114>
 8006494:	3c01      	subs	r4, #1
 8006496:	f100 0514 	add.w	r5, r0, #20
 800649a:	f101 0814 	add.w	r8, r1, #20
 800649e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064a2:	9301      	str	r3, [sp, #4]
 80064a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80064a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064ac:	3301      	adds	r3, #1
 80064ae:	429a      	cmp	r2, r3
 80064b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80064b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80064b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80064bc:	d331      	bcc.n	8006522 <quorem+0x9e>
 80064be:	f04f 0e00 	mov.w	lr, #0
 80064c2:	4640      	mov	r0, r8
 80064c4:	46ac      	mov	ip, r5
 80064c6:	46f2      	mov	sl, lr
 80064c8:	f850 2b04 	ldr.w	r2, [r0], #4
 80064cc:	b293      	uxth	r3, r2
 80064ce:	fb06 e303 	mla	r3, r6, r3, lr
 80064d2:	0c12      	lsrs	r2, r2, #16
 80064d4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80064d8:	b29b      	uxth	r3, r3
 80064da:	fb06 e202 	mla	r2, r6, r2, lr
 80064de:	ebaa 0303 	sub.w	r3, sl, r3
 80064e2:	f8dc a000 	ldr.w	sl, [ip]
 80064e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80064ea:	fa1f fa8a 	uxth.w	sl, sl
 80064ee:	4453      	add	r3, sl
 80064f0:	f8dc a000 	ldr.w	sl, [ip]
 80064f4:	b292      	uxth	r2, r2
 80064f6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80064fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80064fe:	b29b      	uxth	r3, r3
 8006500:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006504:	4581      	cmp	r9, r0
 8006506:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800650a:	f84c 3b04 	str.w	r3, [ip], #4
 800650e:	d2db      	bcs.n	80064c8 <quorem+0x44>
 8006510:	f855 300b 	ldr.w	r3, [r5, fp]
 8006514:	b92b      	cbnz	r3, 8006522 <quorem+0x9e>
 8006516:	9b01      	ldr	r3, [sp, #4]
 8006518:	3b04      	subs	r3, #4
 800651a:	429d      	cmp	r5, r3
 800651c:	461a      	mov	r2, r3
 800651e:	d32f      	bcc.n	8006580 <quorem+0xfc>
 8006520:	613c      	str	r4, [r7, #16]
 8006522:	4638      	mov	r0, r7
 8006524:	f001 f8c2 	bl	80076ac <__mcmp>
 8006528:	2800      	cmp	r0, #0
 800652a:	db25      	blt.n	8006578 <quorem+0xf4>
 800652c:	4628      	mov	r0, r5
 800652e:	f04f 0c00 	mov.w	ip, #0
 8006532:	3601      	adds	r6, #1
 8006534:	f858 1b04 	ldr.w	r1, [r8], #4
 8006538:	f8d0 e000 	ldr.w	lr, [r0]
 800653c:	b28b      	uxth	r3, r1
 800653e:	ebac 0303 	sub.w	r3, ip, r3
 8006542:	fa1f f28e 	uxth.w	r2, lr
 8006546:	4413      	add	r3, r2
 8006548:	0c0a      	lsrs	r2, r1, #16
 800654a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800654e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006552:	b29b      	uxth	r3, r3
 8006554:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006558:	45c1      	cmp	r9, r8
 800655a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800655e:	f840 3b04 	str.w	r3, [r0], #4
 8006562:	d2e7      	bcs.n	8006534 <quorem+0xb0>
 8006564:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006568:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800656c:	b922      	cbnz	r2, 8006578 <quorem+0xf4>
 800656e:	3b04      	subs	r3, #4
 8006570:	429d      	cmp	r5, r3
 8006572:	461a      	mov	r2, r3
 8006574:	d30a      	bcc.n	800658c <quorem+0x108>
 8006576:	613c      	str	r4, [r7, #16]
 8006578:	4630      	mov	r0, r6
 800657a:	b003      	add	sp, #12
 800657c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006580:	6812      	ldr	r2, [r2, #0]
 8006582:	3b04      	subs	r3, #4
 8006584:	2a00      	cmp	r2, #0
 8006586:	d1cb      	bne.n	8006520 <quorem+0x9c>
 8006588:	3c01      	subs	r4, #1
 800658a:	e7c6      	b.n	800651a <quorem+0x96>
 800658c:	6812      	ldr	r2, [r2, #0]
 800658e:	3b04      	subs	r3, #4
 8006590:	2a00      	cmp	r2, #0
 8006592:	d1f0      	bne.n	8006576 <quorem+0xf2>
 8006594:	3c01      	subs	r4, #1
 8006596:	e7eb      	b.n	8006570 <quorem+0xec>
 8006598:	2000      	movs	r0, #0
 800659a:	e7ee      	b.n	800657a <quorem+0xf6>
 800659c:	0000      	movs	r0, r0
	...

080065a0 <_dtoa_r>:
 80065a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a4:	4616      	mov	r6, r2
 80065a6:	461f      	mov	r7, r3
 80065a8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80065aa:	b099      	sub	sp, #100	; 0x64
 80065ac:	4605      	mov	r5, r0
 80065ae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80065b2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80065b6:	b974      	cbnz	r4, 80065d6 <_dtoa_r+0x36>
 80065b8:	2010      	movs	r0, #16
 80065ba:	f000 fde3 	bl	8007184 <malloc>
 80065be:	4602      	mov	r2, r0
 80065c0:	6268      	str	r0, [r5, #36]	; 0x24
 80065c2:	b920      	cbnz	r0, 80065ce <_dtoa_r+0x2e>
 80065c4:	21ea      	movs	r1, #234	; 0xea
 80065c6:	4ba8      	ldr	r3, [pc, #672]	; (8006868 <_dtoa_r+0x2c8>)
 80065c8:	48a8      	ldr	r0, [pc, #672]	; (800686c <_dtoa_r+0x2cc>)
 80065ca:	f001 fbcf 	bl	8007d6c <__assert_func>
 80065ce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80065d2:	6004      	str	r4, [r0, #0]
 80065d4:	60c4      	str	r4, [r0, #12]
 80065d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80065d8:	6819      	ldr	r1, [r3, #0]
 80065da:	b151      	cbz	r1, 80065f2 <_dtoa_r+0x52>
 80065dc:	685a      	ldr	r2, [r3, #4]
 80065de:	2301      	movs	r3, #1
 80065e0:	4093      	lsls	r3, r2
 80065e2:	604a      	str	r2, [r1, #4]
 80065e4:	608b      	str	r3, [r1, #8]
 80065e6:	4628      	mov	r0, r5
 80065e8:	f000 fe22 	bl	8007230 <_Bfree>
 80065ec:	2200      	movs	r2, #0
 80065ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80065f0:	601a      	str	r2, [r3, #0]
 80065f2:	1e3b      	subs	r3, r7, #0
 80065f4:	bfaf      	iteee	ge
 80065f6:	2300      	movge	r3, #0
 80065f8:	2201      	movlt	r2, #1
 80065fa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80065fe:	9305      	strlt	r3, [sp, #20]
 8006600:	bfa8      	it	ge
 8006602:	f8c8 3000 	strge.w	r3, [r8]
 8006606:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800660a:	4b99      	ldr	r3, [pc, #612]	; (8006870 <_dtoa_r+0x2d0>)
 800660c:	bfb8      	it	lt
 800660e:	f8c8 2000 	strlt.w	r2, [r8]
 8006612:	ea33 0309 	bics.w	r3, r3, r9
 8006616:	d119      	bne.n	800664c <_dtoa_r+0xac>
 8006618:	f242 730f 	movw	r3, #9999	; 0x270f
 800661c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800661e:	6013      	str	r3, [r2, #0]
 8006620:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006624:	4333      	orrs	r3, r6
 8006626:	f000 857f 	beq.w	8007128 <_dtoa_r+0xb88>
 800662a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800662c:	b953      	cbnz	r3, 8006644 <_dtoa_r+0xa4>
 800662e:	4b91      	ldr	r3, [pc, #580]	; (8006874 <_dtoa_r+0x2d4>)
 8006630:	e022      	b.n	8006678 <_dtoa_r+0xd8>
 8006632:	4b91      	ldr	r3, [pc, #580]	; (8006878 <_dtoa_r+0x2d8>)
 8006634:	9303      	str	r3, [sp, #12]
 8006636:	3308      	adds	r3, #8
 8006638:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800663a:	6013      	str	r3, [r2, #0]
 800663c:	9803      	ldr	r0, [sp, #12]
 800663e:	b019      	add	sp, #100	; 0x64
 8006640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006644:	4b8b      	ldr	r3, [pc, #556]	; (8006874 <_dtoa_r+0x2d4>)
 8006646:	9303      	str	r3, [sp, #12]
 8006648:	3303      	adds	r3, #3
 800664a:	e7f5      	b.n	8006638 <_dtoa_r+0x98>
 800664c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006650:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006654:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006658:	2200      	movs	r2, #0
 800665a:	2300      	movs	r3, #0
 800665c:	f7fa f9a4 	bl	80009a8 <__aeabi_dcmpeq>
 8006660:	4680      	mov	r8, r0
 8006662:	b158      	cbz	r0, 800667c <_dtoa_r+0xdc>
 8006664:	2301      	movs	r3, #1
 8006666:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006668:	6013      	str	r3, [r2, #0]
 800666a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 8558 	beq.w	8007122 <_dtoa_r+0xb82>
 8006672:	4882      	ldr	r0, [pc, #520]	; (800687c <_dtoa_r+0x2dc>)
 8006674:	6018      	str	r0, [r3, #0]
 8006676:	1e43      	subs	r3, r0, #1
 8006678:	9303      	str	r3, [sp, #12]
 800667a:	e7df      	b.n	800663c <_dtoa_r+0x9c>
 800667c:	ab16      	add	r3, sp, #88	; 0x58
 800667e:	9301      	str	r3, [sp, #4]
 8006680:	ab17      	add	r3, sp, #92	; 0x5c
 8006682:	9300      	str	r3, [sp, #0]
 8006684:	4628      	mov	r0, r5
 8006686:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800668a:	f001 f8b7 	bl	80077fc <__d2b>
 800668e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006692:	4683      	mov	fp, r0
 8006694:	2c00      	cmp	r4, #0
 8006696:	d07f      	beq.n	8006798 <_dtoa_r+0x1f8>
 8006698:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800669c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800669e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80066a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066a6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80066aa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80066ae:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80066b2:	2200      	movs	r2, #0
 80066b4:	4b72      	ldr	r3, [pc, #456]	; (8006880 <_dtoa_r+0x2e0>)
 80066b6:	f7f9 fd57 	bl	8000168 <__aeabi_dsub>
 80066ba:	a365      	add	r3, pc, #404	; (adr r3, 8006850 <_dtoa_r+0x2b0>)
 80066bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c0:	f7f9 ff0a 	bl	80004d8 <__aeabi_dmul>
 80066c4:	a364      	add	r3, pc, #400	; (adr r3, 8006858 <_dtoa_r+0x2b8>)
 80066c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ca:	f7f9 fd4f 	bl	800016c <__adddf3>
 80066ce:	4606      	mov	r6, r0
 80066d0:	4620      	mov	r0, r4
 80066d2:	460f      	mov	r7, r1
 80066d4:	f7f9 fe96 	bl	8000404 <__aeabi_i2d>
 80066d8:	a361      	add	r3, pc, #388	; (adr r3, 8006860 <_dtoa_r+0x2c0>)
 80066da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066de:	f7f9 fefb 	bl	80004d8 <__aeabi_dmul>
 80066e2:	4602      	mov	r2, r0
 80066e4:	460b      	mov	r3, r1
 80066e6:	4630      	mov	r0, r6
 80066e8:	4639      	mov	r1, r7
 80066ea:	f7f9 fd3f 	bl	800016c <__adddf3>
 80066ee:	4606      	mov	r6, r0
 80066f0:	460f      	mov	r7, r1
 80066f2:	f7fa f9a1 	bl	8000a38 <__aeabi_d2iz>
 80066f6:	2200      	movs	r2, #0
 80066f8:	4682      	mov	sl, r0
 80066fa:	2300      	movs	r3, #0
 80066fc:	4630      	mov	r0, r6
 80066fe:	4639      	mov	r1, r7
 8006700:	f7fa f95c 	bl	80009bc <__aeabi_dcmplt>
 8006704:	b148      	cbz	r0, 800671a <_dtoa_r+0x17a>
 8006706:	4650      	mov	r0, sl
 8006708:	f7f9 fe7c 	bl	8000404 <__aeabi_i2d>
 800670c:	4632      	mov	r2, r6
 800670e:	463b      	mov	r3, r7
 8006710:	f7fa f94a 	bl	80009a8 <__aeabi_dcmpeq>
 8006714:	b908      	cbnz	r0, 800671a <_dtoa_r+0x17a>
 8006716:	f10a 3aff 	add.w	sl, sl, #4294967295
 800671a:	f1ba 0f16 	cmp.w	sl, #22
 800671e:	d858      	bhi.n	80067d2 <_dtoa_r+0x232>
 8006720:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006724:	4b57      	ldr	r3, [pc, #348]	; (8006884 <_dtoa_r+0x2e4>)
 8006726:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800672a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672e:	f7fa f945 	bl	80009bc <__aeabi_dcmplt>
 8006732:	2800      	cmp	r0, #0
 8006734:	d04f      	beq.n	80067d6 <_dtoa_r+0x236>
 8006736:	2300      	movs	r3, #0
 8006738:	f10a 3aff 	add.w	sl, sl, #4294967295
 800673c:	930f      	str	r3, [sp, #60]	; 0x3c
 800673e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006740:	1b1c      	subs	r4, r3, r4
 8006742:	1e63      	subs	r3, r4, #1
 8006744:	9309      	str	r3, [sp, #36]	; 0x24
 8006746:	bf49      	itett	mi
 8006748:	f1c4 0301 	rsbmi	r3, r4, #1
 800674c:	2300      	movpl	r3, #0
 800674e:	9306      	strmi	r3, [sp, #24]
 8006750:	2300      	movmi	r3, #0
 8006752:	bf54      	ite	pl
 8006754:	9306      	strpl	r3, [sp, #24]
 8006756:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006758:	f1ba 0f00 	cmp.w	sl, #0
 800675c:	db3d      	blt.n	80067da <_dtoa_r+0x23a>
 800675e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006760:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006764:	4453      	add	r3, sl
 8006766:	9309      	str	r3, [sp, #36]	; 0x24
 8006768:	2300      	movs	r3, #0
 800676a:	930a      	str	r3, [sp, #40]	; 0x28
 800676c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800676e:	2b09      	cmp	r3, #9
 8006770:	f200 808c 	bhi.w	800688c <_dtoa_r+0x2ec>
 8006774:	2b05      	cmp	r3, #5
 8006776:	bfc4      	itt	gt
 8006778:	3b04      	subgt	r3, #4
 800677a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800677c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800677e:	bfc8      	it	gt
 8006780:	2400      	movgt	r4, #0
 8006782:	f1a3 0302 	sub.w	r3, r3, #2
 8006786:	bfd8      	it	le
 8006788:	2401      	movle	r4, #1
 800678a:	2b03      	cmp	r3, #3
 800678c:	f200 808a 	bhi.w	80068a4 <_dtoa_r+0x304>
 8006790:	e8df f003 	tbb	[pc, r3]
 8006794:	5b4d4f2d 	.word	0x5b4d4f2d
 8006798:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800679c:	441c      	add	r4, r3
 800679e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80067a2:	2b20      	cmp	r3, #32
 80067a4:	bfc3      	ittte	gt
 80067a6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80067aa:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80067ae:	fa09 f303 	lslgt.w	r3, r9, r3
 80067b2:	f1c3 0320 	rsble	r3, r3, #32
 80067b6:	bfc6      	itte	gt
 80067b8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80067bc:	4318      	orrgt	r0, r3
 80067be:	fa06 f003 	lslle.w	r0, r6, r3
 80067c2:	f7f9 fe0f 	bl	80003e4 <__aeabi_ui2d>
 80067c6:	2301      	movs	r3, #1
 80067c8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80067cc:	3c01      	subs	r4, #1
 80067ce:	9313      	str	r3, [sp, #76]	; 0x4c
 80067d0:	e76f      	b.n	80066b2 <_dtoa_r+0x112>
 80067d2:	2301      	movs	r3, #1
 80067d4:	e7b2      	b.n	800673c <_dtoa_r+0x19c>
 80067d6:	900f      	str	r0, [sp, #60]	; 0x3c
 80067d8:	e7b1      	b.n	800673e <_dtoa_r+0x19e>
 80067da:	9b06      	ldr	r3, [sp, #24]
 80067dc:	eba3 030a 	sub.w	r3, r3, sl
 80067e0:	9306      	str	r3, [sp, #24]
 80067e2:	f1ca 0300 	rsb	r3, sl, #0
 80067e6:	930a      	str	r3, [sp, #40]	; 0x28
 80067e8:	2300      	movs	r3, #0
 80067ea:	930e      	str	r3, [sp, #56]	; 0x38
 80067ec:	e7be      	b.n	800676c <_dtoa_r+0x1cc>
 80067ee:	2300      	movs	r3, #0
 80067f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80067f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	dc58      	bgt.n	80068aa <_dtoa_r+0x30a>
 80067f8:	f04f 0901 	mov.w	r9, #1
 80067fc:	464b      	mov	r3, r9
 80067fe:	f8cd 9020 	str.w	r9, [sp, #32]
 8006802:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006806:	2200      	movs	r2, #0
 8006808:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800680a:	6042      	str	r2, [r0, #4]
 800680c:	2204      	movs	r2, #4
 800680e:	f102 0614 	add.w	r6, r2, #20
 8006812:	429e      	cmp	r6, r3
 8006814:	6841      	ldr	r1, [r0, #4]
 8006816:	d94e      	bls.n	80068b6 <_dtoa_r+0x316>
 8006818:	4628      	mov	r0, r5
 800681a:	f000 fcc9 	bl	80071b0 <_Balloc>
 800681e:	9003      	str	r0, [sp, #12]
 8006820:	2800      	cmp	r0, #0
 8006822:	d14c      	bne.n	80068be <_dtoa_r+0x31e>
 8006824:	4602      	mov	r2, r0
 8006826:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800682a:	4b17      	ldr	r3, [pc, #92]	; (8006888 <_dtoa_r+0x2e8>)
 800682c:	e6cc      	b.n	80065c8 <_dtoa_r+0x28>
 800682e:	2301      	movs	r3, #1
 8006830:	e7de      	b.n	80067f0 <_dtoa_r+0x250>
 8006832:	2300      	movs	r3, #0
 8006834:	930b      	str	r3, [sp, #44]	; 0x2c
 8006836:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006838:	eb0a 0903 	add.w	r9, sl, r3
 800683c:	f109 0301 	add.w	r3, r9, #1
 8006840:	2b01      	cmp	r3, #1
 8006842:	9308      	str	r3, [sp, #32]
 8006844:	bfb8      	it	lt
 8006846:	2301      	movlt	r3, #1
 8006848:	e7dd      	b.n	8006806 <_dtoa_r+0x266>
 800684a:	2301      	movs	r3, #1
 800684c:	e7f2      	b.n	8006834 <_dtoa_r+0x294>
 800684e:	bf00      	nop
 8006850:	636f4361 	.word	0x636f4361
 8006854:	3fd287a7 	.word	0x3fd287a7
 8006858:	8b60c8b3 	.word	0x8b60c8b3
 800685c:	3fc68a28 	.word	0x3fc68a28
 8006860:	509f79fb 	.word	0x509f79fb
 8006864:	3fd34413 	.word	0x3fd34413
 8006868:	080097d5 	.word	0x080097d5
 800686c:	080097ec 	.word	0x080097ec
 8006870:	7ff00000 	.word	0x7ff00000
 8006874:	080097d1 	.word	0x080097d1
 8006878:	080097c8 	.word	0x080097c8
 800687c:	080097a5 	.word	0x080097a5
 8006880:	3ff80000 	.word	0x3ff80000
 8006884:	080098e0 	.word	0x080098e0
 8006888:	08009847 	.word	0x08009847
 800688c:	2401      	movs	r4, #1
 800688e:	2300      	movs	r3, #0
 8006890:	940b      	str	r4, [sp, #44]	; 0x2c
 8006892:	9322      	str	r3, [sp, #136]	; 0x88
 8006894:	f04f 39ff 	mov.w	r9, #4294967295
 8006898:	2200      	movs	r2, #0
 800689a:	2312      	movs	r3, #18
 800689c:	f8cd 9020 	str.w	r9, [sp, #32]
 80068a0:	9223      	str	r2, [sp, #140]	; 0x8c
 80068a2:	e7b0      	b.n	8006806 <_dtoa_r+0x266>
 80068a4:	2301      	movs	r3, #1
 80068a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80068a8:	e7f4      	b.n	8006894 <_dtoa_r+0x2f4>
 80068aa:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80068ae:	464b      	mov	r3, r9
 80068b0:	f8cd 9020 	str.w	r9, [sp, #32]
 80068b4:	e7a7      	b.n	8006806 <_dtoa_r+0x266>
 80068b6:	3101      	adds	r1, #1
 80068b8:	6041      	str	r1, [r0, #4]
 80068ba:	0052      	lsls	r2, r2, #1
 80068bc:	e7a7      	b.n	800680e <_dtoa_r+0x26e>
 80068be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80068c0:	9a03      	ldr	r2, [sp, #12]
 80068c2:	601a      	str	r2, [r3, #0]
 80068c4:	9b08      	ldr	r3, [sp, #32]
 80068c6:	2b0e      	cmp	r3, #14
 80068c8:	f200 80a8 	bhi.w	8006a1c <_dtoa_r+0x47c>
 80068cc:	2c00      	cmp	r4, #0
 80068ce:	f000 80a5 	beq.w	8006a1c <_dtoa_r+0x47c>
 80068d2:	f1ba 0f00 	cmp.w	sl, #0
 80068d6:	dd34      	ble.n	8006942 <_dtoa_r+0x3a2>
 80068d8:	4a9a      	ldr	r2, [pc, #616]	; (8006b44 <_dtoa_r+0x5a4>)
 80068da:	f00a 030f 	and.w	r3, sl, #15
 80068de:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80068e2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80068e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80068ea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80068ee:	ea4f 142a 	mov.w	r4, sl, asr #4
 80068f2:	d016      	beq.n	8006922 <_dtoa_r+0x382>
 80068f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80068f8:	4b93      	ldr	r3, [pc, #588]	; (8006b48 <_dtoa_r+0x5a8>)
 80068fa:	2703      	movs	r7, #3
 80068fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006900:	f7f9 ff14 	bl	800072c <__aeabi_ddiv>
 8006904:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006908:	f004 040f 	and.w	r4, r4, #15
 800690c:	4e8e      	ldr	r6, [pc, #568]	; (8006b48 <_dtoa_r+0x5a8>)
 800690e:	b954      	cbnz	r4, 8006926 <_dtoa_r+0x386>
 8006910:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006914:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006918:	f7f9 ff08 	bl	800072c <__aeabi_ddiv>
 800691c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006920:	e029      	b.n	8006976 <_dtoa_r+0x3d6>
 8006922:	2702      	movs	r7, #2
 8006924:	e7f2      	b.n	800690c <_dtoa_r+0x36c>
 8006926:	07e1      	lsls	r1, r4, #31
 8006928:	d508      	bpl.n	800693c <_dtoa_r+0x39c>
 800692a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800692e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006932:	f7f9 fdd1 	bl	80004d8 <__aeabi_dmul>
 8006936:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800693a:	3701      	adds	r7, #1
 800693c:	1064      	asrs	r4, r4, #1
 800693e:	3608      	adds	r6, #8
 8006940:	e7e5      	b.n	800690e <_dtoa_r+0x36e>
 8006942:	f000 80a5 	beq.w	8006a90 <_dtoa_r+0x4f0>
 8006946:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800694a:	f1ca 0400 	rsb	r4, sl, #0
 800694e:	4b7d      	ldr	r3, [pc, #500]	; (8006b44 <_dtoa_r+0x5a4>)
 8006950:	f004 020f 	and.w	r2, r4, #15
 8006954:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695c:	f7f9 fdbc 	bl	80004d8 <__aeabi_dmul>
 8006960:	2702      	movs	r7, #2
 8006962:	2300      	movs	r3, #0
 8006964:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006968:	4e77      	ldr	r6, [pc, #476]	; (8006b48 <_dtoa_r+0x5a8>)
 800696a:	1124      	asrs	r4, r4, #4
 800696c:	2c00      	cmp	r4, #0
 800696e:	f040 8084 	bne.w	8006a7a <_dtoa_r+0x4da>
 8006972:	2b00      	cmp	r3, #0
 8006974:	d1d2      	bne.n	800691c <_dtoa_r+0x37c>
 8006976:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006978:	2b00      	cmp	r3, #0
 800697a:	f000 808b 	beq.w	8006a94 <_dtoa_r+0x4f4>
 800697e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006982:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006986:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800698a:	2200      	movs	r2, #0
 800698c:	4b6f      	ldr	r3, [pc, #444]	; (8006b4c <_dtoa_r+0x5ac>)
 800698e:	f7fa f815 	bl	80009bc <__aeabi_dcmplt>
 8006992:	2800      	cmp	r0, #0
 8006994:	d07e      	beq.n	8006a94 <_dtoa_r+0x4f4>
 8006996:	9b08      	ldr	r3, [sp, #32]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d07b      	beq.n	8006a94 <_dtoa_r+0x4f4>
 800699c:	f1b9 0f00 	cmp.w	r9, #0
 80069a0:	dd38      	ble.n	8006a14 <_dtoa_r+0x474>
 80069a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80069a6:	2200      	movs	r2, #0
 80069a8:	4b69      	ldr	r3, [pc, #420]	; (8006b50 <_dtoa_r+0x5b0>)
 80069aa:	f7f9 fd95 	bl	80004d8 <__aeabi_dmul>
 80069ae:	464c      	mov	r4, r9
 80069b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069b4:	f10a 38ff 	add.w	r8, sl, #4294967295
 80069b8:	3701      	adds	r7, #1
 80069ba:	4638      	mov	r0, r7
 80069bc:	f7f9 fd22 	bl	8000404 <__aeabi_i2d>
 80069c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069c4:	f7f9 fd88 	bl	80004d8 <__aeabi_dmul>
 80069c8:	2200      	movs	r2, #0
 80069ca:	4b62      	ldr	r3, [pc, #392]	; (8006b54 <_dtoa_r+0x5b4>)
 80069cc:	f7f9 fbce 	bl	800016c <__adddf3>
 80069d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80069d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80069d8:	9611      	str	r6, [sp, #68]	; 0x44
 80069da:	2c00      	cmp	r4, #0
 80069dc:	d15d      	bne.n	8006a9a <_dtoa_r+0x4fa>
 80069de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069e2:	2200      	movs	r2, #0
 80069e4:	4b5c      	ldr	r3, [pc, #368]	; (8006b58 <_dtoa_r+0x5b8>)
 80069e6:	f7f9 fbbf 	bl	8000168 <__aeabi_dsub>
 80069ea:	4602      	mov	r2, r0
 80069ec:	460b      	mov	r3, r1
 80069ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80069f2:	4633      	mov	r3, r6
 80069f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80069f6:	f7f9 ffff 	bl	80009f8 <__aeabi_dcmpgt>
 80069fa:	2800      	cmp	r0, #0
 80069fc:	f040 829c 	bne.w	8006f38 <_dtoa_r+0x998>
 8006a00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006a06:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006a0a:	f7f9 ffd7 	bl	80009bc <__aeabi_dcmplt>
 8006a0e:	2800      	cmp	r0, #0
 8006a10:	f040 8290 	bne.w	8006f34 <_dtoa_r+0x994>
 8006a14:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006a18:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006a1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	f2c0 8152 	blt.w	8006cc8 <_dtoa_r+0x728>
 8006a24:	f1ba 0f0e 	cmp.w	sl, #14
 8006a28:	f300 814e 	bgt.w	8006cc8 <_dtoa_r+0x728>
 8006a2c:	4b45      	ldr	r3, [pc, #276]	; (8006b44 <_dtoa_r+0x5a4>)
 8006a2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006a32:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006a36:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006a3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f280 80db 	bge.w	8006bf8 <_dtoa_r+0x658>
 8006a42:	9b08      	ldr	r3, [sp, #32]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f300 80d7 	bgt.w	8006bf8 <_dtoa_r+0x658>
 8006a4a:	f040 8272 	bne.w	8006f32 <_dtoa_r+0x992>
 8006a4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a52:	2200      	movs	r2, #0
 8006a54:	4b40      	ldr	r3, [pc, #256]	; (8006b58 <_dtoa_r+0x5b8>)
 8006a56:	f7f9 fd3f 	bl	80004d8 <__aeabi_dmul>
 8006a5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a5e:	f7f9 ffc1 	bl	80009e4 <__aeabi_dcmpge>
 8006a62:	9c08      	ldr	r4, [sp, #32]
 8006a64:	4626      	mov	r6, r4
 8006a66:	2800      	cmp	r0, #0
 8006a68:	f040 8248 	bne.w	8006efc <_dtoa_r+0x95c>
 8006a6c:	2331      	movs	r3, #49	; 0x31
 8006a6e:	9f03      	ldr	r7, [sp, #12]
 8006a70:	f10a 0a01 	add.w	sl, sl, #1
 8006a74:	f807 3b01 	strb.w	r3, [r7], #1
 8006a78:	e244      	b.n	8006f04 <_dtoa_r+0x964>
 8006a7a:	07e2      	lsls	r2, r4, #31
 8006a7c:	d505      	bpl.n	8006a8a <_dtoa_r+0x4ea>
 8006a7e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006a82:	f7f9 fd29 	bl	80004d8 <__aeabi_dmul>
 8006a86:	2301      	movs	r3, #1
 8006a88:	3701      	adds	r7, #1
 8006a8a:	1064      	asrs	r4, r4, #1
 8006a8c:	3608      	adds	r6, #8
 8006a8e:	e76d      	b.n	800696c <_dtoa_r+0x3cc>
 8006a90:	2702      	movs	r7, #2
 8006a92:	e770      	b.n	8006976 <_dtoa_r+0x3d6>
 8006a94:	46d0      	mov	r8, sl
 8006a96:	9c08      	ldr	r4, [sp, #32]
 8006a98:	e78f      	b.n	80069ba <_dtoa_r+0x41a>
 8006a9a:	9903      	ldr	r1, [sp, #12]
 8006a9c:	4b29      	ldr	r3, [pc, #164]	; (8006b44 <_dtoa_r+0x5a4>)
 8006a9e:	4421      	add	r1, r4
 8006aa0:	9112      	str	r1, [sp, #72]	; 0x48
 8006aa2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006aa4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006aa8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006aac:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006ab0:	2900      	cmp	r1, #0
 8006ab2:	d055      	beq.n	8006b60 <_dtoa_r+0x5c0>
 8006ab4:	2000      	movs	r0, #0
 8006ab6:	4929      	ldr	r1, [pc, #164]	; (8006b5c <_dtoa_r+0x5bc>)
 8006ab8:	f7f9 fe38 	bl	800072c <__aeabi_ddiv>
 8006abc:	463b      	mov	r3, r7
 8006abe:	4632      	mov	r2, r6
 8006ac0:	f7f9 fb52 	bl	8000168 <__aeabi_dsub>
 8006ac4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006ac8:	9f03      	ldr	r7, [sp, #12]
 8006aca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ace:	f7f9 ffb3 	bl	8000a38 <__aeabi_d2iz>
 8006ad2:	4604      	mov	r4, r0
 8006ad4:	f7f9 fc96 	bl	8000404 <__aeabi_i2d>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	460b      	mov	r3, r1
 8006adc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ae0:	f7f9 fb42 	bl	8000168 <__aeabi_dsub>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	3430      	adds	r4, #48	; 0x30
 8006aea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006aee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006af2:	f807 4b01 	strb.w	r4, [r7], #1
 8006af6:	f7f9 ff61 	bl	80009bc <__aeabi_dcmplt>
 8006afa:	2800      	cmp	r0, #0
 8006afc:	d174      	bne.n	8006be8 <_dtoa_r+0x648>
 8006afe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b02:	2000      	movs	r0, #0
 8006b04:	4911      	ldr	r1, [pc, #68]	; (8006b4c <_dtoa_r+0x5ac>)
 8006b06:	f7f9 fb2f 	bl	8000168 <__aeabi_dsub>
 8006b0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006b0e:	f7f9 ff55 	bl	80009bc <__aeabi_dcmplt>
 8006b12:	2800      	cmp	r0, #0
 8006b14:	f040 80b7 	bne.w	8006c86 <_dtoa_r+0x6e6>
 8006b18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b1a:	429f      	cmp	r7, r3
 8006b1c:	f43f af7a 	beq.w	8006a14 <_dtoa_r+0x474>
 8006b20:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006b24:	2200      	movs	r2, #0
 8006b26:	4b0a      	ldr	r3, [pc, #40]	; (8006b50 <_dtoa_r+0x5b0>)
 8006b28:	f7f9 fcd6 	bl	80004d8 <__aeabi_dmul>
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006b32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b36:	4b06      	ldr	r3, [pc, #24]	; (8006b50 <_dtoa_r+0x5b0>)
 8006b38:	f7f9 fcce 	bl	80004d8 <__aeabi_dmul>
 8006b3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b40:	e7c3      	b.n	8006aca <_dtoa_r+0x52a>
 8006b42:	bf00      	nop
 8006b44:	080098e0 	.word	0x080098e0
 8006b48:	080098b8 	.word	0x080098b8
 8006b4c:	3ff00000 	.word	0x3ff00000
 8006b50:	40240000 	.word	0x40240000
 8006b54:	401c0000 	.word	0x401c0000
 8006b58:	40140000 	.word	0x40140000
 8006b5c:	3fe00000 	.word	0x3fe00000
 8006b60:	4630      	mov	r0, r6
 8006b62:	4639      	mov	r1, r7
 8006b64:	f7f9 fcb8 	bl	80004d8 <__aeabi_dmul>
 8006b68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b6a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006b6e:	9c03      	ldr	r4, [sp, #12]
 8006b70:	9314      	str	r3, [sp, #80]	; 0x50
 8006b72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b76:	f7f9 ff5f 	bl	8000a38 <__aeabi_d2iz>
 8006b7a:	9015      	str	r0, [sp, #84]	; 0x54
 8006b7c:	f7f9 fc42 	bl	8000404 <__aeabi_i2d>
 8006b80:	4602      	mov	r2, r0
 8006b82:	460b      	mov	r3, r1
 8006b84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b88:	f7f9 faee 	bl	8000168 <__aeabi_dsub>
 8006b8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b8e:	4606      	mov	r6, r0
 8006b90:	3330      	adds	r3, #48	; 0x30
 8006b92:	f804 3b01 	strb.w	r3, [r4], #1
 8006b96:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b98:	460f      	mov	r7, r1
 8006b9a:	429c      	cmp	r4, r3
 8006b9c:	f04f 0200 	mov.w	r2, #0
 8006ba0:	d124      	bne.n	8006bec <_dtoa_r+0x64c>
 8006ba2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006ba6:	4bb0      	ldr	r3, [pc, #704]	; (8006e68 <_dtoa_r+0x8c8>)
 8006ba8:	f7f9 fae0 	bl	800016c <__adddf3>
 8006bac:	4602      	mov	r2, r0
 8006bae:	460b      	mov	r3, r1
 8006bb0:	4630      	mov	r0, r6
 8006bb2:	4639      	mov	r1, r7
 8006bb4:	f7f9 ff20 	bl	80009f8 <__aeabi_dcmpgt>
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	d163      	bne.n	8006c84 <_dtoa_r+0x6e4>
 8006bbc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006bc0:	2000      	movs	r0, #0
 8006bc2:	49a9      	ldr	r1, [pc, #676]	; (8006e68 <_dtoa_r+0x8c8>)
 8006bc4:	f7f9 fad0 	bl	8000168 <__aeabi_dsub>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	460b      	mov	r3, r1
 8006bcc:	4630      	mov	r0, r6
 8006bce:	4639      	mov	r1, r7
 8006bd0:	f7f9 fef4 	bl	80009bc <__aeabi_dcmplt>
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	f43f af1d 	beq.w	8006a14 <_dtoa_r+0x474>
 8006bda:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006bdc:	1e7b      	subs	r3, r7, #1
 8006bde:	9314      	str	r3, [sp, #80]	; 0x50
 8006be0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006be4:	2b30      	cmp	r3, #48	; 0x30
 8006be6:	d0f8      	beq.n	8006bda <_dtoa_r+0x63a>
 8006be8:	46c2      	mov	sl, r8
 8006bea:	e03b      	b.n	8006c64 <_dtoa_r+0x6c4>
 8006bec:	4b9f      	ldr	r3, [pc, #636]	; (8006e6c <_dtoa_r+0x8cc>)
 8006bee:	f7f9 fc73 	bl	80004d8 <__aeabi_dmul>
 8006bf2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bf6:	e7bc      	b.n	8006b72 <_dtoa_r+0x5d2>
 8006bf8:	9f03      	ldr	r7, [sp, #12]
 8006bfa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006bfe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c02:	4640      	mov	r0, r8
 8006c04:	4649      	mov	r1, r9
 8006c06:	f7f9 fd91 	bl	800072c <__aeabi_ddiv>
 8006c0a:	f7f9 ff15 	bl	8000a38 <__aeabi_d2iz>
 8006c0e:	4604      	mov	r4, r0
 8006c10:	f7f9 fbf8 	bl	8000404 <__aeabi_i2d>
 8006c14:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c18:	f7f9 fc5e 	bl	80004d8 <__aeabi_dmul>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	460b      	mov	r3, r1
 8006c20:	4640      	mov	r0, r8
 8006c22:	4649      	mov	r1, r9
 8006c24:	f7f9 faa0 	bl	8000168 <__aeabi_dsub>
 8006c28:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006c2c:	f807 6b01 	strb.w	r6, [r7], #1
 8006c30:	9e03      	ldr	r6, [sp, #12]
 8006c32:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006c36:	1bbe      	subs	r6, r7, r6
 8006c38:	45b4      	cmp	ip, r6
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	d136      	bne.n	8006cae <_dtoa_r+0x70e>
 8006c40:	f7f9 fa94 	bl	800016c <__adddf3>
 8006c44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c48:	4680      	mov	r8, r0
 8006c4a:	4689      	mov	r9, r1
 8006c4c:	f7f9 fed4 	bl	80009f8 <__aeabi_dcmpgt>
 8006c50:	bb58      	cbnz	r0, 8006caa <_dtoa_r+0x70a>
 8006c52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c56:	4640      	mov	r0, r8
 8006c58:	4649      	mov	r1, r9
 8006c5a:	f7f9 fea5 	bl	80009a8 <__aeabi_dcmpeq>
 8006c5e:	b108      	cbz	r0, 8006c64 <_dtoa_r+0x6c4>
 8006c60:	07e1      	lsls	r1, r4, #31
 8006c62:	d422      	bmi.n	8006caa <_dtoa_r+0x70a>
 8006c64:	4628      	mov	r0, r5
 8006c66:	4659      	mov	r1, fp
 8006c68:	f000 fae2 	bl	8007230 <_Bfree>
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	703b      	strb	r3, [r7, #0]
 8006c70:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006c72:	f10a 0001 	add.w	r0, sl, #1
 8006c76:	6018      	str	r0, [r3, #0]
 8006c78:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	f43f acde 	beq.w	800663c <_dtoa_r+0x9c>
 8006c80:	601f      	str	r7, [r3, #0]
 8006c82:	e4db      	b.n	800663c <_dtoa_r+0x9c>
 8006c84:	4627      	mov	r7, r4
 8006c86:	463b      	mov	r3, r7
 8006c88:	461f      	mov	r7, r3
 8006c8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c8e:	2a39      	cmp	r2, #57	; 0x39
 8006c90:	d107      	bne.n	8006ca2 <_dtoa_r+0x702>
 8006c92:	9a03      	ldr	r2, [sp, #12]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d1f7      	bne.n	8006c88 <_dtoa_r+0x6e8>
 8006c98:	2230      	movs	r2, #48	; 0x30
 8006c9a:	9903      	ldr	r1, [sp, #12]
 8006c9c:	f108 0801 	add.w	r8, r8, #1
 8006ca0:	700a      	strb	r2, [r1, #0]
 8006ca2:	781a      	ldrb	r2, [r3, #0]
 8006ca4:	3201      	adds	r2, #1
 8006ca6:	701a      	strb	r2, [r3, #0]
 8006ca8:	e79e      	b.n	8006be8 <_dtoa_r+0x648>
 8006caa:	46d0      	mov	r8, sl
 8006cac:	e7eb      	b.n	8006c86 <_dtoa_r+0x6e6>
 8006cae:	2200      	movs	r2, #0
 8006cb0:	4b6e      	ldr	r3, [pc, #440]	; (8006e6c <_dtoa_r+0x8cc>)
 8006cb2:	f7f9 fc11 	bl	80004d8 <__aeabi_dmul>
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	2300      	movs	r3, #0
 8006cba:	4680      	mov	r8, r0
 8006cbc:	4689      	mov	r9, r1
 8006cbe:	f7f9 fe73 	bl	80009a8 <__aeabi_dcmpeq>
 8006cc2:	2800      	cmp	r0, #0
 8006cc4:	d09b      	beq.n	8006bfe <_dtoa_r+0x65e>
 8006cc6:	e7cd      	b.n	8006c64 <_dtoa_r+0x6c4>
 8006cc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006cca:	2a00      	cmp	r2, #0
 8006ccc:	f000 80d0 	beq.w	8006e70 <_dtoa_r+0x8d0>
 8006cd0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006cd2:	2a01      	cmp	r2, #1
 8006cd4:	f300 80ae 	bgt.w	8006e34 <_dtoa_r+0x894>
 8006cd8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006cda:	2a00      	cmp	r2, #0
 8006cdc:	f000 80a6 	beq.w	8006e2c <_dtoa_r+0x88c>
 8006ce0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006ce4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006ce6:	9f06      	ldr	r7, [sp, #24]
 8006ce8:	9a06      	ldr	r2, [sp, #24]
 8006cea:	2101      	movs	r1, #1
 8006cec:	441a      	add	r2, r3
 8006cee:	9206      	str	r2, [sp, #24]
 8006cf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	441a      	add	r2, r3
 8006cf6:	9209      	str	r2, [sp, #36]	; 0x24
 8006cf8:	f000 fb50 	bl	800739c <__i2b>
 8006cfc:	4606      	mov	r6, r0
 8006cfe:	2f00      	cmp	r7, #0
 8006d00:	dd0c      	ble.n	8006d1c <_dtoa_r+0x77c>
 8006d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	dd09      	ble.n	8006d1c <_dtoa_r+0x77c>
 8006d08:	42bb      	cmp	r3, r7
 8006d0a:	bfa8      	it	ge
 8006d0c:	463b      	movge	r3, r7
 8006d0e:	9a06      	ldr	r2, [sp, #24]
 8006d10:	1aff      	subs	r7, r7, r3
 8006d12:	1ad2      	subs	r2, r2, r3
 8006d14:	9206      	str	r2, [sp, #24]
 8006d16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d1e:	b1f3      	cbz	r3, 8006d5e <_dtoa_r+0x7be>
 8006d20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f000 80a8 	beq.w	8006e78 <_dtoa_r+0x8d8>
 8006d28:	2c00      	cmp	r4, #0
 8006d2a:	dd10      	ble.n	8006d4e <_dtoa_r+0x7ae>
 8006d2c:	4631      	mov	r1, r6
 8006d2e:	4622      	mov	r2, r4
 8006d30:	4628      	mov	r0, r5
 8006d32:	f000 fbf1 	bl	8007518 <__pow5mult>
 8006d36:	465a      	mov	r2, fp
 8006d38:	4601      	mov	r1, r0
 8006d3a:	4606      	mov	r6, r0
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	f000 fb43 	bl	80073c8 <__multiply>
 8006d42:	4680      	mov	r8, r0
 8006d44:	4659      	mov	r1, fp
 8006d46:	4628      	mov	r0, r5
 8006d48:	f000 fa72 	bl	8007230 <_Bfree>
 8006d4c:	46c3      	mov	fp, r8
 8006d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d50:	1b1a      	subs	r2, r3, r4
 8006d52:	d004      	beq.n	8006d5e <_dtoa_r+0x7be>
 8006d54:	4659      	mov	r1, fp
 8006d56:	4628      	mov	r0, r5
 8006d58:	f000 fbde 	bl	8007518 <__pow5mult>
 8006d5c:	4683      	mov	fp, r0
 8006d5e:	2101      	movs	r1, #1
 8006d60:	4628      	mov	r0, r5
 8006d62:	f000 fb1b 	bl	800739c <__i2b>
 8006d66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d68:	4604      	mov	r4, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f340 8086 	ble.w	8006e7c <_dtoa_r+0x8dc>
 8006d70:	461a      	mov	r2, r3
 8006d72:	4601      	mov	r1, r0
 8006d74:	4628      	mov	r0, r5
 8006d76:	f000 fbcf 	bl	8007518 <__pow5mult>
 8006d7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d7c:	4604      	mov	r4, r0
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	dd7f      	ble.n	8006e82 <_dtoa_r+0x8e2>
 8006d82:	f04f 0800 	mov.w	r8, #0
 8006d86:	6923      	ldr	r3, [r4, #16]
 8006d88:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006d8c:	6918      	ldr	r0, [r3, #16]
 8006d8e:	f000 fab7 	bl	8007300 <__hi0bits>
 8006d92:	f1c0 0020 	rsb	r0, r0, #32
 8006d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d98:	4418      	add	r0, r3
 8006d9a:	f010 001f 	ands.w	r0, r0, #31
 8006d9e:	f000 8092 	beq.w	8006ec6 <_dtoa_r+0x926>
 8006da2:	f1c0 0320 	rsb	r3, r0, #32
 8006da6:	2b04      	cmp	r3, #4
 8006da8:	f340 808a 	ble.w	8006ec0 <_dtoa_r+0x920>
 8006dac:	f1c0 001c 	rsb	r0, r0, #28
 8006db0:	9b06      	ldr	r3, [sp, #24]
 8006db2:	4407      	add	r7, r0
 8006db4:	4403      	add	r3, r0
 8006db6:	9306      	str	r3, [sp, #24]
 8006db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dba:	4403      	add	r3, r0
 8006dbc:	9309      	str	r3, [sp, #36]	; 0x24
 8006dbe:	9b06      	ldr	r3, [sp, #24]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	dd05      	ble.n	8006dd0 <_dtoa_r+0x830>
 8006dc4:	4659      	mov	r1, fp
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	4628      	mov	r0, r5
 8006dca:	f000 fbff 	bl	80075cc <__lshift>
 8006dce:	4683      	mov	fp, r0
 8006dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	dd05      	ble.n	8006de2 <_dtoa_r+0x842>
 8006dd6:	4621      	mov	r1, r4
 8006dd8:	461a      	mov	r2, r3
 8006dda:	4628      	mov	r0, r5
 8006ddc:	f000 fbf6 	bl	80075cc <__lshift>
 8006de0:	4604      	mov	r4, r0
 8006de2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d070      	beq.n	8006eca <_dtoa_r+0x92a>
 8006de8:	4621      	mov	r1, r4
 8006dea:	4658      	mov	r0, fp
 8006dec:	f000 fc5e 	bl	80076ac <__mcmp>
 8006df0:	2800      	cmp	r0, #0
 8006df2:	da6a      	bge.n	8006eca <_dtoa_r+0x92a>
 8006df4:	2300      	movs	r3, #0
 8006df6:	4659      	mov	r1, fp
 8006df8:	220a      	movs	r2, #10
 8006dfa:	4628      	mov	r0, r5
 8006dfc:	f000 fa3a 	bl	8007274 <__multadd>
 8006e00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e02:	4683      	mov	fp, r0
 8006e04:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f000 8194 	beq.w	8007136 <_dtoa_r+0xb96>
 8006e0e:	4631      	mov	r1, r6
 8006e10:	2300      	movs	r3, #0
 8006e12:	220a      	movs	r2, #10
 8006e14:	4628      	mov	r0, r5
 8006e16:	f000 fa2d 	bl	8007274 <__multadd>
 8006e1a:	f1b9 0f00 	cmp.w	r9, #0
 8006e1e:	4606      	mov	r6, r0
 8006e20:	f300 8093 	bgt.w	8006f4a <_dtoa_r+0x9aa>
 8006e24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	dc57      	bgt.n	8006eda <_dtoa_r+0x93a>
 8006e2a:	e08e      	b.n	8006f4a <_dtoa_r+0x9aa>
 8006e2c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006e2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006e32:	e757      	b.n	8006ce4 <_dtoa_r+0x744>
 8006e34:	9b08      	ldr	r3, [sp, #32]
 8006e36:	1e5c      	subs	r4, r3, #1
 8006e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e3a:	42a3      	cmp	r3, r4
 8006e3c:	bfb7      	itett	lt
 8006e3e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006e40:	1b1c      	subge	r4, r3, r4
 8006e42:	1ae2      	sublt	r2, r4, r3
 8006e44:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006e46:	bfbe      	ittt	lt
 8006e48:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006e4a:	189b      	addlt	r3, r3, r2
 8006e4c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006e4e:	9b08      	ldr	r3, [sp, #32]
 8006e50:	bfb8      	it	lt
 8006e52:	2400      	movlt	r4, #0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	bfbb      	ittet	lt
 8006e58:	9b06      	ldrlt	r3, [sp, #24]
 8006e5a:	9a08      	ldrlt	r2, [sp, #32]
 8006e5c:	9f06      	ldrge	r7, [sp, #24]
 8006e5e:	1a9f      	sublt	r7, r3, r2
 8006e60:	bfac      	ite	ge
 8006e62:	9b08      	ldrge	r3, [sp, #32]
 8006e64:	2300      	movlt	r3, #0
 8006e66:	e73f      	b.n	8006ce8 <_dtoa_r+0x748>
 8006e68:	3fe00000 	.word	0x3fe00000
 8006e6c:	40240000 	.word	0x40240000
 8006e70:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006e72:	9f06      	ldr	r7, [sp, #24]
 8006e74:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006e76:	e742      	b.n	8006cfe <_dtoa_r+0x75e>
 8006e78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e7a:	e76b      	b.n	8006d54 <_dtoa_r+0x7b4>
 8006e7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	dc19      	bgt.n	8006eb6 <_dtoa_r+0x916>
 8006e82:	9b04      	ldr	r3, [sp, #16]
 8006e84:	b9bb      	cbnz	r3, 8006eb6 <_dtoa_r+0x916>
 8006e86:	9b05      	ldr	r3, [sp, #20]
 8006e88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e8c:	b99b      	cbnz	r3, 8006eb6 <_dtoa_r+0x916>
 8006e8e:	9b05      	ldr	r3, [sp, #20]
 8006e90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e94:	0d1b      	lsrs	r3, r3, #20
 8006e96:	051b      	lsls	r3, r3, #20
 8006e98:	b183      	cbz	r3, 8006ebc <_dtoa_r+0x91c>
 8006e9a:	f04f 0801 	mov.w	r8, #1
 8006e9e:	9b06      	ldr	r3, [sp, #24]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	9306      	str	r3, [sp, #24]
 8006ea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	9309      	str	r3, [sp, #36]	; 0x24
 8006eaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	f47f af6a 	bne.w	8006d86 <_dtoa_r+0x7e6>
 8006eb2:	2001      	movs	r0, #1
 8006eb4:	e76f      	b.n	8006d96 <_dtoa_r+0x7f6>
 8006eb6:	f04f 0800 	mov.w	r8, #0
 8006eba:	e7f6      	b.n	8006eaa <_dtoa_r+0x90a>
 8006ebc:	4698      	mov	r8, r3
 8006ebe:	e7f4      	b.n	8006eaa <_dtoa_r+0x90a>
 8006ec0:	f43f af7d 	beq.w	8006dbe <_dtoa_r+0x81e>
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	301c      	adds	r0, #28
 8006ec8:	e772      	b.n	8006db0 <_dtoa_r+0x810>
 8006eca:	9b08      	ldr	r3, [sp, #32]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	dc36      	bgt.n	8006f3e <_dtoa_r+0x99e>
 8006ed0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	dd33      	ble.n	8006f3e <_dtoa_r+0x99e>
 8006ed6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006eda:	f1b9 0f00 	cmp.w	r9, #0
 8006ede:	d10d      	bne.n	8006efc <_dtoa_r+0x95c>
 8006ee0:	4621      	mov	r1, r4
 8006ee2:	464b      	mov	r3, r9
 8006ee4:	2205      	movs	r2, #5
 8006ee6:	4628      	mov	r0, r5
 8006ee8:	f000 f9c4 	bl	8007274 <__multadd>
 8006eec:	4601      	mov	r1, r0
 8006eee:	4604      	mov	r4, r0
 8006ef0:	4658      	mov	r0, fp
 8006ef2:	f000 fbdb 	bl	80076ac <__mcmp>
 8006ef6:	2800      	cmp	r0, #0
 8006ef8:	f73f adb8 	bgt.w	8006a6c <_dtoa_r+0x4cc>
 8006efc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006efe:	9f03      	ldr	r7, [sp, #12]
 8006f00:	ea6f 0a03 	mvn.w	sl, r3
 8006f04:	f04f 0800 	mov.w	r8, #0
 8006f08:	4621      	mov	r1, r4
 8006f0a:	4628      	mov	r0, r5
 8006f0c:	f000 f990 	bl	8007230 <_Bfree>
 8006f10:	2e00      	cmp	r6, #0
 8006f12:	f43f aea7 	beq.w	8006c64 <_dtoa_r+0x6c4>
 8006f16:	f1b8 0f00 	cmp.w	r8, #0
 8006f1a:	d005      	beq.n	8006f28 <_dtoa_r+0x988>
 8006f1c:	45b0      	cmp	r8, r6
 8006f1e:	d003      	beq.n	8006f28 <_dtoa_r+0x988>
 8006f20:	4641      	mov	r1, r8
 8006f22:	4628      	mov	r0, r5
 8006f24:	f000 f984 	bl	8007230 <_Bfree>
 8006f28:	4631      	mov	r1, r6
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	f000 f980 	bl	8007230 <_Bfree>
 8006f30:	e698      	b.n	8006c64 <_dtoa_r+0x6c4>
 8006f32:	2400      	movs	r4, #0
 8006f34:	4626      	mov	r6, r4
 8006f36:	e7e1      	b.n	8006efc <_dtoa_r+0x95c>
 8006f38:	46c2      	mov	sl, r8
 8006f3a:	4626      	mov	r6, r4
 8006f3c:	e596      	b.n	8006a6c <_dtoa_r+0x4cc>
 8006f3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f000 80fd 	beq.w	8007144 <_dtoa_r+0xba4>
 8006f4a:	2f00      	cmp	r7, #0
 8006f4c:	dd05      	ble.n	8006f5a <_dtoa_r+0x9ba>
 8006f4e:	4631      	mov	r1, r6
 8006f50:	463a      	mov	r2, r7
 8006f52:	4628      	mov	r0, r5
 8006f54:	f000 fb3a 	bl	80075cc <__lshift>
 8006f58:	4606      	mov	r6, r0
 8006f5a:	f1b8 0f00 	cmp.w	r8, #0
 8006f5e:	d05c      	beq.n	800701a <_dtoa_r+0xa7a>
 8006f60:	4628      	mov	r0, r5
 8006f62:	6871      	ldr	r1, [r6, #4]
 8006f64:	f000 f924 	bl	80071b0 <_Balloc>
 8006f68:	4607      	mov	r7, r0
 8006f6a:	b928      	cbnz	r0, 8006f78 <_dtoa_r+0x9d8>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006f72:	4b7f      	ldr	r3, [pc, #508]	; (8007170 <_dtoa_r+0xbd0>)
 8006f74:	f7ff bb28 	b.w	80065c8 <_dtoa_r+0x28>
 8006f78:	6932      	ldr	r2, [r6, #16]
 8006f7a:	f106 010c 	add.w	r1, r6, #12
 8006f7e:	3202      	adds	r2, #2
 8006f80:	0092      	lsls	r2, r2, #2
 8006f82:	300c      	adds	r0, #12
 8006f84:	f7fe fde8 	bl	8005b58 <memcpy>
 8006f88:	2201      	movs	r2, #1
 8006f8a:	4639      	mov	r1, r7
 8006f8c:	4628      	mov	r0, r5
 8006f8e:	f000 fb1d 	bl	80075cc <__lshift>
 8006f92:	46b0      	mov	r8, r6
 8006f94:	4606      	mov	r6, r0
 8006f96:	9b03      	ldr	r3, [sp, #12]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	9308      	str	r3, [sp, #32]
 8006f9c:	9b03      	ldr	r3, [sp, #12]
 8006f9e:	444b      	add	r3, r9
 8006fa0:	930a      	str	r3, [sp, #40]	; 0x28
 8006fa2:	9b04      	ldr	r3, [sp, #16]
 8006fa4:	f003 0301 	and.w	r3, r3, #1
 8006fa8:	9309      	str	r3, [sp, #36]	; 0x24
 8006faa:	9b08      	ldr	r3, [sp, #32]
 8006fac:	4621      	mov	r1, r4
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	4658      	mov	r0, fp
 8006fb2:	9304      	str	r3, [sp, #16]
 8006fb4:	f7ff fa66 	bl	8006484 <quorem>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	4641      	mov	r1, r8
 8006fbc:	3330      	adds	r3, #48	; 0x30
 8006fbe:	9006      	str	r0, [sp, #24]
 8006fc0:	4658      	mov	r0, fp
 8006fc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8006fc4:	f000 fb72 	bl	80076ac <__mcmp>
 8006fc8:	4632      	mov	r2, r6
 8006fca:	4681      	mov	r9, r0
 8006fcc:	4621      	mov	r1, r4
 8006fce:	4628      	mov	r0, r5
 8006fd0:	f000 fb88 	bl	80076e4 <__mdiff>
 8006fd4:	68c2      	ldr	r2, [r0, #12]
 8006fd6:	4607      	mov	r7, r0
 8006fd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fda:	bb02      	cbnz	r2, 800701e <_dtoa_r+0xa7e>
 8006fdc:	4601      	mov	r1, r0
 8006fde:	4658      	mov	r0, fp
 8006fe0:	f000 fb64 	bl	80076ac <__mcmp>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fe8:	4639      	mov	r1, r7
 8006fea:	4628      	mov	r0, r5
 8006fec:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006ff0:	f000 f91e 	bl	8007230 <_Bfree>
 8006ff4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ff6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ff8:	9f08      	ldr	r7, [sp, #32]
 8006ffa:	ea43 0102 	orr.w	r1, r3, r2
 8006ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007000:	430b      	orrs	r3, r1
 8007002:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007004:	d10d      	bne.n	8007022 <_dtoa_r+0xa82>
 8007006:	2b39      	cmp	r3, #57	; 0x39
 8007008:	d029      	beq.n	800705e <_dtoa_r+0xabe>
 800700a:	f1b9 0f00 	cmp.w	r9, #0
 800700e:	dd01      	ble.n	8007014 <_dtoa_r+0xa74>
 8007010:	9b06      	ldr	r3, [sp, #24]
 8007012:	3331      	adds	r3, #49	; 0x31
 8007014:	9a04      	ldr	r2, [sp, #16]
 8007016:	7013      	strb	r3, [r2, #0]
 8007018:	e776      	b.n	8006f08 <_dtoa_r+0x968>
 800701a:	4630      	mov	r0, r6
 800701c:	e7b9      	b.n	8006f92 <_dtoa_r+0x9f2>
 800701e:	2201      	movs	r2, #1
 8007020:	e7e2      	b.n	8006fe8 <_dtoa_r+0xa48>
 8007022:	f1b9 0f00 	cmp.w	r9, #0
 8007026:	db06      	blt.n	8007036 <_dtoa_r+0xa96>
 8007028:	9922      	ldr	r1, [sp, #136]	; 0x88
 800702a:	ea41 0909 	orr.w	r9, r1, r9
 800702e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007030:	ea59 0101 	orrs.w	r1, r9, r1
 8007034:	d120      	bne.n	8007078 <_dtoa_r+0xad8>
 8007036:	2a00      	cmp	r2, #0
 8007038:	ddec      	ble.n	8007014 <_dtoa_r+0xa74>
 800703a:	4659      	mov	r1, fp
 800703c:	2201      	movs	r2, #1
 800703e:	4628      	mov	r0, r5
 8007040:	9308      	str	r3, [sp, #32]
 8007042:	f000 fac3 	bl	80075cc <__lshift>
 8007046:	4621      	mov	r1, r4
 8007048:	4683      	mov	fp, r0
 800704a:	f000 fb2f 	bl	80076ac <__mcmp>
 800704e:	2800      	cmp	r0, #0
 8007050:	9b08      	ldr	r3, [sp, #32]
 8007052:	dc02      	bgt.n	800705a <_dtoa_r+0xaba>
 8007054:	d1de      	bne.n	8007014 <_dtoa_r+0xa74>
 8007056:	07da      	lsls	r2, r3, #31
 8007058:	d5dc      	bpl.n	8007014 <_dtoa_r+0xa74>
 800705a:	2b39      	cmp	r3, #57	; 0x39
 800705c:	d1d8      	bne.n	8007010 <_dtoa_r+0xa70>
 800705e:	2339      	movs	r3, #57	; 0x39
 8007060:	9a04      	ldr	r2, [sp, #16]
 8007062:	7013      	strb	r3, [r2, #0]
 8007064:	463b      	mov	r3, r7
 8007066:	461f      	mov	r7, r3
 8007068:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800706c:	3b01      	subs	r3, #1
 800706e:	2a39      	cmp	r2, #57	; 0x39
 8007070:	d050      	beq.n	8007114 <_dtoa_r+0xb74>
 8007072:	3201      	adds	r2, #1
 8007074:	701a      	strb	r2, [r3, #0]
 8007076:	e747      	b.n	8006f08 <_dtoa_r+0x968>
 8007078:	2a00      	cmp	r2, #0
 800707a:	dd03      	ble.n	8007084 <_dtoa_r+0xae4>
 800707c:	2b39      	cmp	r3, #57	; 0x39
 800707e:	d0ee      	beq.n	800705e <_dtoa_r+0xabe>
 8007080:	3301      	adds	r3, #1
 8007082:	e7c7      	b.n	8007014 <_dtoa_r+0xa74>
 8007084:	9a08      	ldr	r2, [sp, #32]
 8007086:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007088:	f802 3c01 	strb.w	r3, [r2, #-1]
 800708c:	428a      	cmp	r2, r1
 800708e:	d02a      	beq.n	80070e6 <_dtoa_r+0xb46>
 8007090:	4659      	mov	r1, fp
 8007092:	2300      	movs	r3, #0
 8007094:	220a      	movs	r2, #10
 8007096:	4628      	mov	r0, r5
 8007098:	f000 f8ec 	bl	8007274 <__multadd>
 800709c:	45b0      	cmp	r8, r6
 800709e:	4683      	mov	fp, r0
 80070a0:	f04f 0300 	mov.w	r3, #0
 80070a4:	f04f 020a 	mov.w	r2, #10
 80070a8:	4641      	mov	r1, r8
 80070aa:	4628      	mov	r0, r5
 80070ac:	d107      	bne.n	80070be <_dtoa_r+0xb1e>
 80070ae:	f000 f8e1 	bl	8007274 <__multadd>
 80070b2:	4680      	mov	r8, r0
 80070b4:	4606      	mov	r6, r0
 80070b6:	9b08      	ldr	r3, [sp, #32]
 80070b8:	3301      	adds	r3, #1
 80070ba:	9308      	str	r3, [sp, #32]
 80070bc:	e775      	b.n	8006faa <_dtoa_r+0xa0a>
 80070be:	f000 f8d9 	bl	8007274 <__multadd>
 80070c2:	4631      	mov	r1, r6
 80070c4:	4680      	mov	r8, r0
 80070c6:	2300      	movs	r3, #0
 80070c8:	220a      	movs	r2, #10
 80070ca:	4628      	mov	r0, r5
 80070cc:	f000 f8d2 	bl	8007274 <__multadd>
 80070d0:	4606      	mov	r6, r0
 80070d2:	e7f0      	b.n	80070b6 <_dtoa_r+0xb16>
 80070d4:	f1b9 0f00 	cmp.w	r9, #0
 80070d8:	bfcc      	ite	gt
 80070da:	464f      	movgt	r7, r9
 80070dc:	2701      	movle	r7, #1
 80070de:	f04f 0800 	mov.w	r8, #0
 80070e2:	9a03      	ldr	r2, [sp, #12]
 80070e4:	4417      	add	r7, r2
 80070e6:	4659      	mov	r1, fp
 80070e8:	2201      	movs	r2, #1
 80070ea:	4628      	mov	r0, r5
 80070ec:	9308      	str	r3, [sp, #32]
 80070ee:	f000 fa6d 	bl	80075cc <__lshift>
 80070f2:	4621      	mov	r1, r4
 80070f4:	4683      	mov	fp, r0
 80070f6:	f000 fad9 	bl	80076ac <__mcmp>
 80070fa:	2800      	cmp	r0, #0
 80070fc:	dcb2      	bgt.n	8007064 <_dtoa_r+0xac4>
 80070fe:	d102      	bne.n	8007106 <_dtoa_r+0xb66>
 8007100:	9b08      	ldr	r3, [sp, #32]
 8007102:	07db      	lsls	r3, r3, #31
 8007104:	d4ae      	bmi.n	8007064 <_dtoa_r+0xac4>
 8007106:	463b      	mov	r3, r7
 8007108:	461f      	mov	r7, r3
 800710a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800710e:	2a30      	cmp	r2, #48	; 0x30
 8007110:	d0fa      	beq.n	8007108 <_dtoa_r+0xb68>
 8007112:	e6f9      	b.n	8006f08 <_dtoa_r+0x968>
 8007114:	9a03      	ldr	r2, [sp, #12]
 8007116:	429a      	cmp	r2, r3
 8007118:	d1a5      	bne.n	8007066 <_dtoa_r+0xac6>
 800711a:	2331      	movs	r3, #49	; 0x31
 800711c:	f10a 0a01 	add.w	sl, sl, #1
 8007120:	e779      	b.n	8007016 <_dtoa_r+0xa76>
 8007122:	4b14      	ldr	r3, [pc, #80]	; (8007174 <_dtoa_r+0xbd4>)
 8007124:	f7ff baa8 	b.w	8006678 <_dtoa_r+0xd8>
 8007128:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800712a:	2b00      	cmp	r3, #0
 800712c:	f47f aa81 	bne.w	8006632 <_dtoa_r+0x92>
 8007130:	4b11      	ldr	r3, [pc, #68]	; (8007178 <_dtoa_r+0xbd8>)
 8007132:	f7ff baa1 	b.w	8006678 <_dtoa_r+0xd8>
 8007136:	f1b9 0f00 	cmp.w	r9, #0
 800713a:	dc03      	bgt.n	8007144 <_dtoa_r+0xba4>
 800713c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800713e:	2b02      	cmp	r3, #2
 8007140:	f73f aecb 	bgt.w	8006eda <_dtoa_r+0x93a>
 8007144:	9f03      	ldr	r7, [sp, #12]
 8007146:	4621      	mov	r1, r4
 8007148:	4658      	mov	r0, fp
 800714a:	f7ff f99b 	bl	8006484 <quorem>
 800714e:	9a03      	ldr	r2, [sp, #12]
 8007150:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007154:	f807 3b01 	strb.w	r3, [r7], #1
 8007158:	1aba      	subs	r2, r7, r2
 800715a:	4591      	cmp	r9, r2
 800715c:	ddba      	ble.n	80070d4 <_dtoa_r+0xb34>
 800715e:	4659      	mov	r1, fp
 8007160:	2300      	movs	r3, #0
 8007162:	220a      	movs	r2, #10
 8007164:	4628      	mov	r0, r5
 8007166:	f000 f885 	bl	8007274 <__multadd>
 800716a:	4683      	mov	fp, r0
 800716c:	e7eb      	b.n	8007146 <_dtoa_r+0xba6>
 800716e:	bf00      	nop
 8007170:	08009847 	.word	0x08009847
 8007174:	080097a4 	.word	0x080097a4
 8007178:	080097c8 	.word	0x080097c8

0800717c <_localeconv_r>:
 800717c:	4800      	ldr	r0, [pc, #0]	; (8007180 <_localeconv_r+0x4>)
 800717e:	4770      	bx	lr
 8007180:	200002dc 	.word	0x200002dc

08007184 <malloc>:
 8007184:	4b02      	ldr	r3, [pc, #8]	; (8007190 <malloc+0xc>)
 8007186:	4601      	mov	r1, r0
 8007188:	6818      	ldr	r0, [r3, #0]
 800718a:	f000 bc0f 	b.w	80079ac <_malloc_r>
 800718e:	bf00      	nop
 8007190:	20000188 	.word	0x20000188

08007194 <memchr>:
 8007194:	4603      	mov	r3, r0
 8007196:	b510      	push	{r4, lr}
 8007198:	b2c9      	uxtb	r1, r1
 800719a:	4402      	add	r2, r0
 800719c:	4293      	cmp	r3, r2
 800719e:	4618      	mov	r0, r3
 80071a0:	d101      	bne.n	80071a6 <memchr+0x12>
 80071a2:	2000      	movs	r0, #0
 80071a4:	e003      	b.n	80071ae <memchr+0x1a>
 80071a6:	7804      	ldrb	r4, [r0, #0]
 80071a8:	3301      	adds	r3, #1
 80071aa:	428c      	cmp	r4, r1
 80071ac:	d1f6      	bne.n	800719c <memchr+0x8>
 80071ae:	bd10      	pop	{r4, pc}

080071b0 <_Balloc>:
 80071b0:	b570      	push	{r4, r5, r6, lr}
 80071b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80071b4:	4604      	mov	r4, r0
 80071b6:	460d      	mov	r5, r1
 80071b8:	b976      	cbnz	r6, 80071d8 <_Balloc+0x28>
 80071ba:	2010      	movs	r0, #16
 80071bc:	f7ff ffe2 	bl	8007184 <malloc>
 80071c0:	4602      	mov	r2, r0
 80071c2:	6260      	str	r0, [r4, #36]	; 0x24
 80071c4:	b920      	cbnz	r0, 80071d0 <_Balloc+0x20>
 80071c6:	2166      	movs	r1, #102	; 0x66
 80071c8:	4b17      	ldr	r3, [pc, #92]	; (8007228 <_Balloc+0x78>)
 80071ca:	4818      	ldr	r0, [pc, #96]	; (800722c <_Balloc+0x7c>)
 80071cc:	f000 fdce 	bl	8007d6c <__assert_func>
 80071d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071d4:	6006      	str	r6, [r0, #0]
 80071d6:	60c6      	str	r6, [r0, #12]
 80071d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80071da:	68f3      	ldr	r3, [r6, #12]
 80071dc:	b183      	cbz	r3, 8007200 <_Balloc+0x50>
 80071de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80071e6:	b9b8      	cbnz	r0, 8007218 <_Balloc+0x68>
 80071e8:	2101      	movs	r1, #1
 80071ea:	fa01 f605 	lsl.w	r6, r1, r5
 80071ee:	1d72      	adds	r2, r6, #5
 80071f0:	4620      	mov	r0, r4
 80071f2:	0092      	lsls	r2, r2, #2
 80071f4:	f000 fb5e 	bl	80078b4 <_calloc_r>
 80071f8:	b160      	cbz	r0, 8007214 <_Balloc+0x64>
 80071fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80071fe:	e00e      	b.n	800721e <_Balloc+0x6e>
 8007200:	2221      	movs	r2, #33	; 0x21
 8007202:	2104      	movs	r1, #4
 8007204:	4620      	mov	r0, r4
 8007206:	f000 fb55 	bl	80078b4 <_calloc_r>
 800720a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800720c:	60f0      	str	r0, [r6, #12]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1e4      	bne.n	80071de <_Balloc+0x2e>
 8007214:	2000      	movs	r0, #0
 8007216:	bd70      	pop	{r4, r5, r6, pc}
 8007218:	6802      	ldr	r2, [r0, #0]
 800721a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800721e:	2300      	movs	r3, #0
 8007220:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007224:	e7f7      	b.n	8007216 <_Balloc+0x66>
 8007226:	bf00      	nop
 8007228:	080097d5 	.word	0x080097d5
 800722c:	08009858 	.word	0x08009858

08007230 <_Bfree>:
 8007230:	b570      	push	{r4, r5, r6, lr}
 8007232:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007234:	4605      	mov	r5, r0
 8007236:	460c      	mov	r4, r1
 8007238:	b976      	cbnz	r6, 8007258 <_Bfree+0x28>
 800723a:	2010      	movs	r0, #16
 800723c:	f7ff ffa2 	bl	8007184 <malloc>
 8007240:	4602      	mov	r2, r0
 8007242:	6268      	str	r0, [r5, #36]	; 0x24
 8007244:	b920      	cbnz	r0, 8007250 <_Bfree+0x20>
 8007246:	218a      	movs	r1, #138	; 0x8a
 8007248:	4b08      	ldr	r3, [pc, #32]	; (800726c <_Bfree+0x3c>)
 800724a:	4809      	ldr	r0, [pc, #36]	; (8007270 <_Bfree+0x40>)
 800724c:	f000 fd8e 	bl	8007d6c <__assert_func>
 8007250:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007254:	6006      	str	r6, [r0, #0]
 8007256:	60c6      	str	r6, [r0, #12]
 8007258:	b13c      	cbz	r4, 800726a <_Bfree+0x3a>
 800725a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800725c:	6862      	ldr	r2, [r4, #4]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007264:	6021      	str	r1, [r4, #0]
 8007266:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800726a:	bd70      	pop	{r4, r5, r6, pc}
 800726c:	080097d5 	.word	0x080097d5
 8007270:	08009858 	.word	0x08009858

08007274 <__multadd>:
 8007274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007278:	4607      	mov	r7, r0
 800727a:	460c      	mov	r4, r1
 800727c:	461e      	mov	r6, r3
 800727e:	2000      	movs	r0, #0
 8007280:	690d      	ldr	r5, [r1, #16]
 8007282:	f101 0c14 	add.w	ip, r1, #20
 8007286:	f8dc 3000 	ldr.w	r3, [ip]
 800728a:	3001      	adds	r0, #1
 800728c:	b299      	uxth	r1, r3
 800728e:	fb02 6101 	mla	r1, r2, r1, r6
 8007292:	0c1e      	lsrs	r6, r3, #16
 8007294:	0c0b      	lsrs	r3, r1, #16
 8007296:	fb02 3306 	mla	r3, r2, r6, r3
 800729a:	b289      	uxth	r1, r1
 800729c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80072a0:	4285      	cmp	r5, r0
 80072a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80072a6:	f84c 1b04 	str.w	r1, [ip], #4
 80072aa:	dcec      	bgt.n	8007286 <__multadd+0x12>
 80072ac:	b30e      	cbz	r6, 80072f2 <__multadd+0x7e>
 80072ae:	68a3      	ldr	r3, [r4, #8]
 80072b0:	42ab      	cmp	r3, r5
 80072b2:	dc19      	bgt.n	80072e8 <__multadd+0x74>
 80072b4:	6861      	ldr	r1, [r4, #4]
 80072b6:	4638      	mov	r0, r7
 80072b8:	3101      	adds	r1, #1
 80072ba:	f7ff ff79 	bl	80071b0 <_Balloc>
 80072be:	4680      	mov	r8, r0
 80072c0:	b928      	cbnz	r0, 80072ce <__multadd+0x5a>
 80072c2:	4602      	mov	r2, r0
 80072c4:	21b5      	movs	r1, #181	; 0xb5
 80072c6:	4b0c      	ldr	r3, [pc, #48]	; (80072f8 <__multadd+0x84>)
 80072c8:	480c      	ldr	r0, [pc, #48]	; (80072fc <__multadd+0x88>)
 80072ca:	f000 fd4f 	bl	8007d6c <__assert_func>
 80072ce:	6922      	ldr	r2, [r4, #16]
 80072d0:	f104 010c 	add.w	r1, r4, #12
 80072d4:	3202      	adds	r2, #2
 80072d6:	0092      	lsls	r2, r2, #2
 80072d8:	300c      	adds	r0, #12
 80072da:	f7fe fc3d 	bl	8005b58 <memcpy>
 80072de:	4621      	mov	r1, r4
 80072e0:	4638      	mov	r0, r7
 80072e2:	f7ff ffa5 	bl	8007230 <_Bfree>
 80072e6:	4644      	mov	r4, r8
 80072e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80072ec:	3501      	adds	r5, #1
 80072ee:	615e      	str	r6, [r3, #20]
 80072f0:	6125      	str	r5, [r4, #16]
 80072f2:	4620      	mov	r0, r4
 80072f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072f8:	08009847 	.word	0x08009847
 80072fc:	08009858 	.word	0x08009858

08007300 <__hi0bits>:
 8007300:	0c02      	lsrs	r2, r0, #16
 8007302:	0412      	lsls	r2, r2, #16
 8007304:	4603      	mov	r3, r0
 8007306:	b9ca      	cbnz	r2, 800733c <__hi0bits+0x3c>
 8007308:	0403      	lsls	r3, r0, #16
 800730a:	2010      	movs	r0, #16
 800730c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007310:	bf04      	itt	eq
 8007312:	021b      	lsleq	r3, r3, #8
 8007314:	3008      	addeq	r0, #8
 8007316:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800731a:	bf04      	itt	eq
 800731c:	011b      	lsleq	r3, r3, #4
 800731e:	3004      	addeq	r0, #4
 8007320:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007324:	bf04      	itt	eq
 8007326:	009b      	lsleq	r3, r3, #2
 8007328:	3002      	addeq	r0, #2
 800732a:	2b00      	cmp	r3, #0
 800732c:	db05      	blt.n	800733a <__hi0bits+0x3a>
 800732e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007332:	f100 0001 	add.w	r0, r0, #1
 8007336:	bf08      	it	eq
 8007338:	2020      	moveq	r0, #32
 800733a:	4770      	bx	lr
 800733c:	2000      	movs	r0, #0
 800733e:	e7e5      	b.n	800730c <__hi0bits+0xc>

08007340 <__lo0bits>:
 8007340:	6803      	ldr	r3, [r0, #0]
 8007342:	4602      	mov	r2, r0
 8007344:	f013 0007 	ands.w	r0, r3, #7
 8007348:	d00b      	beq.n	8007362 <__lo0bits+0x22>
 800734a:	07d9      	lsls	r1, r3, #31
 800734c:	d421      	bmi.n	8007392 <__lo0bits+0x52>
 800734e:	0798      	lsls	r0, r3, #30
 8007350:	bf49      	itett	mi
 8007352:	085b      	lsrmi	r3, r3, #1
 8007354:	089b      	lsrpl	r3, r3, #2
 8007356:	2001      	movmi	r0, #1
 8007358:	6013      	strmi	r3, [r2, #0]
 800735a:	bf5c      	itt	pl
 800735c:	2002      	movpl	r0, #2
 800735e:	6013      	strpl	r3, [r2, #0]
 8007360:	4770      	bx	lr
 8007362:	b299      	uxth	r1, r3
 8007364:	b909      	cbnz	r1, 800736a <__lo0bits+0x2a>
 8007366:	2010      	movs	r0, #16
 8007368:	0c1b      	lsrs	r3, r3, #16
 800736a:	b2d9      	uxtb	r1, r3
 800736c:	b909      	cbnz	r1, 8007372 <__lo0bits+0x32>
 800736e:	3008      	adds	r0, #8
 8007370:	0a1b      	lsrs	r3, r3, #8
 8007372:	0719      	lsls	r1, r3, #28
 8007374:	bf04      	itt	eq
 8007376:	091b      	lsreq	r3, r3, #4
 8007378:	3004      	addeq	r0, #4
 800737a:	0799      	lsls	r1, r3, #30
 800737c:	bf04      	itt	eq
 800737e:	089b      	lsreq	r3, r3, #2
 8007380:	3002      	addeq	r0, #2
 8007382:	07d9      	lsls	r1, r3, #31
 8007384:	d403      	bmi.n	800738e <__lo0bits+0x4e>
 8007386:	085b      	lsrs	r3, r3, #1
 8007388:	f100 0001 	add.w	r0, r0, #1
 800738c:	d003      	beq.n	8007396 <__lo0bits+0x56>
 800738e:	6013      	str	r3, [r2, #0]
 8007390:	4770      	bx	lr
 8007392:	2000      	movs	r0, #0
 8007394:	4770      	bx	lr
 8007396:	2020      	movs	r0, #32
 8007398:	4770      	bx	lr
	...

0800739c <__i2b>:
 800739c:	b510      	push	{r4, lr}
 800739e:	460c      	mov	r4, r1
 80073a0:	2101      	movs	r1, #1
 80073a2:	f7ff ff05 	bl	80071b0 <_Balloc>
 80073a6:	4602      	mov	r2, r0
 80073a8:	b928      	cbnz	r0, 80073b6 <__i2b+0x1a>
 80073aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80073ae:	4b04      	ldr	r3, [pc, #16]	; (80073c0 <__i2b+0x24>)
 80073b0:	4804      	ldr	r0, [pc, #16]	; (80073c4 <__i2b+0x28>)
 80073b2:	f000 fcdb 	bl	8007d6c <__assert_func>
 80073b6:	2301      	movs	r3, #1
 80073b8:	6144      	str	r4, [r0, #20]
 80073ba:	6103      	str	r3, [r0, #16]
 80073bc:	bd10      	pop	{r4, pc}
 80073be:	bf00      	nop
 80073c0:	08009847 	.word	0x08009847
 80073c4:	08009858 	.word	0x08009858

080073c8 <__multiply>:
 80073c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073cc:	4691      	mov	r9, r2
 80073ce:	690a      	ldr	r2, [r1, #16]
 80073d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80073d4:	460c      	mov	r4, r1
 80073d6:	429a      	cmp	r2, r3
 80073d8:	bfbe      	ittt	lt
 80073da:	460b      	movlt	r3, r1
 80073dc:	464c      	movlt	r4, r9
 80073de:	4699      	movlt	r9, r3
 80073e0:	6927      	ldr	r7, [r4, #16]
 80073e2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80073e6:	68a3      	ldr	r3, [r4, #8]
 80073e8:	6861      	ldr	r1, [r4, #4]
 80073ea:	eb07 060a 	add.w	r6, r7, sl
 80073ee:	42b3      	cmp	r3, r6
 80073f0:	b085      	sub	sp, #20
 80073f2:	bfb8      	it	lt
 80073f4:	3101      	addlt	r1, #1
 80073f6:	f7ff fedb 	bl	80071b0 <_Balloc>
 80073fa:	b930      	cbnz	r0, 800740a <__multiply+0x42>
 80073fc:	4602      	mov	r2, r0
 80073fe:	f240 115d 	movw	r1, #349	; 0x15d
 8007402:	4b43      	ldr	r3, [pc, #268]	; (8007510 <__multiply+0x148>)
 8007404:	4843      	ldr	r0, [pc, #268]	; (8007514 <__multiply+0x14c>)
 8007406:	f000 fcb1 	bl	8007d6c <__assert_func>
 800740a:	f100 0514 	add.w	r5, r0, #20
 800740e:	462b      	mov	r3, r5
 8007410:	2200      	movs	r2, #0
 8007412:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007416:	4543      	cmp	r3, r8
 8007418:	d321      	bcc.n	800745e <__multiply+0x96>
 800741a:	f104 0314 	add.w	r3, r4, #20
 800741e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007422:	f109 0314 	add.w	r3, r9, #20
 8007426:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800742a:	9202      	str	r2, [sp, #8]
 800742c:	1b3a      	subs	r2, r7, r4
 800742e:	3a15      	subs	r2, #21
 8007430:	f022 0203 	bic.w	r2, r2, #3
 8007434:	3204      	adds	r2, #4
 8007436:	f104 0115 	add.w	r1, r4, #21
 800743a:	428f      	cmp	r7, r1
 800743c:	bf38      	it	cc
 800743e:	2204      	movcc	r2, #4
 8007440:	9201      	str	r2, [sp, #4]
 8007442:	9a02      	ldr	r2, [sp, #8]
 8007444:	9303      	str	r3, [sp, #12]
 8007446:	429a      	cmp	r2, r3
 8007448:	d80c      	bhi.n	8007464 <__multiply+0x9c>
 800744a:	2e00      	cmp	r6, #0
 800744c:	dd03      	ble.n	8007456 <__multiply+0x8e>
 800744e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007452:	2b00      	cmp	r3, #0
 8007454:	d059      	beq.n	800750a <__multiply+0x142>
 8007456:	6106      	str	r6, [r0, #16]
 8007458:	b005      	add	sp, #20
 800745a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800745e:	f843 2b04 	str.w	r2, [r3], #4
 8007462:	e7d8      	b.n	8007416 <__multiply+0x4e>
 8007464:	f8b3 a000 	ldrh.w	sl, [r3]
 8007468:	f1ba 0f00 	cmp.w	sl, #0
 800746c:	d023      	beq.n	80074b6 <__multiply+0xee>
 800746e:	46a9      	mov	r9, r5
 8007470:	f04f 0c00 	mov.w	ip, #0
 8007474:	f104 0e14 	add.w	lr, r4, #20
 8007478:	f85e 2b04 	ldr.w	r2, [lr], #4
 800747c:	f8d9 1000 	ldr.w	r1, [r9]
 8007480:	fa1f fb82 	uxth.w	fp, r2
 8007484:	b289      	uxth	r1, r1
 8007486:	fb0a 110b 	mla	r1, sl, fp, r1
 800748a:	4461      	add	r1, ip
 800748c:	f8d9 c000 	ldr.w	ip, [r9]
 8007490:	0c12      	lsrs	r2, r2, #16
 8007492:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007496:	fb0a c202 	mla	r2, sl, r2, ip
 800749a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800749e:	b289      	uxth	r1, r1
 80074a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80074a4:	4577      	cmp	r7, lr
 80074a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80074aa:	f849 1b04 	str.w	r1, [r9], #4
 80074ae:	d8e3      	bhi.n	8007478 <__multiply+0xb0>
 80074b0:	9a01      	ldr	r2, [sp, #4]
 80074b2:	f845 c002 	str.w	ip, [r5, r2]
 80074b6:	9a03      	ldr	r2, [sp, #12]
 80074b8:	3304      	adds	r3, #4
 80074ba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80074be:	f1b9 0f00 	cmp.w	r9, #0
 80074c2:	d020      	beq.n	8007506 <__multiply+0x13e>
 80074c4:	46ae      	mov	lr, r5
 80074c6:	f04f 0a00 	mov.w	sl, #0
 80074ca:	6829      	ldr	r1, [r5, #0]
 80074cc:	f104 0c14 	add.w	ip, r4, #20
 80074d0:	f8bc b000 	ldrh.w	fp, [ip]
 80074d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80074d8:	b289      	uxth	r1, r1
 80074da:	fb09 220b 	mla	r2, r9, fp, r2
 80074de:	4492      	add	sl, r2
 80074e0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80074e4:	f84e 1b04 	str.w	r1, [lr], #4
 80074e8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80074ec:	f8be 1000 	ldrh.w	r1, [lr]
 80074f0:	0c12      	lsrs	r2, r2, #16
 80074f2:	fb09 1102 	mla	r1, r9, r2, r1
 80074f6:	4567      	cmp	r7, ip
 80074f8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80074fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007500:	d8e6      	bhi.n	80074d0 <__multiply+0x108>
 8007502:	9a01      	ldr	r2, [sp, #4]
 8007504:	50a9      	str	r1, [r5, r2]
 8007506:	3504      	adds	r5, #4
 8007508:	e79b      	b.n	8007442 <__multiply+0x7a>
 800750a:	3e01      	subs	r6, #1
 800750c:	e79d      	b.n	800744a <__multiply+0x82>
 800750e:	bf00      	nop
 8007510:	08009847 	.word	0x08009847
 8007514:	08009858 	.word	0x08009858

08007518 <__pow5mult>:
 8007518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800751c:	4615      	mov	r5, r2
 800751e:	f012 0203 	ands.w	r2, r2, #3
 8007522:	4606      	mov	r6, r0
 8007524:	460f      	mov	r7, r1
 8007526:	d007      	beq.n	8007538 <__pow5mult+0x20>
 8007528:	4c25      	ldr	r4, [pc, #148]	; (80075c0 <__pow5mult+0xa8>)
 800752a:	3a01      	subs	r2, #1
 800752c:	2300      	movs	r3, #0
 800752e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007532:	f7ff fe9f 	bl	8007274 <__multadd>
 8007536:	4607      	mov	r7, r0
 8007538:	10ad      	asrs	r5, r5, #2
 800753a:	d03d      	beq.n	80075b8 <__pow5mult+0xa0>
 800753c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800753e:	b97c      	cbnz	r4, 8007560 <__pow5mult+0x48>
 8007540:	2010      	movs	r0, #16
 8007542:	f7ff fe1f 	bl	8007184 <malloc>
 8007546:	4602      	mov	r2, r0
 8007548:	6270      	str	r0, [r6, #36]	; 0x24
 800754a:	b928      	cbnz	r0, 8007558 <__pow5mult+0x40>
 800754c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007550:	4b1c      	ldr	r3, [pc, #112]	; (80075c4 <__pow5mult+0xac>)
 8007552:	481d      	ldr	r0, [pc, #116]	; (80075c8 <__pow5mult+0xb0>)
 8007554:	f000 fc0a 	bl	8007d6c <__assert_func>
 8007558:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800755c:	6004      	str	r4, [r0, #0]
 800755e:	60c4      	str	r4, [r0, #12]
 8007560:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007564:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007568:	b94c      	cbnz	r4, 800757e <__pow5mult+0x66>
 800756a:	f240 2171 	movw	r1, #625	; 0x271
 800756e:	4630      	mov	r0, r6
 8007570:	f7ff ff14 	bl	800739c <__i2b>
 8007574:	2300      	movs	r3, #0
 8007576:	4604      	mov	r4, r0
 8007578:	f8c8 0008 	str.w	r0, [r8, #8]
 800757c:	6003      	str	r3, [r0, #0]
 800757e:	f04f 0900 	mov.w	r9, #0
 8007582:	07eb      	lsls	r3, r5, #31
 8007584:	d50a      	bpl.n	800759c <__pow5mult+0x84>
 8007586:	4639      	mov	r1, r7
 8007588:	4622      	mov	r2, r4
 800758a:	4630      	mov	r0, r6
 800758c:	f7ff ff1c 	bl	80073c8 <__multiply>
 8007590:	4680      	mov	r8, r0
 8007592:	4639      	mov	r1, r7
 8007594:	4630      	mov	r0, r6
 8007596:	f7ff fe4b 	bl	8007230 <_Bfree>
 800759a:	4647      	mov	r7, r8
 800759c:	106d      	asrs	r5, r5, #1
 800759e:	d00b      	beq.n	80075b8 <__pow5mult+0xa0>
 80075a0:	6820      	ldr	r0, [r4, #0]
 80075a2:	b938      	cbnz	r0, 80075b4 <__pow5mult+0x9c>
 80075a4:	4622      	mov	r2, r4
 80075a6:	4621      	mov	r1, r4
 80075a8:	4630      	mov	r0, r6
 80075aa:	f7ff ff0d 	bl	80073c8 <__multiply>
 80075ae:	6020      	str	r0, [r4, #0]
 80075b0:	f8c0 9000 	str.w	r9, [r0]
 80075b4:	4604      	mov	r4, r0
 80075b6:	e7e4      	b.n	8007582 <__pow5mult+0x6a>
 80075b8:	4638      	mov	r0, r7
 80075ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075be:	bf00      	nop
 80075c0:	080099a8 	.word	0x080099a8
 80075c4:	080097d5 	.word	0x080097d5
 80075c8:	08009858 	.word	0x08009858

080075cc <__lshift>:
 80075cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075d0:	460c      	mov	r4, r1
 80075d2:	4607      	mov	r7, r0
 80075d4:	4691      	mov	r9, r2
 80075d6:	6923      	ldr	r3, [r4, #16]
 80075d8:	6849      	ldr	r1, [r1, #4]
 80075da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80075de:	68a3      	ldr	r3, [r4, #8]
 80075e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80075e4:	f108 0601 	add.w	r6, r8, #1
 80075e8:	42b3      	cmp	r3, r6
 80075ea:	db0b      	blt.n	8007604 <__lshift+0x38>
 80075ec:	4638      	mov	r0, r7
 80075ee:	f7ff fddf 	bl	80071b0 <_Balloc>
 80075f2:	4605      	mov	r5, r0
 80075f4:	b948      	cbnz	r0, 800760a <__lshift+0x3e>
 80075f6:	4602      	mov	r2, r0
 80075f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80075fc:	4b29      	ldr	r3, [pc, #164]	; (80076a4 <__lshift+0xd8>)
 80075fe:	482a      	ldr	r0, [pc, #168]	; (80076a8 <__lshift+0xdc>)
 8007600:	f000 fbb4 	bl	8007d6c <__assert_func>
 8007604:	3101      	adds	r1, #1
 8007606:	005b      	lsls	r3, r3, #1
 8007608:	e7ee      	b.n	80075e8 <__lshift+0x1c>
 800760a:	2300      	movs	r3, #0
 800760c:	f100 0114 	add.w	r1, r0, #20
 8007610:	f100 0210 	add.w	r2, r0, #16
 8007614:	4618      	mov	r0, r3
 8007616:	4553      	cmp	r3, sl
 8007618:	db37      	blt.n	800768a <__lshift+0xbe>
 800761a:	6920      	ldr	r0, [r4, #16]
 800761c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007620:	f104 0314 	add.w	r3, r4, #20
 8007624:	f019 091f 	ands.w	r9, r9, #31
 8007628:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800762c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007630:	d02f      	beq.n	8007692 <__lshift+0xc6>
 8007632:	468a      	mov	sl, r1
 8007634:	f04f 0c00 	mov.w	ip, #0
 8007638:	f1c9 0e20 	rsb	lr, r9, #32
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	fa02 f209 	lsl.w	r2, r2, r9
 8007642:	ea42 020c 	orr.w	r2, r2, ip
 8007646:	f84a 2b04 	str.w	r2, [sl], #4
 800764a:	f853 2b04 	ldr.w	r2, [r3], #4
 800764e:	4298      	cmp	r0, r3
 8007650:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007654:	d8f2      	bhi.n	800763c <__lshift+0x70>
 8007656:	1b03      	subs	r3, r0, r4
 8007658:	3b15      	subs	r3, #21
 800765a:	f023 0303 	bic.w	r3, r3, #3
 800765e:	3304      	adds	r3, #4
 8007660:	f104 0215 	add.w	r2, r4, #21
 8007664:	4290      	cmp	r0, r2
 8007666:	bf38      	it	cc
 8007668:	2304      	movcc	r3, #4
 800766a:	f841 c003 	str.w	ip, [r1, r3]
 800766e:	f1bc 0f00 	cmp.w	ip, #0
 8007672:	d001      	beq.n	8007678 <__lshift+0xac>
 8007674:	f108 0602 	add.w	r6, r8, #2
 8007678:	3e01      	subs	r6, #1
 800767a:	4638      	mov	r0, r7
 800767c:	4621      	mov	r1, r4
 800767e:	612e      	str	r6, [r5, #16]
 8007680:	f7ff fdd6 	bl	8007230 <_Bfree>
 8007684:	4628      	mov	r0, r5
 8007686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800768a:	f842 0f04 	str.w	r0, [r2, #4]!
 800768e:	3301      	adds	r3, #1
 8007690:	e7c1      	b.n	8007616 <__lshift+0x4a>
 8007692:	3904      	subs	r1, #4
 8007694:	f853 2b04 	ldr.w	r2, [r3], #4
 8007698:	4298      	cmp	r0, r3
 800769a:	f841 2f04 	str.w	r2, [r1, #4]!
 800769e:	d8f9      	bhi.n	8007694 <__lshift+0xc8>
 80076a0:	e7ea      	b.n	8007678 <__lshift+0xac>
 80076a2:	bf00      	nop
 80076a4:	08009847 	.word	0x08009847
 80076a8:	08009858 	.word	0x08009858

080076ac <__mcmp>:
 80076ac:	4603      	mov	r3, r0
 80076ae:	690a      	ldr	r2, [r1, #16]
 80076b0:	6900      	ldr	r0, [r0, #16]
 80076b2:	b530      	push	{r4, r5, lr}
 80076b4:	1a80      	subs	r0, r0, r2
 80076b6:	d10d      	bne.n	80076d4 <__mcmp+0x28>
 80076b8:	3314      	adds	r3, #20
 80076ba:	3114      	adds	r1, #20
 80076bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80076c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80076c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80076c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80076cc:	4295      	cmp	r5, r2
 80076ce:	d002      	beq.n	80076d6 <__mcmp+0x2a>
 80076d0:	d304      	bcc.n	80076dc <__mcmp+0x30>
 80076d2:	2001      	movs	r0, #1
 80076d4:	bd30      	pop	{r4, r5, pc}
 80076d6:	42a3      	cmp	r3, r4
 80076d8:	d3f4      	bcc.n	80076c4 <__mcmp+0x18>
 80076da:	e7fb      	b.n	80076d4 <__mcmp+0x28>
 80076dc:	f04f 30ff 	mov.w	r0, #4294967295
 80076e0:	e7f8      	b.n	80076d4 <__mcmp+0x28>
	...

080076e4 <__mdiff>:
 80076e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e8:	460d      	mov	r5, r1
 80076ea:	4607      	mov	r7, r0
 80076ec:	4611      	mov	r1, r2
 80076ee:	4628      	mov	r0, r5
 80076f0:	4614      	mov	r4, r2
 80076f2:	f7ff ffdb 	bl	80076ac <__mcmp>
 80076f6:	1e06      	subs	r6, r0, #0
 80076f8:	d111      	bne.n	800771e <__mdiff+0x3a>
 80076fa:	4631      	mov	r1, r6
 80076fc:	4638      	mov	r0, r7
 80076fe:	f7ff fd57 	bl	80071b0 <_Balloc>
 8007702:	4602      	mov	r2, r0
 8007704:	b928      	cbnz	r0, 8007712 <__mdiff+0x2e>
 8007706:	f240 2132 	movw	r1, #562	; 0x232
 800770a:	4b3a      	ldr	r3, [pc, #232]	; (80077f4 <__mdiff+0x110>)
 800770c:	483a      	ldr	r0, [pc, #232]	; (80077f8 <__mdiff+0x114>)
 800770e:	f000 fb2d 	bl	8007d6c <__assert_func>
 8007712:	2301      	movs	r3, #1
 8007714:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007718:	4610      	mov	r0, r2
 800771a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800771e:	bfa4      	itt	ge
 8007720:	4623      	movge	r3, r4
 8007722:	462c      	movge	r4, r5
 8007724:	4638      	mov	r0, r7
 8007726:	6861      	ldr	r1, [r4, #4]
 8007728:	bfa6      	itte	ge
 800772a:	461d      	movge	r5, r3
 800772c:	2600      	movge	r6, #0
 800772e:	2601      	movlt	r6, #1
 8007730:	f7ff fd3e 	bl	80071b0 <_Balloc>
 8007734:	4602      	mov	r2, r0
 8007736:	b918      	cbnz	r0, 8007740 <__mdiff+0x5c>
 8007738:	f44f 7110 	mov.w	r1, #576	; 0x240
 800773c:	4b2d      	ldr	r3, [pc, #180]	; (80077f4 <__mdiff+0x110>)
 800773e:	e7e5      	b.n	800770c <__mdiff+0x28>
 8007740:	f102 0814 	add.w	r8, r2, #20
 8007744:	46c2      	mov	sl, r8
 8007746:	f04f 0c00 	mov.w	ip, #0
 800774a:	6927      	ldr	r7, [r4, #16]
 800774c:	60c6      	str	r6, [r0, #12]
 800774e:	692e      	ldr	r6, [r5, #16]
 8007750:	f104 0014 	add.w	r0, r4, #20
 8007754:	f105 0914 	add.w	r9, r5, #20
 8007758:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800775c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007760:	3410      	adds	r4, #16
 8007762:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007766:	f859 3b04 	ldr.w	r3, [r9], #4
 800776a:	fa1f f18b 	uxth.w	r1, fp
 800776e:	448c      	add	ip, r1
 8007770:	b299      	uxth	r1, r3
 8007772:	0c1b      	lsrs	r3, r3, #16
 8007774:	ebac 0101 	sub.w	r1, ip, r1
 8007778:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800777c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007780:	b289      	uxth	r1, r1
 8007782:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007786:	454e      	cmp	r6, r9
 8007788:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800778c:	f84a 3b04 	str.w	r3, [sl], #4
 8007790:	d8e7      	bhi.n	8007762 <__mdiff+0x7e>
 8007792:	1b73      	subs	r3, r6, r5
 8007794:	3b15      	subs	r3, #21
 8007796:	f023 0303 	bic.w	r3, r3, #3
 800779a:	3515      	adds	r5, #21
 800779c:	3304      	adds	r3, #4
 800779e:	42ae      	cmp	r6, r5
 80077a0:	bf38      	it	cc
 80077a2:	2304      	movcc	r3, #4
 80077a4:	4418      	add	r0, r3
 80077a6:	4443      	add	r3, r8
 80077a8:	461e      	mov	r6, r3
 80077aa:	4605      	mov	r5, r0
 80077ac:	4575      	cmp	r5, lr
 80077ae:	d30e      	bcc.n	80077ce <__mdiff+0xea>
 80077b0:	f10e 0103 	add.w	r1, lr, #3
 80077b4:	1a09      	subs	r1, r1, r0
 80077b6:	f021 0103 	bic.w	r1, r1, #3
 80077ba:	3803      	subs	r0, #3
 80077bc:	4586      	cmp	lr, r0
 80077be:	bf38      	it	cc
 80077c0:	2100      	movcc	r1, #0
 80077c2:	4419      	add	r1, r3
 80077c4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80077c8:	b18b      	cbz	r3, 80077ee <__mdiff+0x10a>
 80077ca:	6117      	str	r7, [r2, #16]
 80077cc:	e7a4      	b.n	8007718 <__mdiff+0x34>
 80077ce:	f855 8b04 	ldr.w	r8, [r5], #4
 80077d2:	fa1f f188 	uxth.w	r1, r8
 80077d6:	4461      	add	r1, ip
 80077d8:	140c      	asrs	r4, r1, #16
 80077da:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80077de:	b289      	uxth	r1, r1
 80077e0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80077e4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80077e8:	f846 1b04 	str.w	r1, [r6], #4
 80077ec:	e7de      	b.n	80077ac <__mdiff+0xc8>
 80077ee:	3f01      	subs	r7, #1
 80077f0:	e7e8      	b.n	80077c4 <__mdiff+0xe0>
 80077f2:	bf00      	nop
 80077f4:	08009847 	.word	0x08009847
 80077f8:	08009858 	.word	0x08009858

080077fc <__d2b>:
 80077fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007800:	2101      	movs	r1, #1
 8007802:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007806:	4690      	mov	r8, r2
 8007808:	461d      	mov	r5, r3
 800780a:	f7ff fcd1 	bl	80071b0 <_Balloc>
 800780e:	4604      	mov	r4, r0
 8007810:	b930      	cbnz	r0, 8007820 <__d2b+0x24>
 8007812:	4602      	mov	r2, r0
 8007814:	f240 310a 	movw	r1, #778	; 0x30a
 8007818:	4b24      	ldr	r3, [pc, #144]	; (80078ac <__d2b+0xb0>)
 800781a:	4825      	ldr	r0, [pc, #148]	; (80078b0 <__d2b+0xb4>)
 800781c:	f000 faa6 	bl	8007d6c <__assert_func>
 8007820:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007824:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007828:	bb2d      	cbnz	r5, 8007876 <__d2b+0x7a>
 800782a:	9301      	str	r3, [sp, #4]
 800782c:	f1b8 0300 	subs.w	r3, r8, #0
 8007830:	d026      	beq.n	8007880 <__d2b+0x84>
 8007832:	4668      	mov	r0, sp
 8007834:	9300      	str	r3, [sp, #0]
 8007836:	f7ff fd83 	bl	8007340 <__lo0bits>
 800783a:	9900      	ldr	r1, [sp, #0]
 800783c:	b1f0      	cbz	r0, 800787c <__d2b+0x80>
 800783e:	9a01      	ldr	r2, [sp, #4]
 8007840:	f1c0 0320 	rsb	r3, r0, #32
 8007844:	fa02 f303 	lsl.w	r3, r2, r3
 8007848:	430b      	orrs	r3, r1
 800784a:	40c2      	lsrs	r2, r0
 800784c:	6163      	str	r3, [r4, #20]
 800784e:	9201      	str	r2, [sp, #4]
 8007850:	9b01      	ldr	r3, [sp, #4]
 8007852:	2b00      	cmp	r3, #0
 8007854:	bf14      	ite	ne
 8007856:	2102      	movne	r1, #2
 8007858:	2101      	moveq	r1, #1
 800785a:	61a3      	str	r3, [r4, #24]
 800785c:	6121      	str	r1, [r4, #16]
 800785e:	b1c5      	cbz	r5, 8007892 <__d2b+0x96>
 8007860:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007864:	4405      	add	r5, r0
 8007866:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800786a:	603d      	str	r5, [r7, #0]
 800786c:	6030      	str	r0, [r6, #0]
 800786e:	4620      	mov	r0, r4
 8007870:	b002      	add	sp, #8
 8007872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007876:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800787a:	e7d6      	b.n	800782a <__d2b+0x2e>
 800787c:	6161      	str	r1, [r4, #20]
 800787e:	e7e7      	b.n	8007850 <__d2b+0x54>
 8007880:	a801      	add	r0, sp, #4
 8007882:	f7ff fd5d 	bl	8007340 <__lo0bits>
 8007886:	2101      	movs	r1, #1
 8007888:	9b01      	ldr	r3, [sp, #4]
 800788a:	6121      	str	r1, [r4, #16]
 800788c:	6163      	str	r3, [r4, #20]
 800788e:	3020      	adds	r0, #32
 8007890:	e7e5      	b.n	800785e <__d2b+0x62>
 8007892:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007896:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800789a:	6038      	str	r0, [r7, #0]
 800789c:	6918      	ldr	r0, [r3, #16]
 800789e:	f7ff fd2f 	bl	8007300 <__hi0bits>
 80078a2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80078a6:	6031      	str	r1, [r6, #0]
 80078a8:	e7e1      	b.n	800786e <__d2b+0x72>
 80078aa:	bf00      	nop
 80078ac:	08009847 	.word	0x08009847
 80078b0:	08009858 	.word	0x08009858

080078b4 <_calloc_r>:
 80078b4:	b570      	push	{r4, r5, r6, lr}
 80078b6:	fba1 5402 	umull	r5, r4, r1, r2
 80078ba:	b934      	cbnz	r4, 80078ca <_calloc_r+0x16>
 80078bc:	4629      	mov	r1, r5
 80078be:	f000 f875 	bl	80079ac <_malloc_r>
 80078c2:	4606      	mov	r6, r0
 80078c4:	b928      	cbnz	r0, 80078d2 <_calloc_r+0x1e>
 80078c6:	4630      	mov	r0, r6
 80078c8:	bd70      	pop	{r4, r5, r6, pc}
 80078ca:	220c      	movs	r2, #12
 80078cc:	2600      	movs	r6, #0
 80078ce:	6002      	str	r2, [r0, #0]
 80078d0:	e7f9      	b.n	80078c6 <_calloc_r+0x12>
 80078d2:	462a      	mov	r2, r5
 80078d4:	4621      	mov	r1, r4
 80078d6:	f7fe f94d 	bl	8005b74 <memset>
 80078da:	e7f4      	b.n	80078c6 <_calloc_r+0x12>

080078dc <_free_r>:
 80078dc:	b538      	push	{r3, r4, r5, lr}
 80078de:	4605      	mov	r5, r0
 80078e0:	2900      	cmp	r1, #0
 80078e2:	d040      	beq.n	8007966 <_free_r+0x8a>
 80078e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078e8:	1f0c      	subs	r4, r1, #4
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	bfb8      	it	lt
 80078ee:	18e4      	addlt	r4, r4, r3
 80078f0:	f000 fa98 	bl	8007e24 <__malloc_lock>
 80078f4:	4a1c      	ldr	r2, [pc, #112]	; (8007968 <_free_r+0x8c>)
 80078f6:	6813      	ldr	r3, [r2, #0]
 80078f8:	b933      	cbnz	r3, 8007908 <_free_r+0x2c>
 80078fa:	6063      	str	r3, [r4, #4]
 80078fc:	6014      	str	r4, [r2, #0]
 80078fe:	4628      	mov	r0, r5
 8007900:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007904:	f000 ba94 	b.w	8007e30 <__malloc_unlock>
 8007908:	42a3      	cmp	r3, r4
 800790a:	d908      	bls.n	800791e <_free_r+0x42>
 800790c:	6820      	ldr	r0, [r4, #0]
 800790e:	1821      	adds	r1, r4, r0
 8007910:	428b      	cmp	r3, r1
 8007912:	bf01      	itttt	eq
 8007914:	6819      	ldreq	r1, [r3, #0]
 8007916:	685b      	ldreq	r3, [r3, #4]
 8007918:	1809      	addeq	r1, r1, r0
 800791a:	6021      	streq	r1, [r4, #0]
 800791c:	e7ed      	b.n	80078fa <_free_r+0x1e>
 800791e:	461a      	mov	r2, r3
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	b10b      	cbz	r3, 8007928 <_free_r+0x4c>
 8007924:	42a3      	cmp	r3, r4
 8007926:	d9fa      	bls.n	800791e <_free_r+0x42>
 8007928:	6811      	ldr	r1, [r2, #0]
 800792a:	1850      	adds	r0, r2, r1
 800792c:	42a0      	cmp	r0, r4
 800792e:	d10b      	bne.n	8007948 <_free_r+0x6c>
 8007930:	6820      	ldr	r0, [r4, #0]
 8007932:	4401      	add	r1, r0
 8007934:	1850      	adds	r0, r2, r1
 8007936:	4283      	cmp	r3, r0
 8007938:	6011      	str	r1, [r2, #0]
 800793a:	d1e0      	bne.n	80078fe <_free_r+0x22>
 800793c:	6818      	ldr	r0, [r3, #0]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	4401      	add	r1, r0
 8007942:	6011      	str	r1, [r2, #0]
 8007944:	6053      	str	r3, [r2, #4]
 8007946:	e7da      	b.n	80078fe <_free_r+0x22>
 8007948:	d902      	bls.n	8007950 <_free_r+0x74>
 800794a:	230c      	movs	r3, #12
 800794c:	602b      	str	r3, [r5, #0]
 800794e:	e7d6      	b.n	80078fe <_free_r+0x22>
 8007950:	6820      	ldr	r0, [r4, #0]
 8007952:	1821      	adds	r1, r4, r0
 8007954:	428b      	cmp	r3, r1
 8007956:	bf01      	itttt	eq
 8007958:	6819      	ldreq	r1, [r3, #0]
 800795a:	685b      	ldreq	r3, [r3, #4]
 800795c:	1809      	addeq	r1, r1, r0
 800795e:	6021      	streq	r1, [r4, #0]
 8007960:	6063      	str	r3, [r4, #4]
 8007962:	6054      	str	r4, [r2, #4]
 8007964:	e7cb      	b.n	80078fe <_free_r+0x22>
 8007966:	bd38      	pop	{r3, r4, r5, pc}
 8007968:	20001710 	.word	0x20001710

0800796c <sbrk_aligned>:
 800796c:	b570      	push	{r4, r5, r6, lr}
 800796e:	4e0e      	ldr	r6, [pc, #56]	; (80079a8 <sbrk_aligned+0x3c>)
 8007970:	460c      	mov	r4, r1
 8007972:	6831      	ldr	r1, [r6, #0]
 8007974:	4605      	mov	r5, r0
 8007976:	b911      	cbnz	r1, 800797e <sbrk_aligned+0x12>
 8007978:	f000 f9e8 	bl	8007d4c <_sbrk_r>
 800797c:	6030      	str	r0, [r6, #0]
 800797e:	4621      	mov	r1, r4
 8007980:	4628      	mov	r0, r5
 8007982:	f000 f9e3 	bl	8007d4c <_sbrk_r>
 8007986:	1c43      	adds	r3, r0, #1
 8007988:	d00a      	beq.n	80079a0 <sbrk_aligned+0x34>
 800798a:	1cc4      	adds	r4, r0, #3
 800798c:	f024 0403 	bic.w	r4, r4, #3
 8007990:	42a0      	cmp	r0, r4
 8007992:	d007      	beq.n	80079a4 <sbrk_aligned+0x38>
 8007994:	1a21      	subs	r1, r4, r0
 8007996:	4628      	mov	r0, r5
 8007998:	f000 f9d8 	bl	8007d4c <_sbrk_r>
 800799c:	3001      	adds	r0, #1
 800799e:	d101      	bne.n	80079a4 <sbrk_aligned+0x38>
 80079a0:	f04f 34ff 	mov.w	r4, #4294967295
 80079a4:	4620      	mov	r0, r4
 80079a6:	bd70      	pop	{r4, r5, r6, pc}
 80079a8:	20001714 	.word	0x20001714

080079ac <_malloc_r>:
 80079ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079b0:	1ccd      	adds	r5, r1, #3
 80079b2:	f025 0503 	bic.w	r5, r5, #3
 80079b6:	3508      	adds	r5, #8
 80079b8:	2d0c      	cmp	r5, #12
 80079ba:	bf38      	it	cc
 80079bc:	250c      	movcc	r5, #12
 80079be:	2d00      	cmp	r5, #0
 80079c0:	4607      	mov	r7, r0
 80079c2:	db01      	blt.n	80079c8 <_malloc_r+0x1c>
 80079c4:	42a9      	cmp	r1, r5
 80079c6:	d905      	bls.n	80079d4 <_malloc_r+0x28>
 80079c8:	230c      	movs	r3, #12
 80079ca:	2600      	movs	r6, #0
 80079cc:	603b      	str	r3, [r7, #0]
 80079ce:	4630      	mov	r0, r6
 80079d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079d4:	4e2e      	ldr	r6, [pc, #184]	; (8007a90 <_malloc_r+0xe4>)
 80079d6:	f000 fa25 	bl	8007e24 <__malloc_lock>
 80079da:	6833      	ldr	r3, [r6, #0]
 80079dc:	461c      	mov	r4, r3
 80079de:	bb34      	cbnz	r4, 8007a2e <_malloc_r+0x82>
 80079e0:	4629      	mov	r1, r5
 80079e2:	4638      	mov	r0, r7
 80079e4:	f7ff ffc2 	bl	800796c <sbrk_aligned>
 80079e8:	1c43      	adds	r3, r0, #1
 80079ea:	4604      	mov	r4, r0
 80079ec:	d14d      	bne.n	8007a8a <_malloc_r+0xde>
 80079ee:	6834      	ldr	r4, [r6, #0]
 80079f0:	4626      	mov	r6, r4
 80079f2:	2e00      	cmp	r6, #0
 80079f4:	d140      	bne.n	8007a78 <_malloc_r+0xcc>
 80079f6:	6823      	ldr	r3, [r4, #0]
 80079f8:	4631      	mov	r1, r6
 80079fa:	4638      	mov	r0, r7
 80079fc:	eb04 0803 	add.w	r8, r4, r3
 8007a00:	f000 f9a4 	bl	8007d4c <_sbrk_r>
 8007a04:	4580      	cmp	r8, r0
 8007a06:	d13a      	bne.n	8007a7e <_malloc_r+0xd2>
 8007a08:	6821      	ldr	r1, [r4, #0]
 8007a0a:	3503      	adds	r5, #3
 8007a0c:	1a6d      	subs	r5, r5, r1
 8007a0e:	f025 0503 	bic.w	r5, r5, #3
 8007a12:	3508      	adds	r5, #8
 8007a14:	2d0c      	cmp	r5, #12
 8007a16:	bf38      	it	cc
 8007a18:	250c      	movcc	r5, #12
 8007a1a:	4638      	mov	r0, r7
 8007a1c:	4629      	mov	r1, r5
 8007a1e:	f7ff ffa5 	bl	800796c <sbrk_aligned>
 8007a22:	3001      	adds	r0, #1
 8007a24:	d02b      	beq.n	8007a7e <_malloc_r+0xd2>
 8007a26:	6823      	ldr	r3, [r4, #0]
 8007a28:	442b      	add	r3, r5
 8007a2a:	6023      	str	r3, [r4, #0]
 8007a2c:	e00e      	b.n	8007a4c <_malloc_r+0xa0>
 8007a2e:	6822      	ldr	r2, [r4, #0]
 8007a30:	1b52      	subs	r2, r2, r5
 8007a32:	d41e      	bmi.n	8007a72 <_malloc_r+0xc6>
 8007a34:	2a0b      	cmp	r2, #11
 8007a36:	d916      	bls.n	8007a66 <_malloc_r+0xba>
 8007a38:	1961      	adds	r1, r4, r5
 8007a3a:	42a3      	cmp	r3, r4
 8007a3c:	6025      	str	r5, [r4, #0]
 8007a3e:	bf18      	it	ne
 8007a40:	6059      	strne	r1, [r3, #4]
 8007a42:	6863      	ldr	r3, [r4, #4]
 8007a44:	bf08      	it	eq
 8007a46:	6031      	streq	r1, [r6, #0]
 8007a48:	5162      	str	r2, [r4, r5]
 8007a4a:	604b      	str	r3, [r1, #4]
 8007a4c:	4638      	mov	r0, r7
 8007a4e:	f104 060b 	add.w	r6, r4, #11
 8007a52:	f000 f9ed 	bl	8007e30 <__malloc_unlock>
 8007a56:	f026 0607 	bic.w	r6, r6, #7
 8007a5a:	1d23      	adds	r3, r4, #4
 8007a5c:	1af2      	subs	r2, r6, r3
 8007a5e:	d0b6      	beq.n	80079ce <_malloc_r+0x22>
 8007a60:	1b9b      	subs	r3, r3, r6
 8007a62:	50a3      	str	r3, [r4, r2]
 8007a64:	e7b3      	b.n	80079ce <_malloc_r+0x22>
 8007a66:	6862      	ldr	r2, [r4, #4]
 8007a68:	42a3      	cmp	r3, r4
 8007a6a:	bf0c      	ite	eq
 8007a6c:	6032      	streq	r2, [r6, #0]
 8007a6e:	605a      	strne	r2, [r3, #4]
 8007a70:	e7ec      	b.n	8007a4c <_malloc_r+0xa0>
 8007a72:	4623      	mov	r3, r4
 8007a74:	6864      	ldr	r4, [r4, #4]
 8007a76:	e7b2      	b.n	80079de <_malloc_r+0x32>
 8007a78:	4634      	mov	r4, r6
 8007a7a:	6876      	ldr	r6, [r6, #4]
 8007a7c:	e7b9      	b.n	80079f2 <_malloc_r+0x46>
 8007a7e:	230c      	movs	r3, #12
 8007a80:	4638      	mov	r0, r7
 8007a82:	603b      	str	r3, [r7, #0]
 8007a84:	f000 f9d4 	bl	8007e30 <__malloc_unlock>
 8007a88:	e7a1      	b.n	80079ce <_malloc_r+0x22>
 8007a8a:	6025      	str	r5, [r4, #0]
 8007a8c:	e7de      	b.n	8007a4c <_malloc_r+0xa0>
 8007a8e:	bf00      	nop
 8007a90:	20001710 	.word	0x20001710

08007a94 <__ssputs_r>:
 8007a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a98:	688e      	ldr	r6, [r1, #8]
 8007a9a:	4682      	mov	sl, r0
 8007a9c:	429e      	cmp	r6, r3
 8007a9e:	460c      	mov	r4, r1
 8007aa0:	4690      	mov	r8, r2
 8007aa2:	461f      	mov	r7, r3
 8007aa4:	d838      	bhi.n	8007b18 <__ssputs_r+0x84>
 8007aa6:	898a      	ldrh	r2, [r1, #12]
 8007aa8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007aac:	d032      	beq.n	8007b14 <__ssputs_r+0x80>
 8007aae:	6825      	ldr	r5, [r4, #0]
 8007ab0:	6909      	ldr	r1, [r1, #16]
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	eba5 0901 	sub.w	r9, r5, r1
 8007ab8:	6965      	ldr	r5, [r4, #20]
 8007aba:	444b      	add	r3, r9
 8007abc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ac0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ac4:	106d      	asrs	r5, r5, #1
 8007ac6:	429d      	cmp	r5, r3
 8007ac8:	bf38      	it	cc
 8007aca:	461d      	movcc	r5, r3
 8007acc:	0553      	lsls	r3, r2, #21
 8007ace:	d531      	bpl.n	8007b34 <__ssputs_r+0xa0>
 8007ad0:	4629      	mov	r1, r5
 8007ad2:	f7ff ff6b 	bl	80079ac <_malloc_r>
 8007ad6:	4606      	mov	r6, r0
 8007ad8:	b950      	cbnz	r0, 8007af0 <__ssputs_r+0x5c>
 8007ada:	230c      	movs	r3, #12
 8007adc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ae0:	f8ca 3000 	str.w	r3, [sl]
 8007ae4:	89a3      	ldrh	r3, [r4, #12]
 8007ae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007aea:	81a3      	strh	r3, [r4, #12]
 8007aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007af0:	464a      	mov	r2, r9
 8007af2:	6921      	ldr	r1, [r4, #16]
 8007af4:	f7fe f830 	bl	8005b58 <memcpy>
 8007af8:	89a3      	ldrh	r3, [r4, #12]
 8007afa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b02:	81a3      	strh	r3, [r4, #12]
 8007b04:	6126      	str	r6, [r4, #16]
 8007b06:	444e      	add	r6, r9
 8007b08:	6026      	str	r6, [r4, #0]
 8007b0a:	463e      	mov	r6, r7
 8007b0c:	6165      	str	r5, [r4, #20]
 8007b0e:	eba5 0509 	sub.w	r5, r5, r9
 8007b12:	60a5      	str	r5, [r4, #8]
 8007b14:	42be      	cmp	r6, r7
 8007b16:	d900      	bls.n	8007b1a <__ssputs_r+0x86>
 8007b18:	463e      	mov	r6, r7
 8007b1a:	4632      	mov	r2, r6
 8007b1c:	4641      	mov	r1, r8
 8007b1e:	6820      	ldr	r0, [r4, #0]
 8007b20:	f000 f966 	bl	8007df0 <memmove>
 8007b24:	68a3      	ldr	r3, [r4, #8]
 8007b26:	2000      	movs	r0, #0
 8007b28:	1b9b      	subs	r3, r3, r6
 8007b2a:	60a3      	str	r3, [r4, #8]
 8007b2c:	6823      	ldr	r3, [r4, #0]
 8007b2e:	4433      	add	r3, r6
 8007b30:	6023      	str	r3, [r4, #0]
 8007b32:	e7db      	b.n	8007aec <__ssputs_r+0x58>
 8007b34:	462a      	mov	r2, r5
 8007b36:	f000 f981 	bl	8007e3c <_realloc_r>
 8007b3a:	4606      	mov	r6, r0
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	d1e1      	bne.n	8007b04 <__ssputs_r+0x70>
 8007b40:	4650      	mov	r0, sl
 8007b42:	6921      	ldr	r1, [r4, #16]
 8007b44:	f7ff feca 	bl	80078dc <_free_r>
 8007b48:	e7c7      	b.n	8007ada <__ssputs_r+0x46>
	...

08007b4c <_svfiprintf_r>:
 8007b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b50:	4698      	mov	r8, r3
 8007b52:	898b      	ldrh	r3, [r1, #12]
 8007b54:	4607      	mov	r7, r0
 8007b56:	061b      	lsls	r3, r3, #24
 8007b58:	460d      	mov	r5, r1
 8007b5a:	4614      	mov	r4, r2
 8007b5c:	b09d      	sub	sp, #116	; 0x74
 8007b5e:	d50e      	bpl.n	8007b7e <_svfiprintf_r+0x32>
 8007b60:	690b      	ldr	r3, [r1, #16]
 8007b62:	b963      	cbnz	r3, 8007b7e <_svfiprintf_r+0x32>
 8007b64:	2140      	movs	r1, #64	; 0x40
 8007b66:	f7ff ff21 	bl	80079ac <_malloc_r>
 8007b6a:	6028      	str	r0, [r5, #0]
 8007b6c:	6128      	str	r0, [r5, #16]
 8007b6e:	b920      	cbnz	r0, 8007b7a <_svfiprintf_r+0x2e>
 8007b70:	230c      	movs	r3, #12
 8007b72:	603b      	str	r3, [r7, #0]
 8007b74:	f04f 30ff 	mov.w	r0, #4294967295
 8007b78:	e0d1      	b.n	8007d1e <_svfiprintf_r+0x1d2>
 8007b7a:	2340      	movs	r3, #64	; 0x40
 8007b7c:	616b      	str	r3, [r5, #20]
 8007b7e:	2300      	movs	r3, #0
 8007b80:	9309      	str	r3, [sp, #36]	; 0x24
 8007b82:	2320      	movs	r3, #32
 8007b84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b88:	2330      	movs	r3, #48	; 0x30
 8007b8a:	f04f 0901 	mov.w	r9, #1
 8007b8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b92:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007d38 <_svfiprintf_r+0x1ec>
 8007b96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b9a:	4623      	mov	r3, r4
 8007b9c:	469a      	mov	sl, r3
 8007b9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ba2:	b10a      	cbz	r2, 8007ba8 <_svfiprintf_r+0x5c>
 8007ba4:	2a25      	cmp	r2, #37	; 0x25
 8007ba6:	d1f9      	bne.n	8007b9c <_svfiprintf_r+0x50>
 8007ba8:	ebba 0b04 	subs.w	fp, sl, r4
 8007bac:	d00b      	beq.n	8007bc6 <_svfiprintf_r+0x7a>
 8007bae:	465b      	mov	r3, fp
 8007bb0:	4622      	mov	r2, r4
 8007bb2:	4629      	mov	r1, r5
 8007bb4:	4638      	mov	r0, r7
 8007bb6:	f7ff ff6d 	bl	8007a94 <__ssputs_r>
 8007bba:	3001      	adds	r0, #1
 8007bbc:	f000 80aa 	beq.w	8007d14 <_svfiprintf_r+0x1c8>
 8007bc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bc2:	445a      	add	r2, fp
 8007bc4:	9209      	str	r2, [sp, #36]	; 0x24
 8007bc6:	f89a 3000 	ldrb.w	r3, [sl]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	f000 80a2 	beq.w	8007d14 <_svfiprintf_r+0x1c8>
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8007bd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bda:	f10a 0a01 	add.w	sl, sl, #1
 8007bde:	9304      	str	r3, [sp, #16]
 8007be0:	9307      	str	r3, [sp, #28]
 8007be2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007be6:	931a      	str	r3, [sp, #104]	; 0x68
 8007be8:	4654      	mov	r4, sl
 8007bea:	2205      	movs	r2, #5
 8007bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bf0:	4851      	ldr	r0, [pc, #324]	; (8007d38 <_svfiprintf_r+0x1ec>)
 8007bf2:	f7ff facf 	bl	8007194 <memchr>
 8007bf6:	9a04      	ldr	r2, [sp, #16]
 8007bf8:	b9d8      	cbnz	r0, 8007c32 <_svfiprintf_r+0xe6>
 8007bfa:	06d0      	lsls	r0, r2, #27
 8007bfc:	bf44      	itt	mi
 8007bfe:	2320      	movmi	r3, #32
 8007c00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c04:	0711      	lsls	r1, r2, #28
 8007c06:	bf44      	itt	mi
 8007c08:	232b      	movmi	r3, #43	; 0x2b
 8007c0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c0e:	f89a 3000 	ldrb.w	r3, [sl]
 8007c12:	2b2a      	cmp	r3, #42	; 0x2a
 8007c14:	d015      	beq.n	8007c42 <_svfiprintf_r+0xf6>
 8007c16:	4654      	mov	r4, sl
 8007c18:	2000      	movs	r0, #0
 8007c1a:	f04f 0c0a 	mov.w	ip, #10
 8007c1e:	9a07      	ldr	r2, [sp, #28]
 8007c20:	4621      	mov	r1, r4
 8007c22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c26:	3b30      	subs	r3, #48	; 0x30
 8007c28:	2b09      	cmp	r3, #9
 8007c2a:	d94e      	bls.n	8007cca <_svfiprintf_r+0x17e>
 8007c2c:	b1b0      	cbz	r0, 8007c5c <_svfiprintf_r+0x110>
 8007c2e:	9207      	str	r2, [sp, #28]
 8007c30:	e014      	b.n	8007c5c <_svfiprintf_r+0x110>
 8007c32:	eba0 0308 	sub.w	r3, r0, r8
 8007c36:	fa09 f303 	lsl.w	r3, r9, r3
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	46a2      	mov	sl, r4
 8007c3e:	9304      	str	r3, [sp, #16]
 8007c40:	e7d2      	b.n	8007be8 <_svfiprintf_r+0x9c>
 8007c42:	9b03      	ldr	r3, [sp, #12]
 8007c44:	1d19      	adds	r1, r3, #4
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	9103      	str	r1, [sp, #12]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	bfbb      	ittet	lt
 8007c4e:	425b      	neglt	r3, r3
 8007c50:	f042 0202 	orrlt.w	r2, r2, #2
 8007c54:	9307      	strge	r3, [sp, #28]
 8007c56:	9307      	strlt	r3, [sp, #28]
 8007c58:	bfb8      	it	lt
 8007c5a:	9204      	strlt	r2, [sp, #16]
 8007c5c:	7823      	ldrb	r3, [r4, #0]
 8007c5e:	2b2e      	cmp	r3, #46	; 0x2e
 8007c60:	d10c      	bne.n	8007c7c <_svfiprintf_r+0x130>
 8007c62:	7863      	ldrb	r3, [r4, #1]
 8007c64:	2b2a      	cmp	r3, #42	; 0x2a
 8007c66:	d135      	bne.n	8007cd4 <_svfiprintf_r+0x188>
 8007c68:	9b03      	ldr	r3, [sp, #12]
 8007c6a:	3402      	adds	r4, #2
 8007c6c:	1d1a      	adds	r2, r3, #4
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	9203      	str	r2, [sp, #12]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	bfb8      	it	lt
 8007c76:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c7a:	9305      	str	r3, [sp, #20]
 8007c7c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007d3c <_svfiprintf_r+0x1f0>
 8007c80:	2203      	movs	r2, #3
 8007c82:	4650      	mov	r0, sl
 8007c84:	7821      	ldrb	r1, [r4, #0]
 8007c86:	f7ff fa85 	bl	8007194 <memchr>
 8007c8a:	b140      	cbz	r0, 8007c9e <_svfiprintf_r+0x152>
 8007c8c:	2340      	movs	r3, #64	; 0x40
 8007c8e:	eba0 000a 	sub.w	r0, r0, sl
 8007c92:	fa03 f000 	lsl.w	r0, r3, r0
 8007c96:	9b04      	ldr	r3, [sp, #16]
 8007c98:	3401      	adds	r4, #1
 8007c9a:	4303      	orrs	r3, r0
 8007c9c:	9304      	str	r3, [sp, #16]
 8007c9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ca2:	2206      	movs	r2, #6
 8007ca4:	4826      	ldr	r0, [pc, #152]	; (8007d40 <_svfiprintf_r+0x1f4>)
 8007ca6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007caa:	f7ff fa73 	bl	8007194 <memchr>
 8007cae:	2800      	cmp	r0, #0
 8007cb0:	d038      	beq.n	8007d24 <_svfiprintf_r+0x1d8>
 8007cb2:	4b24      	ldr	r3, [pc, #144]	; (8007d44 <_svfiprintf_r+0x1f8>)
 8007cb4:	bb1b      	cbnz	r3, 8007cfe <_svfiprintf_r+0x1b2>
 8007cb6:	9b03      	ldr	r3, [sp, #12]
 8007cb8:	3307      	adds	r3, #7
 8007cba:	f023 0307 	bic.w	r3, r3, #7
 8007cbe:	3308      	adds	r3, #8
 8007cc0:	9303      	str	r3, [sp, #12]
 8007cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cc4:	4433      	add	r3, r6
 8007cc6:	9309      	str	r3, [sp, #36]	; 0x24
 8007cc8:	e767      	b.n	8007b9a <_svfiprintf_r+0x4e>
 8007cca:	460c      	mov	r4, r1
 8007ccc:	2001      	movs	r0, #1
 8007cce:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cd2:	e7a5      	b.n	8007c20 <_svfiprintf_r+0xd4>
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	f04f 0c0a 	mov.w	ip, #10
 8007cda:	4619      	mov	r1, r3
 8007cdc:	3401      	adds	r4, #1
 8007cde:	9305      	str	r3, [sp, #20]
 8007ce0:	4620      	mov	r0, r4
 8007ce2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ce6:	3a30      	subs	r2, #48	; 0x30
 8007ce8:	2a09      	cmp	r2, #9
 8007cea:	d903      	bls.n	8007cf4 <_svfiprintf_r+0x1a8>
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d0c5      	beq.n	8007c7c <_svfiprintf_r+0x130>
 8007cf0:	9105      	str	r1, [sp, #20]
 8007cf2:	e7c3      	b.n	8007c7c <_svfiprintf_r+0x130>
 8007cf4:	4604      	mov	r4, r0
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cfc:	e7f0      	b.n	8007ce0 <_svfiprintf_r+0x194>
 8007cfe:	ab03      	add	r3, sp, #12
 8007d00:	9300      	str	r3, [sp, #0]
 8007d02:	462a      	mov	r2, r5
 8007d04:	4638      	mov	r0, r7
 8007d06:	4b10      	ldr	r3, [pc, #64]	; (8007d48 <_svfiprintf_r+0x1fc>)
 8007d08:	a904      	add	r1, sp, #16
 8007d0a:	f7fd ffd9 	bl	8005cc0 <_printf_float>
 8007d0e:	1c42      	adds	r2, r0, #1
 8007d10:	4606      	mov	r6, r0
 8007d12:	d1d6      	bne.n	8007cc2 <_svfiprintf_r+0x176>
 8007d14:	89ab      	ldrh	r3, [r5, #12]
 8007d16:	065b      	lsls	r3, r3, #25
 8007d18:	f53f af2c 	bmi.w	8007b74 <_svfiprintf_r+0x28>
 8007d1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d1e:	b01d      	add	sp, #116	; 0x74
 8007d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d24:	ab03      	add	r3, sp, #12
 8007d26:	9300      	str	r3, [sp, #0]
 8007d28:	462a      	mov	r2, r5
 8007d2a:	4638      	mov	r0, r7
 8007d2c:	4b06      	ldr	r3, [pc, #24]	; (8007d48 <_svfiprintf_r+0x1fc>)
 8007d2e:	a904      	add	r1, sp, #16
 8007d30:	f7fe fa62 	bl	80061f8 <_printf_i>
 8007d34:	e7eb      	b.n	8007d0e <_svfiprintf_r+0x1c2>
 8007d36:	bf00      	nop
 8007d38:	080099b4 	.word	0x080099b4
 8007d3c:	080099ba 	.word	0x080099ba
 8007d40:	080099be 	.word	0x080099be
 8007d44:	08005cc1 	.word	0x08005cc1
 8007d48:	08007a95 	.word	0x08007a95

08007d4c <_sbrk_r>:
 8007d4c:	b538      	push	{r3, r4, r5, lr}
 8007d4e:	2300      	movs	r3, #0
 8007d50:	4d05      	ldr	r5, [pc, #20]	; (8007d68 <_sbrk_r+0x1c>)
 8007d52:	4604      	mov	r4, r0
 8007d54:	4608      	mov	r0, r1
 8007d56:	602b      	str	r3, [r5, #0]
 8007d58:	f7f9 fc8a 	bl	8001670 <_sbrk>
 8007d5c:	1c43      	adds	r3, r0, #1
 8007d5e:	d102      	bne.n	8007d66 <_sbrk_r+0x1a>
 8007d60:	682b      	ldr	r3, [r5, #0]
 8007d62:	b103      	cbz	r3, 8007d66 <_sbrk_r+0x1a>
 8007d64:	6023      	str	r3, [r4, #0]
 8007d66:	bd38      	pop	{r3, r4, r5, pc}
 8007d68:	20001718 	.word	0x20001718

08007d6c <__assert_func>:
 8007d6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d6e:	4614      	mov	r4, r2
 8007d70:	461a      	mov	r2, r3
 8007d72:	4b09      	ldr	r3, [pc, #36]	; (8007d98 <__assert_func+0x2c>)
 8007d74:	4605      	mov	r5, r0
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68d8      	ldr	r0, [r3, #12]
 8007d7a:	b14c      	cbz	r4, 8007d90 <__assert_func+0x24>
 8007d7c:	4b07      	ldr	r3, [pc, #28]	; (8007d9c <__assert_func+0x30>)
 8007d7e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d82:	9100      	str	r1, [sp, #0]
 8007d84:	462b      	mov	r3, r5
 8007d86:	4906      	ldr	r1, [pc, #24]	; (8007da0 <__assert_func+0x34>)
 8007d88:	f000 f80e 	bl	8007da8 <fiprintf>
 8007d8c:	f000 faaa 	bl	80082e4 <abort>
 8007d90:	4b04      	ldr	r3, [pc, #16]	; (8007da4 <__assert_func+0x38>)
 8007d92:	461c      	mov	r4, r3
 8007d94:	e7f3      	b.n	8007d7e <__assert_func+0x12>
 8007d96:	bf00      	nop
 8007d98:	20000188 	.word	0x20000188
 8007d9c:	080099c5 	.word	0x080099c5
 8007da0:	080099d2 	.word	0x080099d2
 8007da4:	08009a00 	.word	0x08009a00

08007da8 <fiprintf>:
 8007da8:	b40e      	push	{r1, r2, r3}
 8007daa:	b503      	push	{r0, r1, lr}
 8007dac:	4601      	mov	r1, r0
 8007dae:	ab03      	add	r3, sp, #12
 8007db0:	4805      	ldr	r0, [pc, #20]	; (8007dc8 <fiprintf+0x20>)
 8007db2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007db6:	6800      	ldr	r0, [r0, #0]
 8007db8:	9301      	str	r3, [sp, #4]
 8007dba:	f000 f895 	bl	8007ee8 <_vfiprintf_r>
 8007dbe:	b002      	add	sp, #8
 8007dc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007dc4:	b003      	add	sp, #12
 8007dc6:	4770      	bx	lr
 8007dc8:	20000188 	.word	0x20000188

08007dcc <__ascii_mbtowc>:
 8007dcc:	b082      	sub	sp, #8
 8007dce:	b901      	cbnz	r1, 8007dd2 <__ascii_mbtowc+0x6>
 8007dd0:	a901      	add	r1, sp, #4
 8007dd2:	b142      	cbz	r2, 8007de6 <__ascii_mbtowc+0x1a>
 8007dd4:	b14b      	cbz	r3, 8007dea <__ascii_mbtowc+0x1e>
 8007dd6:	7813      	ldrb	r3, [r2, #0]
 8007dd8:	600b      	str	r3, [r1, #0]
 8007dda:	7812      	ldrb	r2, [r2, #0]
 8007ddc:	1e10      	subs	r0, r2, #0
 8007dde:	bf18      	it	ne
 8007de0:	2001      	movne	r0, #1
 8007de2:	b002      	add	sp, #8
 8007de4:	4770      	bx	lr
 8007de6:	4610      	mov	r0, r2
 8007de8:	e7fb      	b.n	8007de2 <__ascii_mbtowc+0x16>
 8007dea:	f06f 0001 	mvn.w	r0, #1
 8007dee:	e7f8      	b.n	8007de2 <__ascii_mbtowc+0x16>

08007df0 <memmove>:
 8007df0:	4288      	cmp	r0, r1
 8007df2:	b510      	push	{r4, lr}
 8007df4:	eb01 0402 	add.w	r4, r1, r2
 8007df8:	d902      	bls.n	8007e00 <memmove+0x10>
 8007dfa:	4284      	cmp	r4, r0
 8007dfc:	4623      	mov	r3, r4
 8007dfe:	d807      	bhi.n	8007e10 <memmove+0x20>
 8007e00:	1e43      	subs	r3, r0, #1
 8007e02:	42a1      	cmp	r1, r4
 8007e04:	d008      	beq.n	8007e18 <memmove+0x28>
 8007e06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e0e:	e7f8      	b.n	8007e02 <memmove+0x12>
 8007e10:	4601      	mov	r1, r0
 8007e12:	4402      	add	r2, r0
 8007e14:	428a      	cmp	r2, r1
 8007e16:	d100      	bne.n	8007e1a <memmove+0x2a>
 8007e18:	bd10      	pop	{r4, pc}
 8007e1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e22:	e7f7      	b.n	8007e14 <memmove+0x24>

08007e24 <__malloc_lock>:
 8007e24:	4801      	ldr	r0, [pc, #4]	; (8007e2c <__malloc_lock+0x8>)
 8007e26:	f000 bc19 	b.w	800865c <__retarget_lock_acquire_recursive>
 8007e2a:	bf00      	nop
 8007e2c:	2000171c 	.word	0x2000171c

08007e30 <__malloc_unlock>:
 8007e30:	4801      	ldr	r0, [pc, #4]	; (8007e38 <__malloc_unlock+0x8>)
 8007e32:	f000 bc14 	b.w	800865e <__retarget_lock_release_recursive>
 8007e36:	bf00      	nop
 8007e38:	2000171c 	.word	0x2000171c

08007e3c <_realloc_r>:
 8007e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e40:	4680      	mov	r8, r0
 8007e42:	4614      	mov	r4, r2
 8007e44:	460e      	mov	r6, r1
 8007e46:	b921      	cbnz	r1, 8007e52 <_realloc_r+0x16>
 8007e48:	4611      	mov	r1, r2
 8007e4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e4e:	f7ff bdad 	b.w	80079ac <_malloc_r>
 8007e52:	b92a      	cbnz	r2, 8007e60 <_realloc_r+0x24>
 8007e54:	f7ff fd42 	bl	80078dc <_free_r>
 8007e58:	4625      	mov	r5, r4
 8007e5a:	4628      	mov	r0, r5
 8007e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e60:	f000 fc64 	bl	800872c <_malloc_usable_size_r>
 8007e64:	4284      	cmp	r4, r0
 8007e66:	4607      	mov	r7, r0
 8007e68:	d802      	bhi.n	8007e70 <_realloc_r+0x34>
 8007e6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007e6e:	d812      	bhi.n	8007e96 <_realloc_r+0x5a>
 8007e70:	4621      	mov	r1, r4
 8007e72:	4640      	mov	r0, r8
 8007e74:	f7ff fd9a 	bl	80079ac <_malloc_r>
 8007e78:	4605      	mov	r5, r0
 8007e7a:	2800      	cmp	r0, #0
 8007e7c:	d0ed      	beq.n	8007e5a <_realloc_r+0x1e>
 8007e7e:	42bc      	cmp	r4, r7
 8007e80:	4622      	mov	r2, r4
 8007e82:	4631      	mov	r1, r6
 8007e84:	bf28      	it	cs
 8007e86:	463a      	movcs	r2, r7
 8007e88:	f7fd fe66 	bl	8005b58 <memcpy>
 8007e8c:	4631      	mov	r1, r6
 8007e8e:	4640      	mov	r0, r8
 8007e90:	f7ff fd24 	bl	80078dc <_free_r>
 8007e94:	e7e1      	b.n	8007e5a <_realloc_r+0x1e>
 8007e96:	4635      	mov	r5, r6
 8007e98:	e7df      	b.n	8007e5a <_realloc_r+0x1e>

08007e9a <__sfputc_r>:
 8007e9a:	6893      	ldr	r3, [r2, #8]
 8007e9c:	b410      	push	{r4}
 8007e9e:	3b01      	subs	r3, #1
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	6093      	str	r3, [r2, #8]
 8007ea4:	da07      	bge.n	8007eb6 <__sfputc_r+0x1c>
 8007ea6:	6994      	ldr	r4, [r2, #24]
 8007ea8:	42a3      	cmp	r3, r4
 8007eaa:	db01      	blt.n	8007eb0 <__sfputc_r+0x16>
 8007eac:	290a      	cmp	r1, #10
 8007eae:	d102      	bne.n	8007eb6 <__sfputc_r+0x1c>
 8007eb0:	bc10      	pop	{r4}
 8007eb2:	f000 b949 	b.w	8008148 <__swbuf_r>
 8007eb6:	6813      	ldr	r3, [r2, #0]
 8007eb8:	1c58      	adds	r0, r3, #1
 8007eba:	6010      	str	r0, [r2, #0]
 8007ebc:	7019      	strb	r1, [r3, #0]
 8007ebe:	4608      	mov	r0, r1
 8007ec0:	bc10      	pop	{r4}
 8007ec2:	4770      	bx	lr

08007ec4 <__sfputs_r>:
 8007ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ec6:	4606      	mov	r6, r0
 8007ec8:	460f      	mov	r7, r1
 8007eca:	4614      	mov	r4, r2
 8007ecc:	18d5      	adds	r5, r2, r3
 8007ece:	42ac      	cmp	r4, r5
 8007ed0:	d101      	bne.n	8007ed6 <__sfputs_r+0x12>
 8007ed2:	2000      	movs	r0, #0
 8007ed4:	e007      	b.n	8007ee6 <__sfputs_r+0x22>
 8007ed6:	463a      	mov	r2, r7
 8007ed8:	4630      	mov	r0, r6
 8007eda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ede:	f7ff ffdc 	bl	8007e9a <__sfputc_r>
 8007ee2:	1c43      	adds	r3, r0, #1
 8007ee4:	d1f3      	bne.n	8007ece <__sfputs_r+0xa>
 8007ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007ee8 <_vfiprintf_r>:
 8007ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eec:	460d      	mov	r5, r1
 8007eee:	4614      	mov	r4, r2
 8007ef0:	4698      	mov	r8, r3
 8007ef2:	4606      	mov	r6, r0
 8007ef4:	b09d      	sub	sp, #116	; 0x74
 8007ef6:	b118      	cbz	r0, 8007f00 <_vfiprintf_r+0x18>
 8007ef8:	6983      	ldr	r3, [r0, #24]
 8007efa:	b90b      	cbnz	r3, 8007f00 <_vfiprintf_r+0x18>
 8007efc:	f000 fb10 	bl	8008520 <__sinit>
 8007f00:	4b89      	ldr	r3, [pc, #548]	; (8008128 <_vfiprintf_r+0x240>)
 8007f02:	429d      	cmp	r5, r3
 8007f04:	d11b      	bne.n	8007f3e <_vfiprintf_r+0x56>
 8007f06:	6875      	ldr	r5, [r6, #4]
 8007f08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f0a:	07d9      	lsls	r1, r3, #31
 8007f0c:	d405      	bmi.n	8007f1a <_vfiprintf_r+0x32>
 8007f0e:	89ab      	ldrh	r3, [r5, #12]
 8007f10:	059a      	lsls	r2, r3, #22
 8007f12:	d402      	bmi.n	8007f1a <_vfiprintf_r+0x32>
 8007f14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f16:	f000 fba1 	bl	800865c <__retarget_lock_acquire_recursive>
 8007f1a:	89ab      	ldrh	r3, [r5, #12]
 8007f1c:	071b      	lsls	r3, r3, #28
 8007f1e:	d501      	bpl.n	8007f24 <_vfiprintf_r+0x3c>
 8007f20:	692b      	ldr	r3, [r5, #16]
 8007f22:	b9eb      	cbnz	r3, 8007f60 <_vfiprintf_r+0x78>
 8007f24:	4629      	mov	r1, r5
 8007f26:	4630      	mov	r0, r6
 8007f28:	f000 f96e 	bl	8008208 <__swsetup_r>
 8007f2c:	b1c0      	cbz	r0, 8007f60 <_vfiprintf_r+0x78>
 8007f2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f30:	07dc      	lsls	r4, r3, #31
 8007f32:	d50e      	bpl.n	8007f52 <_vfiprintf_r+0x6a>
 8007f34:	f04f 30ff 	mov.w	r0, #4294967295
 8007f38:	b01d      	add	sp, #116	; 0x74
 8007f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f3e:	4b7b      	ldr	r3, [pc, #492]	; (800812c <_vfiprintf_r+0x244>)
 8007f40:	429d      	cmp	r5, r3
 8007f42:	d101      	bne.n	8007f48 <_vfiprintf_r+0x60>
 8007f44:	68b5      	ldr	r5, [r6, #8]
 8007f46:	e7df      	b.n	8007f08 <_vfiprintf_r+0x20>
 8007f48:	4b79      	ldr	r3, [pc, #484]	; (8008130 <_vfiprintf_r+0x248>)
 8007f4a:	429d      	cmp	r5, r3
 8007f4c:	bf08      	it	eq
 8007f4e:	68f5      	ldreq	r5, [r6, #12]
 8007f50:	e7da      	b.n	8007f08 <_vfiprintf_r+0x20>
 8007f52:	89ab      	ldrh	r3, [r5, #12]
 8007f54:	0598      	lsls	r0, r3, #22
 8007f56:	d4ed      	bmi.n	8007f34 <_vfiprintf_r+0x4c>
 8007f58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f5a:	f000 fb80 	bl	800865e <__retarget_lock_release_recursive>
 8007f5e:	e7e9      	b.n	8007f34 <_vfiprintf_r+0x4c>
 8007f60:	2300      	movs	r3, #0
 8007f62:	9309      	str	r3, [sp, #36]	; 0x24
 8007f64:	2320      	movs	r3, #32
 8007f66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f6a:	2330      	movs	r3, #48	; 0x30
 8007f6c:	f04f 0901 	mov.w	r9, #1
 8007f70:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f74:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008134 <_vfiprintf_r+0x24c>
 8007f78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f7c:	4623      	mov	r3, r4
 8007f7e:	469a      	mov	sl, r3
 8007f80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f84:	b10a      	cbz	r2, 8007f8a <_vfiprintf_r+0xa2>
 8007f86:	2a25      	cmp	r2, #37	; 0x25
 8007f88:	d1f9      	bne.n	8007f7e <_vfiprintf_r+0x96>
 8007f8a:	ebba 0b04 	subs.w	fp, sl, r4
 8007f8e:	d00b      	beq.n	8007fa8 <_vfiprintf_r+0xc0>
 8007f90:	465b      	mov	r3, fp
 8007f92:	4622      	mov	r2, r4
 8007f94:	4629      	mov	r1, r5
 8007f96:	4630      	mov	r0, r6
 8007f98:	f7ff ff94 	bl	8007ec4 <__sfputs_r>
 8007f9c:	3001      	adds	r0, #1
 8007f9e:	f000 80aa 	beq.w	80080f6 <_vfiprintf_r+0x20e>
 8007fa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fa4:	445a      	add	r2, fp
 8007fa6:	9209      	str	r2, [sp, #36]	; 0x24
 8007fa8:	f89a 3000 	ldrb.w	r3, [sl]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f000 80a2 	beq.w	80080f6 <_vfiprintf_r+0x20e>
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8007fb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fbc:	f10a 0a01 	add.w	sl, sl, #1
 8007fc0:	9304      	str	r3, [sp, #16]
 8007fc2:	9307      	str	r3, [sp, #28]
 8007fc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fc8:	931a      	str	r3, [sp, #104]	; 0x68
 8007fca:	4654      	mov	r4, sl
 8007fcc:	2205      	movs	r2, #5
 8007fce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fd2:	4858      	ldr	r0, [pc, #352]	; (8008134 <_vfiprintf_r+0x24c>)
 8007fd4:	f7ff f8de 	bl	8007194 <memchr>
 8007fd8:	9a04      	ldr	r2, [sp, #16]
 8007fda:	b9d8      	cbnz	r0, 8008014 <_vfiprintf_r+0x12c>
 8007fdc:	06d1      	lsls	r1, r2, #27
 8007fde:	bf44      	itt	mi
 8007fe0:	2320      	movmi	r3, #32
 8007fe2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fe6:	0713      	lsls	r3, r2, #28
 8007fe8:	bf44      	itt	mi
 8007fea:	232b      	movmi	r3, #43	; 0x2b
 8007fec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ff0:	f89a 3000 	ldrb.w	r3, [sl]
 8007ff4:	2b2a      	cmp	r3, #42	; 0x2a
 8007ff6:	d015      	beq.n	8008024 <_vfiprintf_r+0x13c>
 8007ff8:	4654      	mov	r4, sl
 8007ffa:	2000      	movs	r0, #0
 8007ffc:	f04f 0c0a 	mov.w	ip, #10
 8008000:	9a07      	ldr	r2, [sp, #28]
 8008002:	4621      	mov	r1, r4
 8008004:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008008:	3b30      	subs	r3, #48	; 0x30
 800800a:	2b09      	cmp	r3, #9
 800800c:	d94e      	bls.n	80080ac <_vfiprintf_r+0x1c4>
 800800e:	b1b0      	cbz	r0, 800803e <_vfiprintf_r+0x156>
 8008010:	9207      	str	r2, [sp, #28]
 8008012:	e014      	b.n	800803e <_vfiprintf_r+0x156>
 8008014:	eba0 0308 	sub.w	r3, r0, r8
 8008018:	fa09 f303 	lsl.w	r3, r9, r3
 800801c:	4313      	orrs	r3, r2
 800801e:	46a2      	mov	sl, r4
 8008020:	9304      	str	r3, [sp, #16]
 8008022:	e7d2      	b.n	8007fca <_vfiprintf_r+0xe2>
 8008024:	9b03      	ldr	r3, [sp, #12]
 8008026:	1d19      	adds	r1, r3, #4
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	9103      	str	r1, [sp, #12]
 800802c:	2b00      	cmp	r3, #0
 800802e:	bfbb      	ittet	lt
 8008030:	425b      	neglt	r3, r3
 8008032:	f042 0202 	orrlt.w	r2, r2, #2
 8008036:	9307      	strge	r3, [sp, #28]
 8008038:	9307      	strlt	r3, [sp, #28]
 800803a:	bfb8      	it	lt
 800803c:	9204      	strlt	r2, [sp, #16]
 800803e:	7823      	ldrb	r3, [r4, #0]
 8008040:	2b2e      	cmp	r3, #46	; 0x2e
 8008042:	d10c      	bne.n	800805e <_vfiprintf_r+0x176>
 8008044:	7863      	ldrb	r3, [r4, #1]
 8008046:	2b2a      	cmp	r3, #42	; 0x2a
 8008048:	d135      	bne.n	80080b6 <_vfiprintf_r+0x1ce>
 800804a:	9b03      	ldr	r3, [sp, #12]
 800804c:	3402      	adds	r4, #2
 800804e:	1d1a      	adds	r2, r3, #4
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	9203      	str	r2, [sp, #12]
 8008054:	2b00      	cmp	r3, #0
 8008056:	bfb8      	it	lt
 8008058:	f04f 33ff 	movlt.w	r3, #4294967295
 800805c:	9305      	str	r3, [sp, #20]
 800805e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008138 <_vfiprintf_r+0x250>
 8008062:	2203      	movs	r2, #3
 8008064:	4650      	mov	r0, sl
 8008066:	7821      	ldrb	r1, [r4, #0]
 8008068:	f7ff f894 	bl	8007194 <memchr>
 800806c:	b140      	cbz	r0, 8008080 <_vfiprintf_r+0x198>
 800806e:	2340      	movs	r3, #64	; 0x40
 8008070:	eba0 000a 	sub.w	r0, r0, sl
 8008074:	fa03 f000 	lsl.w	r0, r3, r0
 8008078:	9b04      	ldr	r3, [sp, #16]
 800807a:	3401      	adds	r4, #1
 800807c:	4303      	orrs	r3, r0
 800807e:	9304      	str	r3, [sp, #16]
 8008080:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008084:	2206      	movs	r2, #6
 8008086:	482d      	ldr	r0, [pc, #180]	; (800813c <_vfiprintf_r+0x254>)
 8008088:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800808c:	f7ff f882 	bl	8007194 <memchr>
 8008090:	2800      	cmp	r0, #0
 8008092:	d03f      	beq.n	8008114 <_vfiprintf_r+0x22c>
 8008094:	4b2a      	ldr	r3, [pc, #168]	; (8008140 <_vfiprintf_r+0x258>)
 8008096:	bb1b      	cbnz	r3, 80080e0 <_vfiprintf_r+0x1f8>
 8008098:	9b03      	ldr	r3, [sp, #12]
 800809a:	3307      	adds	r3, #7
 800809c:	f023 0307 	bic.w	r3, r3, #7
 80080a0:	3308      	adds	r3, #8
 80080a2:	9303      	str	r3, [sp, #12]
 80080a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080a6:	443b      	add	r3, r7
 80080a8:	9309      	str	r3, [sp, #36]	; 0x24
 80080aa:	e767      	b.n	8007f7c <_vfiprintf_r+0x94>
 80080ac:	460c      	mov	r4, r1
 80080ae:	2001      	movs	r0, #1
 80080b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80080b4:	e7a5      	b.n	8008002 <_vfiprintf_r+0x11a>
 80080b6:	2300      	movs	r3, #0
 80080b8:	f04f 0c0a 	mov.w	ip, #10
 80080bc:	4619      	mov	r1, r3
 80080be:	3401      	adds	r4, #1
 80080c0:	9305      	str	r3, [sp, #20]
 80080c2:	4620      	mov	r0, r4
 80080c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080c8:	3a30      	subs	r2, #48	; 0x30
 80080ca:	2a09      	cmp	r2, #9
 80080cc:	d903      	bls.n	80080d6 <_vfiprintf_r+0x1ee>
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d0c5      	beq.n	800805e <_vfiprintf_r+0x176>
 80080d2:	9105      	str	r1, [sp, #20]
 80080d4:	e7c3      	b.n	800805e <_vfiprintf_r+0x176>
 80080d6:	4604      	mov	r4, r0
 80080d8:	2301      	movs	r3, #1
 80080da:	fb0c 2101 	mla	r1, ip, r1, r2
 80080de:	e7f0      	b.n	80080c2 <_vfiprintf_r+0x1da>
 80080e0:	ab03      	add	r3, sp, #12
 80080e2:	9300      	str	r3, [sp, #0]
 80080e4:	462a      	mov	r2, r5
 80080e6:	4630      	mov	r0, r6
 80080e8:	4b16      	ldr	r3, [pc, #88]	; (8008144 <_vfiprintf_r+0x25c>)
 80080ea:	a904      	add	r1, sp, #16
 80080ec:	f7fd fde8 	bl	8005cc0 <_printf_float>
 80080f0:	4607      	mov	r7, r0
 80080f2:	1c78      	adds	r0, r7, #1
 80080f4:	d1d6      	bne.n	80080a4 <_vfiprintf_r+0x1bc>
 80080f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080f8:	07d9      	lsls	r1, r3, #31
 80080fa:	d405      	bmi.n	8008108 <_vfiprintf_r+0x220>
 80080fc:	89ab      	ldrh	r3, [r5, #12]
 80080fe:	059a      	lsls	r2, r3, #22
 8008100:	d402      	bmi.n	8008108 <_vfiprintf_r+0x220>
 8008102:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008104:	f000 faab 	bl	800865e <__retarget_lock_release_recursive>
 8008108:	89ab      	ldrh	r3, [r5, #12]
 800810a:	065b      	lsls	r3, r3, #25
 800810c:	f53f af12 	bmi.w	8007f34 <_vfiprintf_r+0x4c>
 8008110:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008112:	e711      	b.n	8007f38 <_vfiprintf_r+0x50>
 8008114:	ab03      	add	r3, sp, #12
 8008116:	9300      	str	r3, [sp, #0]
 8008118:	462a      	mov	r2, r5
 800811a:	4630      	mov	r0, r6
 800811c:	4b09      	ldr	r3, [pc, #36]	; (8008144 <_vfiprintf_r+0x25c>)
 800811e:	a904      	add	r1, sp, #16
 8008120:	f7fe f86a 	bl	80061f8 <_printf_i>
 8008124:	e7e4      	b.n	80080f0 <_vfiprintf_r+0x208>
 8008126:	bf00      	nop
 8008128:	08009b2c 	.word	0x08009b2c
 800812c:	08009b4c 	.word	0x08009b4c
 8008130:	08009b0c 	.word	0x08009b0c
 8008134:	080099b4 	.word	0x080099b4
 8008138:	080099ba 	.word	0x080099ba
 800813c:	080099be 	.word	0x080099be
 8008140:	08005cc1 	.word	0x08005cc1
 8008144:	08007ec5 	.word	0x08007ec5

08008148 <__swbuf_r>:
 8008148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800814a:	460e      	mov	r6, r1
 800814c:	4614      	mov	r4, r2
 800814e:	4605      	mov	r5, r0
 8008150:	b118      	cbz	r0, 800815a <__swbuf_r+0x12>
 8008152:	6983      	ldr	r3, [r0, #24]
 8008154:	b90b      	cbnz	r3, 800815a <__swbuf_r+0x12>
 8008156:	f000 f9e3 	bl	8008520 <__sinit>
 800815a:	4b21      	ldr	r3, [pc, #132]	; (80081e0 <__swbuf_r+0x98>)
 800815c:	429c      	cmp	r4, r3
 800815e:	d12b      	bne.n	80081b8 <__swbuf_r+0x70>
 8008160:	686c      	ldr	r4, [r5, #4]
 8008162:	69a3      	ldr	r3, [r4, #24]
 8008164:	60a3      	str	r3, [r4, #8]
 8008166:	89a3      	ldrh	r3, [r4, #12]
 8008168:	071a      	lsls	r2, r3, #28
 800816a:	d52f      	bpl.n	80081cc <__swbuf_r+0x84>
 800816c:	6923      	ldr	r3, [r4, #16]
 800816e:	b36b      	cbz	r3, 80081cc <__swbuf_r+0x84>
 8008170:	6923      	ldr	r3, [r4, #16]
 8008172:	6820      	ldr	r0, [r4, #0]
 8008174:	b2f6      	uxtb	r6, r6
 8008176:	1ac0      	subs	r0, r0, r3
 8008178:	6963      	ldr	r3, [r4, #20]
 800817a:	4637      	mov	r7, r6
 800817c:	4283      	cmp	r3, r0
 800817e:	dc04      	bgt.n	800818a <__swbuf_r+0x42>
 8008180:	4621      	mov	r1, r4
 8008182:	4628      	mov	r0, r5
 8008184:	f000 f938 	bl	80083f8 <_fflush_r>
 8008188:	bb30      	cbnz	r0, 80081d8 <__swbuf_r+0x90>
 800818a:	68a3      	ldr	r3, [r4, #8]
 800818c:	3001      	adds	r0, #1
 800818e:	3b01      	subs	r3, #1
 8008190:	60a3      	str	r3, [r4, #8]
 8008192:	6823      	ldr	r3, [r4, #0]
 8008194:	1c5a      	adds	r2, r3, #1
 8008196:	6022      	str	r2, [r4, #0]
 8008198:	701e      	strb	r6, [r3, #0]
 800819a:	6963      	ldr	r3, [r4, #20]
 800819c:	4283      	cmp	r3, r0
 800819e:	d004      	beq.n	80081aa <__swbuf_r+0x62>
 80081a0:	89a3      	ldrh	r3, [r4, #12]
 80081a2:	07db      	lsls	r3, r3, #31
 80081a4:	d506      	bpl.n	80081b4 <__swbuf_r+0x6c>
 80081a6:	2e0a      	cmp	r6, #10
 80081a8:	d104      	bne.n	80081b4 <__swbuf_r+0x6c>
 80081aa:	4621      	mov	r1, r4
 80081ac:	4628      	mov	r0, r5
 80081ae:	f000 f923 	bl	80083f8 <_fflush_r>
 80081b2:	b988      	cbnz	r0, 80081d8 <__swbuf_r+0x90>
 80081b4:	4638      	mov	r0, r7
 80081b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081b8:	4b0a      	ldr	r3, [pc, #40]	; (80081e4 <__swbuf_r+0x9c>)
 80081ba:	429c      	cmp	r4, r3
 80081bc:	d101      	bne.n	80081c2 <__swbuf_r+0x7a>
 80081be:	68ac      	ldr	r4, [r5, #8]
 80081c0:	e7cf      	b.n	8008162 <__swbuf_r+0x1a>
 80081c2:	4b09      	ldr	r3, [pc, #36]	; (80081e8 <__swbuf_r+0xa0>)
 80081c4:	429c      	cmp	r4, r3
 80081c6:	bf08      	it	eq
 80081c8:	68ec      	ldreq	r4, [r5, #12]
 80081ca:	e7ca      	b.n	8008162 <__swbuf_r+0x1a>
 80081cc:	4621      	mov	r1, r4
 80081ce:	4628      	mov	r0, r5
 80081d0:	f000 f81a 	bl	8008208 <__swsetup_r>
 80081d4:	2800      	cmp	r0, #0
 80081d6:	d0cb      	beq.n	8008170 <__swbuf_r+0x28>
 80081d8:	f04f 37ff 	mov.w	r7, #4294967295
 80081dc:	e7ea      	b.n	80081b4 <__swbuf_r+0x6c>
 80081de:	bf00      	nop
 80081e0:	08009b2c 	.word	0x08009b2c
 80081e4:	08009b4c 	.word	0x08009b4c
 80081e8:	08009b0c 	.word	0x08009b0c

080081ec <__ascii_wctomb>:
 80081ec:	4603      	mov	r3, r0
 80081ee:	4608      	mov	r0, r1
 80081f0:	b141      	cbz	r1, 8008204 <__ascii_wctomb+0x18>
 80081f2:	2aff      	cmp	r2, #255	; 0xff
 80081f4:	d904      	bls.n	8008200 <__ascii_wctomb+0x14>
 80081f6:	228a      	movs	r2, #138	; 0x8a
 80081f8:	f04f 30ff 	mov.w	r0, #4294967295
 80081fc:	601a      	str	r2, [r3, #0]
 80081fe:	4770      	bx	lr
 8008200:	2001      	movs	r0, #1
 8008202:	700a      	strb	r2, [r1, #0]
 8008204:	4770      	bx	lr
	...

08008208 <__swsetup_r>:
 8008208:	4b32      	ldr	r3, [pc, #200]	; (80082d4 <__swsetup_r+0xcc>)
 800820a:	b570      	push	{r4, r5, r6, lr}
 800820c:	681d      	ldr	r5, [r3, #0]
 800820e:	4606      	mov	r6, r0
 8008210:	460c      	mov	r4, r1
 8008212:	b125      	cbz	r5, 800821e <__swsetup_r+0x16>
 8008214:	69ab      	ldr	r3, [r5, #24]
 8008216:	b913      	cbnz	r3, 800821e <__swsetup_r+0x16>
 8008218:	4628      	mov	r0, r5
 800821a:	f000 f981 	bl	8008520 <__sinit>
 800821e:	4b2e      	ldr	r3, [pc, #184]	; (80082d8 <__swsetup_r+0xd0>)
 8008220:	429c      	cmp	r4, r3
 8008222:	d10f      	bne.n	8008244 <__swsetup_r+0x3c>
 8008224:	686c      	ldr	r4, [r5, #4]
 8008226:	89a3      	ldrh	r3, [r4, #12]
 8008228:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800822c:	0719      	lsls	r1, r3, #28
 800822e:	d42c      	bmi.n	800828a <__swsetup_r+0x82>
 8008230:	06dd      	lsls	r5, r3, #27
 8008232:	d411      	bmi.n	8008258 <__swsetup_r+0x50>
 8008234:	2309      	movs	r3, #9
 8008236:	6033      	str	r3, [r6, #0]
 8008238:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800823c:	f04f 30ff 	mov.w	r0, #4294967295
 8008240:	81a3      	strh	r3, [r4, #12]
 8008242:	e03e      	b.n	80082c2 <__swsetup_r+0xba>
 8008244:	4b25      	ldr	r3, [pc, #148]	; (80082dc <__swsetup_r+0xd4>)
 8008246:	429c      	cmp	r4, r3
 8008248:	d101      	bne.n	800824e <__swsetup_r+0x46>
 800824a:	68ac      	ldr	r4, [r5, #8]
 800824c:	e7eb      	b.n	8008226 <__swsetup_r+0x1e>
 800824e:	4b24      	ldr	r3, [pc, #144]	; (80082e0 <__swsetup_r+0xd8>)
 8008250:	429c      	cmp	r4, r3
 8008252:	bf08      	it	eq
 8008254:	68ec      	ldreq	r4, [r5, #12]
 8008256:	e7e6      	b.n	8008226 <__swsetup_r+0x1e>
 8008258:	0758      	lsls	r0, r3, #29
 800825a:	d512      	bpl.n	8008282 <__swsetup_r+0x7a>
 800825c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800825e:	b141      	cbz	r1, 8008272 <__swsetup_r+0x6a>
 8008260:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008264:	4299      	cmp	r1, r3
 8008266:	d002      	beq.n	800826e <__swsetup_r+0x66>
 8008268:	4630      	mov	r0, r6
 800826a:	f7ff fb37 	bl	80078dc <_free_r>
 800826e:	2300      	movs	r3, #0
 8008270:	6363      	str	r3, [r4, #52]	; 0x34
 8008272:	89a3      	ldrh	r3, [r4, #12]
 8008274:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008278:	81a3      	strh	r3, [r4, #12]
 800827a:	2300      	movs	r3, #0
 800827c:	6063      	str	r3, [r4, #4]
 800827e:	6923      	ldr	r3, [r4, #16]
 8008280:	6023      	str	r3, [r4, #0]
 8008282:	89a3      	ldrh	r3, [r4, #12]
 8008284:	f043 0308 	orr.w	r3, r3, #8
 8008288:	81a3      	strh	r3, [r4, #12]
 800828a:	6923      	ldr	r3, [r4, #16]
 800828c:	b94b      	cbnz	r3, 80082a2 <__swsetup_r+0x9a>
 800828e:	89a3      	ldrh	r3, [r4, #12]
 8008290:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008298:	d003      	beq.n	80082a2 <__swsetup_r+0x9a>
 800829a:	4621      	mov	r1, r4
 800829c:	4630      	mov	r0, r6
 800829e:	f000 fa05 	bl	80086ac <__smakebuf_r>
 80082a2:	89a0      	ldrh	r0, [r4, #12]
 80082a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082a8:	f010 0301 	ands.w	r3, r0, #1
 80082ac:	d00a      	beq.n	80082c4 <__swsetup_r+0xbc>
 80082ae:	2300      	movs	r3, #0
 80082b0:	60a3      	str	r3, [r4, #8]
 80082b2:	6963      	ldr	r3, [r4, #20]
 80082b4:	425b      	negs	r3, r3
 80082b6:	61a3      	str	r3, [r4, #24]
 80082b8:	6923      	ldr	r3, [r4, #16]
 80082ba:	b943      	cbnz	r3, 80082ce <__swsetup_r+0xc6>
 80082bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80082c0:	d1ba      	bne.n	8008238 <__swsetup_r+0x30>
 80082c2:	bd70      	pop	{r4, r5, r6, pc}
 80082c4:	0781      	lsls	r1, r0, #30
 80082c6:	bf58      	it	pl
 80082c8:	6963      	ldrpl	r3, [r4, #20]
 80082ca:	60a3      	str	r3, [r4, #8]
 80082cc:	e7f4      	b.n	80082b8 <__swsetup_r+0xb0>
 80082ce:	2000      	movs	r0, #0
 80082d0:	e7f7      	b.n	80082c2 <__swsetup_r+0xba>
 80082d2:	bf00      	nop
 80082d4:	20000188 	.word	0x20000188
 80082d8:	08009b2c 	.word	0x08009b2c
 80082dc:	08009b4c 	.word	0x08009b4c
 80082e0:	08009b0c 	.word	0x08009b0c

080082e4 <abort>:
 80082e4:	2006      	movs	r0, #6
 80082e6:	b508      	push	{r3, lr}
 80082e8:	f000 fa50 	bl	800878c <raise>
 80082ec:	2001      	movs	r0, #1
 80082ee:	f7f9 f991 	bl	8001614 <_exit>
	...

080082f4 <__sflush_r>:
 80082f4:	898a      	ldrh	r2, [r1, #12]
 80082f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f8:	4605      	mov	r5, r0
 80082fa:	0710      	lsls	r0, r2, #28
 80082fc:	460c      	mov	r4, r1
 80082fe:	d457      	bmi.n	80083b0 <__sflush_r+0xbc>
 8008300:	684b      	ldr	r3, [r1, #4]
 8008302:	2b00      	cmp	r3, #0
 8008304:	dc04      	bgt.n	8008310 <__sflush_r+0x1c>
 8008306:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008308:	2b00      	cmp	r3, #0
 800830a:	dc01      	bgt.n	8008310 <__sflush_r+0x1c>
 800830c:	2000      	movs	r0, #0
 800830e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008310:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008312:	2e00      	cmp	r6, #0
 8008314:	d0fa      	beq.n	800830c <__sflush_r+0x18>
 8008316:	2300      	movs	r3, #0
 8008318:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800831c:	682f      	ldr	r7, [r5, #0]
 800831e:	602b      	str	r3, [r5, #0]
 8008320:	d032      	beq.n	8008388 <__sflush_r+0x94>
 8008322:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008324:	89a3      	ldrh	r3, [r4, #12]
 8008326:	075a      	lsls	r2, r3, #29
 8008328:	d505      	bpl.n	8008336 <__sflush_r+0x42>
 800832a:	6863      	ldr	r3, [r4, #4]
 800832c:	1ac0      	subs	r0, r0, r3
 800832e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008330:	b10b      	cbz	r3, 8008336 <__sflush_r+0x42>
 8008332:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008334:	1ac0      	subs	r0, r0, r3
 8008336:	2300      	movs	r3, #0
 8008338:	4602      	mov	r2, r0
 800833a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800833c:	4628      	mov	r0, r5
 800833e:	6a21      	ldr	r1, [r4, #32]
 8008340:	47b0      	blx	r6
 8008342:	1c43      	adds	r3, r0, #1
 8008344:	89a3      	ldrh	r3, [r4, #12]
 8008346:	d106      	bne.n	8008356 <__sflush_r+0x62>
 8008348:	6829      	ldr	r1, [r5, #0]
 800834a:	291d      	cmp	r1, #29
 800834c:	d82c      	bhi.n	80083a8 <__sflush_r+0xb4>
 800834e:	4a29      	ldr	r2, [pc, #164]	; (80083f4 <__sflush_r+0x100>)
 8008350:	40ca      	lsrs	r2, r1
 8008352:	07d6      	lsls	r6, r2, #31
 8008354:	d528      	bpl.n	80083a8 <__sflush_r+0xb4>
 8008356:	2200      	movs	r2, #0
 8008358:	6062      	str	r2, [r4, #4]
 800835a:	6922      	ldr	r2, [r4, #16]
 800835c:	04d9      	lsls	r1, r3, #19
 800835e:	6022      	str	r2, [r4, #0]
 8008360:	d504      	bpl.n	800836c <__sflush_r+0x78>
 8008362:	1c42      	adds	r2, r0, #1
 8008364:	d101      	bne.n	800836a <__sflush_r+0x76>
 8008366:	682b      	ldr	r3, [r5, #0]
 8008368:	b903      	cbnz	r3, 800836c <__sflush_r+0x78>
 800836a:	6560      	str	r0, [r4, #84]	; 0x54
 800836c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800836e:	602f      	str	r7, [r5, #0]
 8008370:	2900      	cmp	r1, #0
 8008372:	d0cb      	beq.n	800830c <__sflush_r+0x18>
 8008374:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008378:	4299      	cmp	r1, r3
 800837a:	d002      	beq.n	8008382 <__sflush_r+0x8e>
 800837c:	4628      	mov	r0, r5
 800837e:	f7ff faad 	bl	80078dc <_free_r>
 8008382:	2000      	movs	r0, #0
 8008384:	6360      	str	r0, [r4, #52]	; 0x34
 8008386:	e7c2      	b.n	800830e <__sflush_r+0x1a>
 8008388:	6a21      	ldr	r1, [r4, #32]
 800838a:	2301      	movs	r3, #1
 800838c:	4628      	mov	r0, r5
 800838e:	47b0      	blx	r6
 8008390:	1c41      	adds	r1, r0, #1
 8008392:	d1c7      	bne.n	8008324 <__sflush_r+0x30>
 8008394:	682b      	ldr	r3, [r5, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d0c4      	beq.n	8008324 <__sflush_r+0x30>
 800839a:	2b1d      	cmp	r3, #29
 800839c:	d001      	beq.n	80083a2 <__sflush_r+0xae>
 800839e:	2b16      	cmp	r3, #22
 80083a0:	d101      	bne.n	80083a6 <__sflush_r+0xb2>
 80083a2:	602f      	str	r7, [r5, #0]
 80083a4:	e7b2      	b.n	800830c <__sflush_r+0x18>
 80083a6:	89a3      	ldrh	r3, [r4, #12]
 80083a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083ac:	81a3      	strh	r3, [r4, #12]
 80083ae:	e7ae      	b.n	800830e <__sflush_r+0x1a>
 80083b0:	690f      	ldr	r7, [r1, #16]
 80083b2:	2f00      	cmp	r7, #0
 80083b4:	d0aa      	beq.n	800830c <__sflush_r+0x18>
 80083b6:	0793      	lsls	r3, r2, #30
 80083b8:	bf18      	it	ne
 80083ba:	2300      	movne	r3, #0
 80083bc:	680e      	ldr	r6, [r1, #0]
 80083be:	bf08      	it	eq
 80083c0:	694b      	ldreq	r3, [r1, #20]
 80083c2:	1bf6      	subs	r6, r6, r7
 80083c4:	600f      	str	r7, [r1, #0]
 80083c6:	608b      	str	r3, [r1, #8]
 80083c8:	2e00      	cmp	r6, #0
 80083ca:	dd9f      	ble.n	800830c <__sflush_r+0x18>
 80083cc:	4633      	mov	r3, r6
 80083ce:	463a      	mov	r2, r7
 80083d0:	4628      	mov	r0, r5
 80083d2:	6a21      	ldr	r1, [r4, #32]
 80083d4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80083d8:	47e0      	blx	ip
 80083da:	2800      	cmp	r0, #0
 80083dc:	dc06      	bgt.n	80083ec <__sflush_r+0xf8>
 80083de:	89a3      	ldrh	r3, [r4, #12]
 80083e0:	f04f 30ff 	mov.w	r0, #4294967295
 80083e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083e8:	81a3      	strh	r3, [r4, #12]
 80083ea:	e790      	b.n	800830e <__sflush_r+0x1a>
 80083ec:	4407      	add	r7, r0
 80083ee:	1a36      	subs	r6, r6, r0
 80083f0:	e7ea      	b.n	80083c8 <__sflush_r+0xd4>
 80083f2:	bf00      	nop
 80083f4:	20400001 	.word	0x20400001

080083f8 <_fflush_r>:
 80083f8:	b538      	push	{r3, r4, r5, lr}
 80083fa:	690b      	ldr	r3, [r1, #16]
 80083fc:	4605      	mov	r5, r0
 80083fe:	460c      	mov	r4, r1
 8008400:	b913      	cbnz	r3, 8008408 <_fflush_r+0x10>
 8008402:	2500      	movs	r5, #0
 8008404:	4628      	mov	r0, r5
 8008406:	bd38      	pop	{r3, r4, r5, pc}
 8008408:	b118      	cbz	r0, 8008412 <_fflush_r+0x1a>
 800840a:	6983      	ldr	r3, [r0, #24]
 800840c:	b90b      	cbnz	r3, 8008412 <_fflush_r+0x1a>
 800840e:	f000 f887 	bl	8008520 <__sinit>
 8008412:	4b14      	ldr	r3, [pc, #80]	; (8008464 <_fflush_r+0x6c>)
 8008414:	429c      	cmp	r4, r3
 8008416:	d11b      	bne.n	8008450 <_fflush_r+0x58>
 8008418:	686c      	ldr	r4, [r5, #4]
 800841a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d0ef      	beq.n	8008402 <_fflush_r+0xa>
 8008422:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008424:	07d0      	lsls	r0, r2, #31
 8008426:	d404      	bmi.n	8008432 <_fflush_r+0x3a>
 8008428:	0599      	lsls	r1, r3, #22
 800842a:	d402      	bmi.n	8008432 <_fflush_r+0x3a>
 800842c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800842e:	f000 f915 	bl	800865c <__retarget_lock_acquire_recursive>
 8008432:	4628      	mov	r0, r5
 8008434:	4621      	mov	r1, r4
 8008436:	f7ff ff5d 	bl	80082f4 <__sflush_r>
 800843a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800843c:	4605      	mov	r5, r0
 800843e:	07da      	lsls	r2, r3, #31
 8008440:	d4e0      	bmi.n	8008404 <_fflush_r+0xc>
 8008442:	89a3      	ldrh	r3, [r4, #12]
 8008444:	059b      	lsls	r3, r3, #22
 8008446:	d4dd      	bmi.n	8008404 <_fflush_r+0xc>
 8008448:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800844a:	f000 f908 	bl	800865e <__retarget_lock_release_recursive>
 800844e:	e7d9      	b.n	8008404 <_fflush_r+0xc>
 8008450:	4b05      	ldr	r3, [pc, #20]	; (8008468 <_fflush_r+0x70>)
 8008452:	429c      	cmp	r4, r3
 8008454:	d101      	bne.n	800845a <_fflush_r+0x62>
 8008456:	68ac      	ldr	r4, [r5, #8]
 8008458:	e7df      	b.n	800841a <_fflush_r+0x22>
 800845a:	4b04      	ldr	r3, [pc, #16]	; (800846c <_fflush_r+0x74>)
 800845c:	429c      	cmp	r4, r3
 800845e:	bf08      	it	eq
 8008460:	68ec      	ldreq	r4, [r5, #12]
 8008462:	e7da      	b.n	800841a <_fflush_r+0x22>
 8008464:	08009b2c 	.word	0x08009b2c
 8008468:	08009b4c 	.word	0x08009b4c
 800846c:	08009b0c 	.word	0x08009b0c

08008470 <std>:
 8008470:	2300      	movs	r3, #0
 8008472:	b510      	push	{r4, lr}
 8008474:	4604      	mov	r4, r0
 8008476:	e9c0 3300 	strd	r3, r3, [r0]
 800847a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800847e:	6083      	str	r3, [r0, #8]
 8008480:	8181      	strh	r1, [r0, #12]
 8008482:	6643      	str	r3, [r0, #100]	; 0x64
 8008484:	81c2      	strh	r2, [r0, #14]
 8008486:	6183      	str	r3, [r0, #24]
 8008488:	4619      	mov	r1, r3
 800848a:	2208      	movs	r2, #8
 800848c:	305c      	adds	r0, #92	; 0x5c
 800848e:	f7fd fb71 	bl	8005b74 <memset>
 8008492:	4b05      	ldr	r3, [pc, #20]	; (80084a8 <std+0x38>)
 8008494:	6224      	str	r4, [r4, #32]
 8008496:	6263      	str	r3, [r4, #36]	; 0x24
 8008498:	4b04      	ldr	r3, [pc, #16]	; (80084ac <std+0x3c>)
 800849a:	62a3      	str	r3, [r4, #40]	; 0x28
 800849c:	4b04      	ldr	r3, [pc, #16]	; (80084b0 <std+0x40>)
 800849e:	62e3      	str	r3, [r4, #44]	; 0x2c
 80084a0:	4b04      	ldr	r3, [pc, #16]	; (80084b4 <std+0x44>)
 80084a2:	6323      	str	r3, [r4, #48]	; 0x30
 80084a4:	bd10      	pop	{r4, pc}
 80084a6:	bf00      	nop
 80084a8:	080087c5 	.word	0x080087c5
 80084ac:	080087e7 	.word	0x080087e7
 80084b0:	0800881f 	.word	0x0800881f
 80084b4:	08008843 	.word	0x08008843

080084b8 <_cleanup_r>:
 80084b8:	4901      	ldr	r1, [pc, #4]	; (80084c0 <_cleanup_r+0x8>)
 80084ba:	f000 b8af 	b.w	800861c <_fwalk_reent>
 80084be:	bf00      	nop
 80084c0:	080083f9 	.word	0x080083f9

080084c4 <__sfmoreglue>:
 80084c4:	2268      	movs	r2, #104	; 0x68
 80084c6:	b570      	push	{r4, r5, r6, lr}
 80084c8:	1e4d      	subs	r5, r1, #1
 80084ca:	4355      	muls	r5, r2
 80084cc:	460e      	mov	r6, r1
 80084ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80084d2:	f7ff fa6b 	bl	80079ac <_malloc_r>
 80084d6:	4604      	mov	r4, r0
 80084d8:	b140      	cbz	r0, 80084ec <__sfmoreglue+0x28>
 80084da:	2100      	movs	r1, #0
 80084dc:	e9c0 1600 	strd	r1, r6, [r0]
 80084e0:	300c      	adds	r0, #12
 80084e2:	60a0      	str	r0, [r4, #8]
 80084e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80084e8:	f7fd fb44 	bl	8005b74 <memset>
 80084ec:	4620      	mov	r0, r4
 80084ee:	bd70      	pop	{r4, r5, r6, pc}

080084f0 <__sfp_lock_acquire>:
 80084f0:	4801      	ldr	r0, [pc, #4]	; (80084f8 <__sfp_lock_acquire+0x8>)
 80084f2:	f000 b8b3 	b.w	800865c <__retarget_lock_acquire_recursive>
 80084f6:	bf00      	nop
 80084f8:	2000171d 	.word	0x2000171d

080084fc <__sfp_lock_release>:
 80084fc:	4801      	ldr	r0, [pc, #4]	; (8008504 <__sfp_lock_release+0x8>)
 80084fe:	f000 b8ae 	b.w	800865e <__retarget_lock_release_recursive>
 8008502:	bf00      	nop
 8008504:	2000171d 	.word	0x2000171d

08008508 <__sinit_lock_acquire>:
 8008508:	4801      	ldr	r0, [pc, #4]	; (8008510 <__sinit_lock_acquire+0x8>)
 800850a:	f000 b8a7 	b.w	800865c <__retarget_lock_acquire_recursive>
 800850e:	bf00      	nop
 8008510:	2000171e 	.word	0x2000171e

08008514 <__sinit_lock_release>:
 8008514:	4801      	ldr	r0, [pc, #4]	; (800851c <__sinit_lock_release+0x8>)
 8008516:	f000 b8a2 	b.w	800865e <__retarget_lock_release_recursive>
 800851a:	bf00      	nop
 800851c:	2000171e 	.word	0x2000171e

08008520 <__sinit>:
 8008520:	b510      	push	{r4, lr}
 8008522:	4604      	mov	r4, r0
 8008524:	f7ff fff0 	bl	8008508 <__sinit_lock_acquire>
 8008528:	69a3      	ldr	r3, [r4, #24]
 800852a:	b11b      	cbz	r3, 8008534 <__sinit+0x14>
 800852c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008530:	f7ff bff0 	b.w	8008514 <__sinit_lock_release>
 8008534:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008538:	6523      	str	r3, [r4, #80]	; 0x50
 800853a:	4b13      	ldr	r3, [pc, #76]	; (8008588 <__sinit+0x68>)
 800853c:	4a13      	ldr	r2, [pc, #76]	; (800858c <__sinit+0x6c>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	62a2      	str	r2, [r4, #40]	; 0x28
 8008542:	42a3      	cmp	r3, r4
 8008544:	bf08      	it	eq
 8008546:	2301      	moveq	r3, #1
 8008548:	4620      	mov	r0, r4
 800854a:	bf08      	it	eq
 800854c:	61a3      	streq	r3, [r4, #24]
 800854e:	f000 f81f 	bl	8008590 <__sfp>
 8008552:	6060      	str	r0, [r4, #4]
 8008554:	4620      	mov	r0, r4
 8008556:	f000 f81b 	bl	8008590 <__sfp>
 800855a:	60a0      	str	r0, [r4, #8]
 800855c:	4620      	mov	r0, r4
 800855e:	f000 f817 	bl	8008590 <__sfp>
 8008562:	2200      	movs	r2, #0
 8008564:	2104      	movs	r1, #4
 8008566:	60e0      	str	r0, [r4, #12]
 8008568:	6860      	ldr	r0, [r4, #4]
 800856a:	f7ff ff81 	bl	8008470 <std>
 800856e:	2201      	movs	r2, #1
 8008570:	2109      	movs	r1, #9
 8008572:	68a0      	ldr	r0, [r4, #8]
 8008574:	f7ff ff7c 	bl	8008470 <std>
 8008578:	2202      	movs	r2, #2
 800857a:	2112      	movs	r1, #18
 800857c:	68e0      	ldr	r0, [r4, #12]
 800857e:	f7ff ff77 	bl	8008470 <std>
 8008582:	2301      	movs	r3, #1
 8008584:	61a3      	str	r3, [r4, #24]
 8008586:	e7d1      	b.n	800852c <__sinit+0xc>
 8008588:	08009790 	.word	0x08009790
 800858c:	080084b9 	.word	0x080084b9

08008590 <__sfp>:
 8008590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008592:	4607      	mov	r7, r0
 8008594:	f7ff ffac 	bl	80084f0 <__sfp_lock_acquire>
 8008598:	4b1e      	ldr	r3, [pc, #120]	; (8008614 <__sfp+0x84>)
 800859a:	681e      	ldr	r6, [r3, #0]
 800859c:	69b3      	ldr	r3, [r6, #24]
 800859e:	b913      	cbnz	r3, 80085a6 <__sfp+0x16>
 80085a0:	4630      	mov	r0, r6
 80085a2:	f7ff ffbd 	bl	8008520 <__sinit>
 80085a6:	3648      	adds	r6, #72	; 0x48
 80085a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80085ac:	3b01      	subs	r3, #1
 80085ae:	d503      	bpl.n	80085b8 <__sfp+0x28>
 80085b0:	6833      	ldr	r3, [r6, #0]
 80085b2:	b30b      	cbz	r3, 80085f8 <__sfp+0x68>
 80085b4:	6836      	ldr	r6, [r6, #0]
 80085b6:	e7f7      	b.n	80085a8 <__sfp+0x18>
 80085b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80085bc:	b9d5      	cbnz	r5, 80085f4 <__sfp+0x64>
 80085be:	4b16      	ldr	r3, [pc, #88]	; (8008618 <__sfp+0x88>)
 80085c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80085c4:	60e3      	str	r3, [r4, #12]
 80085c6:	6665      	str	r5, [r4, #100]	; 0x64
 80085c8:	f000 f847 	bl	800865a <__retarget_lock_init_recursive>
 80085cc:	f7ff ff96 	bl	80084fc <__sfp_lock_release>
 80085d0:	2208      	movs	r2, #8
 80085d2:	4629      	mov	r1, r5
 80085d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80085d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80085dc:	6025      	str	r5, [r4, #0]
 80085de:	61a5      	str	r5, [r4, #24]
 80085e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80085e4:	f7fd fac6 	bl	8005b74 <memset>
 80085e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80085ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80085f0:	4620      	mov	r0, r4
 80085f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085f4:	3468      	adds	r4, #104	; 0x68
 80085f6:	e7d9      	b.n	80085ac <__sfp+0x1c>
 80085f8:	2104      	movs	r1, #4
 80085fa:	4638      	mov	r0, r7
 80085fc:	f7ff ff62 	bl	80084c4 <__sfmoreglue>
 8008600:	4604      	mov	r4, r0
 8008602:	6030      	str	r0, [r6, #0]
 8008604:	2800      	cmp	r0, #0
 8008606:	d1d5      	bne.n	80085b4 <__sfp+0x24>
 8008608:	f7ff ff78 	bl	80084fc <__sfp_lock_release>
 800860c:	230c      	movs	r3, #12
 800860e:	603b      	str	r3, [r7, #0]
 8008610:	e7ee      	b.n	80085f0 <__sfp+0x60>
 8008612:	bf00      	nop
 8008614:	08009790 	.word	0x08009790
 8008618:	ffff0001 	.word	0xffff0001

0800861c <_fwalk_reent>:
 800861c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008620:	4606      	mov	r6, r0
 8008622:	4688      	mov	r8, r1
 8008624:	2700      	movs	r7, #0
 8008626:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800862a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800862e:	f1b9 0901 	subs.w	r9, r9, #1
 8008632:	d505      	bpl.n	8008640 <_fwalk_reent+0x24>
 8008634:	6824      	ldr	r4, [r4, #0]
 8008636:	2c00      	cmp	r4, #0
 8008638:	d1f7      	bne.n	800862a <_fwalk_reent+0xe>
 800863a:	4638      	mov	r0, r7
 800863c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008640:	89ab      	ldrh	r3, [r5, #12]
 8008642:	2b01      	cmp	r3, #1
 8008644:	d907      	bls.n	8008656 <_fwalk_reent+0x3a>
 8008646:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800864a:	3301      	adds	r3, #1
 800864c:	d003      	beq.n	8008656 <_fwalk_reent+0x3a>
 800864e:	4629      	mov	r1, r5
 8008650:	4630      	mov	r0, r6
 8008652:	47c0      	blx	r8
 8008654:	4307      	orrs	r7, r0
 8008656:	3568      	adds	r5, #104	; 0x68
 8008658:	e7e9      	b.n	800862e <_fwalk_reent+0x12>

0800865a <__retarget_lock_init_recursive>:
 800865a:	4770      	bx	lr

0800865c <__retarget_lock_acquire_recursive>:
 800865c:	4770      	bx	lr

0800865e <__retarget_lock_release_recursive>:
 800865e:	4770      	bx	lr

08008660 <__swhatbuf_r>:
 8008660:	b570      	push	{r4, r5, r6, lr}
 8008662:	460e      	mov	r6, r1
 8008664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008668:	4614      	mov	r4, r2
 800866a:	2900      	cmp	r1, #0
 800866c:	461d      	mov	r5, r3
 800866e:	b096      	sub	sp, #88	; 0x58
 8008670:	da08      	bge.n	8008684 <__swhatbuf_r+0x24>
 8008672:	2200      	movs	r2, #0
 8008674:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008678:	602a      	str	r2, [r5, #0]
 800867a:	061a      	lsls	r2, r3, #24
 800867c:	d410      	bmi.n	80086a0 <__swhatbuf_r+0x40>
 800867e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008682:	e00e      	b.n	80086a2 <__swhatbuf_r+0x42>
 8008684:	466a      	mov	r2, sp
 8008686:	f000 f903 	bl	8008890 <_fstat_r>
 800868a:	2800      	cmp	r0, #0
 800868c:	dbf1      	blt.n	8008672 <__swhatbuf_r+0x12>
 800868e:	9a01      	ldr	r2, [sp, #4]
 8008690:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008694:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008698:	425a      	negs	r2, r3
 800869a:	415a      	adcs	r2, r3
 800869c:	602a      	str	r2, [r5, #0]
 800869e:	e7ee      	b.n	800867e <__swhatbuf_r+0x1e>
 80086a0:	2340      	movs	r3, #64	; 0x40
 80086a2:	2000      	movs	r0, #0
 80086a4:	6023      	str	r3, [r4, #0]
 80086a6:	b016      	add	sp, #88	; 0x58
 80086a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080086ac <__smakebuf_r>:
 80086ac:	898b      	ldrh	r3, [r1, #12]
 80086ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80086b0:	079d      	lsls	r5, r3, #30
 80086b2:	4606      	mov	r6, r0
 80086b4:	460c      	mov	r4, r1
 80086b6:	d507      	bpl.n	80086c8 <__smakebuf_r+0x1c>
 80086b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80086bc:	6023      	str	r3, [r4, #0]
 80086be:	6123      	str	r3, [r4, #16]
 80086c0:	2301      	movs	r3, #1
 80086c2:	6163      	str	r3, [r4, #20]
 80086c4:	b002      	add	sp, #8
 80086c6:	bd70      	pop	{r4, r5, r6, pc}
 80086c8:	466a      	mov	r2, sp
 80086ca:	ab01      	add	r3, sp, #4
 80086cc:	f7ff ffc8 	bl	8008660 <__swhatbuf_r>
 80086d0:	9900      	ldr	r1, [sp, #0]
 80086d2:	4605      	mov	r5, r0
 80086d4:	4630      	mov	r0, r6
 80086d6:	f7ff f969 	bl	80079ac <_malloc_r>
 80086da:	b948      	cbnz	r0, 80086f0 <__smakebuf_r+0x44>
 80086dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086e0:	059a      	lsls	r2, r3, #22
 80086e2:	d4ef      	bmi.n	80086c4 <__smakebuf_r+0x18>
 80086e4:	f023 0303 	bic.w	r3, r3, #3
 80086e8:	f043 0302 	orr.w	r3, r3, #2
 80086ec:	81a3      	strh	r3, [r4, #12]
 80086ee:	e7e3      	b.n	80086b8 <__smakebuf_r+0xc>
 80086f0:	4b0d      	ldr	r3, [pc, #52]	; (8008728 <__smakebuf_r+0x7c>)
 80086f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80086f4:	89a3      	ldrh	r3, [r4, #12]
 80086f6:	6020      	str	r0, [r4, #0]
 80086f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086fc:	81a3      	strh	r3, [r4, #12]
 80086fe:	9b00      	ldr	r3, [sp, #0]
 8008700:	6120      	str	r0, [r4, #16]
 8008702:	6163      	str	r3, [r4, #20]
 8008704:	9b01      	ldr	r3, [sp, #4]
 8008706:	b15b      	cbz	r3, 8008720 <__smakebuf_r+0x74>
 8008708:	4630      	mov	r0, r6
 800870a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800870e:	f000 f8d1 	bl	80088b4 <_isatty_r>
 8008712:	b128      	cbz	r0, 8008720 <__smakebuf_r+0x74>
 8008714:	89a3      	ldrh	r3, [r4, #12]
 8008716:	f023 0303 	bic.w	r3, r3, #3
 800871a:	f043 0301 	orr.w	r3, r3, #1
 800871e:	81a3      	strh	r3, [r4, #12]
 8008720:	89a0      	ldrh	r0, [r4, #12]
 8008722:	4305      	orrs	r5, r0
 8008724:	81a5      	strh	r5, [r4, #12]
 8008726:	e7cd      	b.n	80086c4 <__smakebuf_r+0x18>
 8008728:	080084b9 	.word	0x080084b9

0800872c <_malloc_usable_size_r>:
 800872c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008730:	1f18      	subs	r0, r3, #4
 8008732:	2b00      	cmp	r3, #0
 8008734:	bfbc      	itt	lt
 8008736:	580b      	ldrlt	r3, [r1, r0]
 8008738:	18c0      	addlt	r0, r0, r3
 800873a:	4770      	bx	lr

0800873c <_raise_r>:
 800873c:	291f      	cmp	r1, #31
 800873e:	b538      	push	{r3, r4, r5, lr}
 8008740:	4604      	mov	r4, r0
 8008742:	460d      	mov	r5, r1
 8008744:	d904      	bls.n	8008750 <_raise_r+0x14>
 8008746:	2316      	movs	r3, #22
 8008748:	6003      	str	r3, [r0, #0]
 800874a:	f04f 30ff 	mov.w	r0, #4294967295
 800874e:	bd38      	pop	{r3, r4, r5, pc}
 8008750:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008752:	b112      	cbz	r2, 800875a <_raise_r+0x1e>
 8008754:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008758:	b94b      	cbnz	r3, 800876e <_raise_r+0x32>
 800875a:	4620      	mov	r0, r4
 800875c:	f000 f830 	bl	80087c0 <_getpid_r>
 8008760:	462a      	mov	r2, r5
 8008762:	4601      	mov	r1, r0
 8008764:	4620      	mov	r0, r4
 8008766:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800876a:	f000 b817 	b.w	800879c <_kill_r>
 800876e:	2b01      	cmp	r3, #1
 8008770:	d00a      	beq.n	8008788 <_raise_r+0x4c>
 8008772:	1c59      	adds	r1, r3, #1
 8008774:	d103      	bne.n	800877e <_raise_r+0x42>
 8008776:	2316      	movs	r3, #22
 8008778:	6003      	str	r3, [r0, #0]
 800877a:	2001      	movs	r0, #1
 800877c:	e7e7      	b.n	800874e <_raise_r+0x12>
 800877e:	2400      	movs	r4, #0
 8008780:	4628      	mov	r0, r5
 8008782:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008786:	4798      	blx	r3
 8008788:	2000      	movs	r0, #0
 800878a:	e7e0      	b.n	800874e <_raise_r+0x12>

0800878c <raise>:
 800878c:	4b02      	ldr	r3, [pc, #8]	; (8008798 <raise+0xc>)
 800878e:	4601      	mov	r1, r0
 8008790:	6818      	ldr	r0, [r3, #0]
 8008792:	f7ff bfd3 	b.w	800873c <_raise_r>
 8008796:	bf00      	nop
 8008798:	20000188 	.word	0x20000188

0800879c <_kill_r>:
 800879c:	b538      	push	{r3, r4, r5, lr}
 800879e:	2300      	movs	r3, #0
 80087a0:	4d06      	ldr	r5, [pc, #24]	; (80087bc <_kill_r+0x20>)
 80087a2:	4604      	mov	r4, r0
 80087a4:	4608      	mov	r0, r1
 80087a6:	4611      	mov	r1, r2
 80087a8:	602b      	str	r3, [r5, #0]
 80087aa:	f7f8 ff2b 	bl	8001604 <_kill>
 80087ae:	1c43      	adds	r3, r0, #1
 80087b0:	d102      	bne.n	80087b8 <_kill_r+0x1c>
 80087b2:	682b      	ldr	r3, [r5, #0]
 80087b4:	b103      	cbz	r3, 80087b8 <_kill_r+0x1c>
 80087b6:	6023      	str	r3, [r4, #0]
 80087b8:	bd38      	pop	{r3, r4, r5, pc}
 80087ba:	bf00      	nop
 80087bc:	20001718 	.word	0x20001718

080087c0 <_getpid_r>:
 80087c0:	f7f8 bf1e 	b.w	8001600 <_getpid>

080087c4 <__sread>:
 80087c4:	b510      	push	{r4, lr}
 80087c6:	460c      	mov	r4, r1
 80087c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087cc:	f000 f894 	bl	80088f8 <_read_r>
 80087d0:	2800      	cmp	r0, #0
 80087d2:	bfab      	itete	ge
 80087d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80087d6:	89a3      	ldrhlt	r3, [r4, #12]
 80087d8:	181b      	addge	r3, r3, r0
 80087da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80087de:	bfac      	ite	ge
 80087e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80087e2:	81a3      	strhlt	r3, [r4, #12]
 80087e4:	bd10      	pop	{r4, pc}

080087e6 <__swrite>:
 80087e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087ea:	461f      	mov	r7, r3
 80087ec:	898b      	ldrh	r3, [r1, #12]
 80087ee:	4605      	mov	r5, r0
 80087f0:	05db      	lsls	r3, r3, #23
 80087f2:	460c      	mov	r4, r1
 80087f4:	4616      	mov	r6, r2
 80087f6:	d505      	bpl.n	8008804 <__swrite+0x1e>
 80087f8:	2302      	movs	r3, #2
 80087fa:	2200      	movs	r2, #0
 80087fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008800:	f000 f868 	bl	80088d4 <_lseek_r>
 8008804:	89a3      	ldrh	r3, [r4, #12]
 8008806:	4632      	mov	r2, r6
 8008808:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800880c:	81a3      	strh	r3, [r4, #12]
 800880e:	4628      	mov	r0, r5
 8008810:	463b      	mov	r3, r7
 8008812:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008816:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800881a:	f000 b817 	b.w	800884c <_write_r>

0800881e <__sseek>:
 800881e:	b510      	push	{r4, lr}
 8008820:	460c      	mov	r4, r1
 8008822:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008826:	f000 f855 	bl	80088d4 <_lseek_r>
 800882a:	1c43      	adds	r3, r0, #1
 800882c:	89a3      	ldrh	r3, [r4, #12]
 800882e:	bf15      	itete	ne
 8008830:	6560      	strne	r0, [r4, #84]	; 0x54
 8008832:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008836:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800883a:	81a3      	strheq	r3, [r4, #12]
 800883c:	bf18      	it	ne
 800883e:	81a3      	strhne	r3, [r4, #12]
 8008840:	bd10      	pop	{r4, pc}

08008842 <__sclose>:
 8008842:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008846:	f000 b813 	b.w	8008870 <_close_r>
	...

0800884c <_write_r>:
 800884c:	b538      	push	{r3, r4, r5, lr}
 800884e:	4604      	mov	r4, r0
 8008850:	4608      	mov	r0, r1
 8008852:	4611      	mov	r1, r2
 8008854:	2200      	movs	r2, #0
 8008856:	4d05      	ldr	r5, [pc, #20]	; (800886c <_write_r+0x20>)
 8008858:	602a      	str	r2, [r5, #0]
 800885a:	461a      	mov	r2, r3
 800885c:	f7f8 feee 	bl	800163c <_write>
 8008860:	1c43      	adds	r3, r0, #1
 8008862:	d102      	bne.n	800886a <_write_r+0x1e>
 8008864:	682b      	ldr	r3, [r5, #0]
 8008866:	b103      	cbz	r3, 800886a <_write_r+0x1e>
 8008868:	6023      	str	r3, [r4, #0]
 800886a:	bd38      	pop	{r3, r4, r5, pc}
 800886c:	20001718 	.word	0x20001718

08008870 <_close_r>:
 8008870:	b538      	push	{r3, r4, r5, lr}
 8008872:	2300      	movs	r3, #0
 8008874:	4d05      	ldr	r5, [pc, #20]	; (800888c <_close_r+0x1c>)
 8008876:	4604      	mov	r4, r0
 8008878:	4608      	mov	r0, r1
 800887a:	602b      	str	r3, [r5, #0]
 800887c:	f7f8 feec 	bl	8001658 <_close>
 8008880:	1c43      	adds	r3, r0, #1
 8008882:	d102      	bne.n	800888a <_close_r+0x1a>
 8008884:	682b      	ldr	r3, [r5, #0]
 8008886:	b103      	cbz	r3, 800888a <_close_r+0x1a>
 8008888:	6023      	str	r3, [r4, #0]
 800888a:	bd38      	pop	{r3, r4, r5, pc}
 800888c:	20001718 	.word	0x20001718

08008890 <_fstat_r>:
 8008890:	b538      	push	{r3, r4, r5, lr}
 8008892:	2300      	movs	r3, #0
 8008894:	4d06      	ldr	r5, [pc, #24]	; (80088b0 <_fstat_r+0x20>)
 8008896:	4604      	mov	r4, r0
 8008898:	4608      	mov	r0, r1
 800889a:	4611      	mov	r1, r2
 800889c:	602b      	str	r3, [r5, #0]
 800889e:	f7f8 fede 	bl	800165e <_fstat>
 80088a2:	1c43      	adds	r3, r0, #1
 80088a4:	d102      	bne.n	80088ac <_fstat_r+0x1c>
 80088a6:	682b      	ldr	r3, [r5, #0]
 80088a8:	b103      	cbz	r3, 80088ac <_fstat_r+0x1c>
 80088aa:	6023      	str	r3, [r4, #0]
 80088ac:	bd38      	pop	{r3, r4, r5, pc}
 80088ae:	bf00      	nop
 80088b0:	20001718 	.word	0x20001718

080088b4 <_isatty_r>:
 80088b4:	b538      	push	{r3, r4, r5, lr}
 80088b6:	2300      	movs	r3, #0
 80088b8:	4d05      	ldr	r5, [pc, #20]	; (80088d0 <_isatty_r+0x1c>)
 80088ba:	4604      	mov	r4, r0
 80088bc:	4608      	mov	r0, r1
 80088be:	602b      	str	r3, [r5, #0]
 80088c0:	f7f8 fed2 	bl	8001668 <_isatty>
 80088c4:	1c43      	adds	r3, r0, #1
 80088c6:	d102      	bne.n	80088ce <_isatty_r+0x1a>
 80088c8:	682b      	ldr	r3, [r5, #0]
 80088ca:	b103      	cbz	r3, 80088ce <_isatty_r+0x1a>
 80088cc:	6023      	str	r3, [r4, #0]
 80088ce:	bd38      	pop	{r3, r4, r5, pc}
 80088d0:	20001718 	.word	0x20001718

080088d4 <_lseek_r>:
 80088d4:	b538      	push	{r3, r4, r5, lr}
 80088d6:	4604      	mov	r4, r0
 80088d8:	4608      	mov	r0, r1
 80088da:	4611      	mov	r1, r2
 80088dc:	2200      	movs	r2, #0
 80088de:	4d05      	ldr	r5, [pc, #20]	; (80088f4 <_lseek_r+0x20>)
 80088e0:	602a      	str	r2, [r5, #0]
 80088e2:	461a      	mov	r2, r3
 80088e4:	f7f8 fec2 	bl	800166c <_lseek>
 80088e8:	1c43      	adds	r3, r0, #1
 80088ea:	d102      	bne.n	80088f2 <_lseek_r+0x1e>
 80088ec:	682b      	ldr	r3, [r5, #0]
 80088ee:	b103      	cbz	r3, 80088f2 <_lseek_r+0x1e>
 80088f0:	6023      	str	r3, [r4, #0]
 80088f2:	bd38      	pop	{r3, r4, r5, pc}
 80088f4:	20001718 	.word	0x20001718

080088f8 <_read_r>:
 80088f8:	b538      	push	{r3, r4, r5, lr}
 80088fa:	4604      	mov	r4, r0
 80088fc:	4608      	mov	r0, r1
 80088fe:	4611      	mov	r1, r2
 8008900:	2200      	movs	r2, #0
 8008902:	4d05      	ldr	r5, [pc, #20]	; (8008918 <_read_r+0x20>)
 8008904:	602a      	str	r2, [r5, #0]
 8008906:	461a      	mov	r2, r3
 8008908:	f7f8 fe8a 	bl	8001620 <_read>
 800890c:	1c43      	adds	r3, r0, #1
 800890e:	d102      	bne.n	8008916 <_read_r+0x1e>
 8008910:	682b      	ldr	r3, [r5, #0]
 8008912:	b103      	cbz	r3, 8008916 <_read_r+0x1e>
 8008914:	6023      	str	r3, [r4, #0]
 8008916:	bd38      	pop	{r3, r4, r5, pc}
 8008918:	20001718 	.word	0x20001718

0800891c <_init>:
 800891c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800891e:	bf00      	nop
 8008920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008922:	bc08      	pop	{r3}
 8008924:	469e      	mov	lr, r3
 8008926:	4770      	bx	lr

08008928 <_fini>:
 8008928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800892a:	bf00      	nop
 800892c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800892e:	bc08      	pop	{r3}
 8008930:	469e      	mov	lr, r3
 8008932:	4770      	bx	lr
